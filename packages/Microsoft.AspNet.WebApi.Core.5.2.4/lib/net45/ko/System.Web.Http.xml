<?xml version="1.0" encoding="utf-8"?>
<doc>
  <assembly>
    <name>System.Web.Http</name>
  </assembly>
  <members>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.Http.InvalidByteRangeException)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Exception)">
      <summary>예외를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>요청은 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연결되어야 합니다.콘텐츠가 <see cref="T:System.Web.Http.HttpError" /> 인스턴스의 직렬화된 표현인 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="statusCode">응답의 상태 코드입니다.</param>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String)">
      <summary>오류 메시지를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>요청은 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연결되어야 합니다.콘텐츠가 <see cref="T:System.Web.Http.HttpError" /> 인스턴스의 직렬화된 표현인 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="statusCode">응답의 상태 코드입니다.</param>
      <param name="message">오류 메시지입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.String,System.Exception)">
      <summary>오류 메시지가 포함된 예외를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>요청은 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연결되어야 합니다.콘텐츠가 <see cref="T:System.Web.Http.HttpError" /> 인스턴스의 직렬화된 표현인 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="statusCode">응답의 상태 코드입니다.</param>
      <param name="message">오류 메시지입니다.</param>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.HttpError)">
      <summary>오류를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>요청은 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연결되어야 합니다.콘텐츠가 <see cref="T:System.Web.Http.HttpError" /> 인스턴스의 직렬화된 표현인 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="statusCode">응답의 상태 코드입니다.</param>
      <param name="error">HTTP 오류입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateErrorResponse(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>모델 상태의 오류를 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>요청은 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연결되어야 합니다.콘텐츠가 <see cref="T:System.Web.Http.HttpError" /> 인스턴스의 직렬화된 표현인 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="statusCode">응답의 상태 코드입니다.</param>
      <param name="modelState">모델 상태입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="formatter">미디어 유형 포맷터입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="formatter">미디어 유형 포맷터입니다.</param>
      <param name="mediaType">미디어 유형 헤더 값입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="formatter">미디어 유형 포맷터입니다.</param>
      <param name="mediaType">미디어 유형입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="mediaType">미디어 유형 헤더 값입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.String)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="mediaType">미디어 유형입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,System.Net.HttpStatusCode,``0,System.Web.Http.HttpConfiguration)">
      <summary>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만듭니다.</summary>
      <returns>관련 <see cref="T:System.Net.Http.HttpRequestMessage" />에 연결된, 초기화된 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
      <param name="request">이 응답 메시지를 초래한 HTTP 요청 메시지입니다.</param>
      <param name="statusCode">HTTP 응답 상태 코드입니다.</param>
      <param name="value">HTTP 응답 메시지 내용입니다.</param>
      <param name="configuration">서비스를 확인하는 데 사용되는 종속성 해결 프로그램이 포함된 HTTP 구성입니다.</param>
      <typeparam name="T">HTTP 응답 메시지의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.CreateResponse``1(System.Net.Http.HttpRequestMessage,``0)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.DisposeRequestResources(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)" /> 메서드를 통해 추가된 <paramref name="request" />와 연관된, 추적된 모든 리소스를 삭제합니다.</summary>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetActionDescriptor(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetClientCertificate(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 HTTP 요청에서 현재 X.509 인증서를 가져옵니다.</summary>
      <returns>현재 <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />거나, 인증서를 사용할 수 없는 경우 null입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetConfiguration(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 요청에 대해 <see cref="T:System.Web.Http.HttpConfiguration" />을 검색합니다.</summary>
      <returns>지정된 요청에 대한 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetCorrelationId(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 <paramref name="request" />와 연관된 상관 관계 ID로 지정된 <see cref="T:System.Guid" />를 검색합니다.이 값은 이 메서드를 처음 호출할 때 만들어지고 설정됩니다.</summary>
      <returns>요청과 연관된 상관 관계 ID를 나타내는 <see cref="T:System.Guid" /> 개체입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetDependencyScope(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 요청에 대한 <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />을 검색하거나, 요청을 사용할 수 없는 경우 null입니다.</summary>
      <returns>지정된 요청에 대한 <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />이거나, 요청을 사용할 수 없는 경우 null입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetQueryNameValuePairs(System.Net.Http.HttpRequestMessage)">
      <summary>구문 분석된 쿼리 문자열을 키-값 쌍의 컬렉션으로 가져옵니다.</summary>
      <returns>키-값 쌍의 컬렉션인 쿼리 문자열입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRequestContext(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetResourcesForDisposal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 요청에 대한 <see cref="T:System.Web.Http.Routing.IHttpRouteData" />을 검색하거나, 요청을 사용할 수 없는 경우 null입니다.</summary>
      <returns>지정된 요청에 대한 <see cref="T:System.Web.Http.Routing.IHttpRouteData" />이거나, 요청을 사용할 수 없는 경우 null입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetSynchronizationContext(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 요청에 대한 <see cref="T:System.Threading.SynchronizationContext" />을 검색하거나, 요청을 사용할 수 없는 경우 null입니다.</summary>
      <returns>지정된 요청에 대한 <see cref="T:System.Threading.SynchronizationContext" />이거나, 요청을 사용할 수 없는 경우 null입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.GetUrlHelper(System.Net.Http.HttpRequestMessage)">
      <summary>HTTP 요청의 <see cref="T:System.Web.Http.Routing.UrlHelper" /> 인스턴스를 가져옵니다.</summary>
      <returns>지정된 HTTP 요청에 대해 초기화된 <see cref="T:System.Web.Http.Routing.UrlHelper" /> 인스턴스입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsBatchRequest(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.IsLocal(System.Net.Http.HttpRequestMessage)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.IDisposable})"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.RegisterForDispose(System.Net.Http.HttpRequestMessage,System.IDisposable)">
      <summary>
        <paramref name="request" />가 삭제되면 호스트에서 삭제할 리소스 목록에 지정된 <paramref name="resource" />를 추가합니다.</summary>
      <param name="request">
        <paramref name="resource" />의 수명을 제어하는 HTTP 요청입니다.</param>
      <param name="resource">
        <paramref name="request" />를 삭제할 때 삭제할 리소스입니다.</param>
    </member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetConfiguration(System.Net.Http.HttpRequestMessage,System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRequestContext(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpRequestContext)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.SetRouteData(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRouteData)"></member>
    <member name="M:System.Net.Http.HttpRequestMessageExtensions.ShouldIncludeErrorDetail(System.Net.Http.HttpRequestMessage)"></member>
    <member name="T:System.Net.Http.HttpResponseMessageExtensions">
      <summary>ASP.NET 작업의 HTTP 응답에 대한 메시지 확장을 나타냅니다.</summary>
    </member>
    <member name="M:System.Net.Http.HttpResponseMessageExtensions.TryGetContentValue``1(System.Net.Http.HttpResponseMessage,``0@)">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessageExtensions" />에 대한 콘텐츠 값을 검색하려고 시도합니다.</summary>
      <returns>콘텐츠 값의 검색 결과입니다.</returns>
      <param name="response">작업 응답입니다.</param>
      <param name="value">콘텐츠 값입니다.</param>
      <typeparam name="T">검색할 값의 형식입니다.</typeparam>
    </member>
    <member name="T:System.Net.Http.Formatting.MediaTypeFormatterExtensions">
      <summary>
        <see cref="T:System.Net.Http.Formatting.MediaTypeMapping" /> 항목을 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" />에 추가할 수 있는 확장을 나타냅니다. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.Net.Http.Headers.MediaTypeHeaderValue)"></member>
    <member name="M:System.Net.Http.Formatting.MediaTypeFormatterExtensions.AddUriPathExtensionMapping(System.Net.Http.Formatting.MediaTypeFormatter,System.String,System.String)"></member>
    <member name="T:System.Net.Http.Formatting.UriPathExtensionMapping">
      <summary>
        <see cref="T:System.Uri" />에 표시되는 경로 확장명에 <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />를 입력합니다. </summary>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="uriPathExtension">mediaType에 해당하는 확장명입니다. 이 값은 점(.) 또는 와일드카드를 포함할 수 없습니다.</param>
      <param name="mediaType">uriPathExtension이 일치할 경우에 반환되는 <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />입니다.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.#ctor(System.String,System.String)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="uriPathExtension">mediaType에 해당하는 확장명입니다. 이 값은 점(.) 또는 와일드카드를 포함할 수 없습니다.</param>
      <param name="mediaType">uriPathExtension이 일치할 경우에 반환되는 미디어 유형입니다.</param>
    </member>
    <member name="M:System.Net.Http.Formatting.UriPathExtensionMapping.TryMatchMediaType(System.Net.Http.HttpRequestMessage)">
      <summary> 이 <see cref="T:System.Net.Http.Formatting.UriPathExtensionMapping" /> 인스턴스가 요청의 <see cref="T:System.Uri" />에 <see cref="T:System.Net.Http.Headers.MediaTypeHeaderValue" />를 제공할 수 있는지 여부를 나타내는 값을 반환합니다. </summary>
      <returns>이 인스턴스가 요청의 파일 확장명과 일치할 수 있으면 1.0을 반환하고, 그렇지 않으면 0.0을 반환합니다.</returns>
      <param name="request">확인할 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.</param>
    </member>
    <member name="P:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtension">
      <summary>
        <see cref="T:System.Uri" /> 경로 확장명을 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Uri" /> 경로 확장명입니다.</returns>
    </member>
    <member name="F:System.Net.Http.Formatting.UriPathExtensionMapping.UriPathExtensionKey">
      <summary>
        <see cref="T:System.Uri" /> 경로 확장명 키입니다.</summary>
    </member>
    <member name="T:System.Web.Http.AcceptVerbsAttribute">
      <summary>작업 메서드에서 응답할 HTTP 메서드를 지정하는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String)">
      <summary>응답할 동작 메서드를 사용하여 <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="method">동작 메서드에서 응답할 HTTP 메서드입니다.</param>
    </member>
    <member name="M:System.Web.Http.AcceptVerbsAttribute.#ctor(System.String[])">
      <summary>작업 메서드에서 응답할 HTTP 메서드 목록을 사용해 <see cref="T:System.Web.Http.AcceptVerbsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="methods">작업 메서드에서 응답할 HTTP 메서드입니다.</param>
    </member>
    <member name="P:System.Web.Http.AcceptVerbsAttribute.HttpMethods">
      <summary>작업 메서드에서 응답할 HTTP 메서드 목록을 가져오거나 설정합니다.</summary>
      <returns>작업 메서드에서 응답할 HTTP 메서드 목록을 가져오거나 설정합니다.</returns>
    </member>
    <member name="T:System.Web.Http.ActionNameAttribute">
      <summary>작업 이름에 사용되는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ActionNameAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.ActionNameAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">작업 이름입니다.</param>
    </member>
    <member name="P:System.Web.Http.ActionNameAttribute.Name">
      <summary>작업 이름을 가져오거나 설정합니다.</summary>
      <returns>작업 이름입니다.</returns>
    </member>
    <member name="T:System.Web.Http.AllowAnonymousAttribute">
      <summary>권한 부여 중에 <see cref="T:System.Web.Http.AuthorizeAttribute" />에서 작업 및 컨트롤러를 건너뛰도록 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.AllowAnonymousAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.AllowAnonymousAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.ApiController">
      <summary>API 컨트롤러에 대한 속성 및 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.#ctor"></member>
    <member name="P:System.Web.Http.ApiController.ActionContext">
      <summary>작업 컨텍스트를 가져옵니다.</summary>
      <returns>작업 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.BadRequestResult" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Web.Http.Results.ErrorMessageResult" />(400 잘못된 요청)를 만듭니다.</summary>
      <returns>지정된 모델 상태를 사용하는 <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />입니다.</returns>
      <param name="message">사용자에게 표시되는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.BadRequest(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>지정된 모델 상태를 사용하여 <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />를 만듭니다.</summary>
      <returns>지정된 모델 상태를 사용하는 <see cref="T:System.Web.Http.Results.InvalidModelStateResult" />입니다.</returns>
      <param name="modelState">오류에 포함할 모델 상태입니다.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Configuration">
      <summary>현재 <see cref="T:System.Web.Http.ApiController" />의 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</summary>
      <returns>현재 <see cref="T:System.Web.Http.ApiController" />의 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Conflict">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" />(409 충돌)를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.ConflictResult" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0)">
      <summary>지정된 값을 사용하여 &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt;을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 &lt;see cref="T:System.Web.Http.NegotiatedContentResult`1" /&gt;입니다.</returns>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="value">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter)">
      <summary>지정된 값을 사용하여 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;입니다.</returns>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="value">엔터티 본문에서 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="formatter">콘텐츠 형식을 지정하는 데 사용하는 포맷터입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue)">
      <summary>지정된 값을 사용하여 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;입니다.</returns>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="value">엔터티 본문에서 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="formatter">콘텐츠 형식을 지정하는 데 사용하는 포맷터입니다.</param>
      <param name="mediaType"> 포맷터가 기본값을 선택하도록 하는 Content-Type 헤더 값 또는 &lt;see langword="null" /&gt;입니다. </param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Content``1(System.Net.HttpStatusCode,``0,System.Net.Http.Formatting.MediaTypeFormatter,System.String)">
      <summary>지정된 값을 사용하여 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 &lt;see cref="T:System.Web.Http.FormattedContentResult`1" /&gt;입니다.</returns>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="value">엔터티 본문에서 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="formatter">콘텐츠 형식을 지정하는 데 사용하는 포맷터입니다.</param>
      <param name="mediaType">Content-Type 헤더 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ControllerContext">
      <summary>현재 <see cref="T:System.Web.Http.ApiController" />의 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</summary>
      <returns>현재 <see cref="T:System.Web.Http.ApiController" />의 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.String,``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />(201 생성됨)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />입니다.</returns>
      <param name="location">콘텐츠를 만든 위치입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Created``1(System.Uri,``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />(201 생성됨)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" />입니다.</returns>
      <param name="location">콘텐츠를 만든 위치입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />(201 생성됨)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />입니다.</returns>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.CreatedAtRoute``1(System.String,System.Object,``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />(201 생성됨)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" />입니다.</returns>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose">
      <summary>관리되지 않는 리소스 확보, 해제, 재설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ApiController.Dispose(System.Boolean)">
      <summary>개체에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리된 리소스와 관리되지 않은 리소스를 모두 해제하려면 true이고, 관리되지 않은 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>단일 HTTP 작업을 비동기적으로 실행합니다.</summary>
      <returns>새로 시작된 작업입니다.</returns>
      <param name="controllerContext">단일 HTTP 작업에 대한 컨트롤러 컨텍스트입니다.</param>
      <param name="cancellationToken">HTTP 작업에 할당된 취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Initialize(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>
        <see cref="T:System.Web.Http.ApiController" /> 인스턴스를 지정된 controllerContext를 사용하여 초기화합니다.</summary>
      <param name="controllerContext">초기화에 사용되는 <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />(500 내부 서버 오류)를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.InternalServerError(System.Exception)">
      <summary>지정된 예외를 사용하여 <see cref="T:System.Web.Http.Results.ExceptionResult" />(500 내부 서버 오류)를 만듭니다.</summary>
      <returns>지정된 예외를 사용하는 <see cref="T:System.Web.Http.Results.ExceptionResult" />입니다.</returns>
      <param name="exception">오류에 포함할 예외입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.JsonResult`1" />(200 정상)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.JsonResult`1" />입니다.</returns>
      <param name="content">엔터티 본문에서 직렬화할 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.JsonResult`1" />(200 정상)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.JsonResult`1" />입니다.</returns>
      <param name="content">엔터티 본문에서 직렬화할 콘텐츠 값입니다.</param>
      <param name="serializerSettings">직렬 변환기 설정입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Json``1(``0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.JsonResult`1" />(200 정상)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.JsonResult`1" />입니다.</returns>
      <param name="content">엔터티 본문에서 직렬화할 콘텐츠 값입니다.</param>
      <param name="serializerSettings">직렬 변환기 설정입니다.</param>
      <param name="encoding">콘텐츠 인코딩입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.ApiController.ModelState">
      <summary>모델 바인딩 프로세스 이후의 모델 상태를 가져옵니다.</summary>
      <returns>모델 바인딩 프로세스 이후의 모델 상태입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.NotFound">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" />를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.NotFoundResult" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok">
      <summary>
        <see cref="T:System.Web.Http.Results.OkResult" />(200 정상)를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Results.OkResult" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Ok``1(``0)">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" />를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" />입니다.</returns>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.String)">
      <summary>지정된 값을 사용하는 리디렉션 결과(302 있음)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 리디렉션 결과(302 있음)입니다.</returns>
      <param name="location">리디렉션할 위치입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Redirect(System.Uri)">
      <summary>지정된 값을 사용하는 리디렉션 결과(302 있음)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 리디렉션 결과(302 있음)입니다.</returns>
      <param name="location">리디렉션할 위치입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>지정된 값을 사용하는 결과(302 있음)를 라우팅할 리디렉션을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 결과(302 있음)를 라우팅할 리디렉션입니다.</returns>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.RedirectToRoute(System.String,System.Object)">
      <summary>지정된 값을 사용하는 결과(302 있음)를 라우팅할 리디렉션을 만듭니다.</summary>
      <returns>지정된 값을 사용하는 결과(302 있음)를 라우팅할 리디렉션입니다.</returns>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Request">
      <summary>현재 <see cref="T:System.Web.Http.ApiController" />의 HttpRequestMessage를 가져오거나 설정합니다.</summary>
      <returns>현재 <see cref="T:System.Web.Http.ApiController" />의 HttpRequestMessage입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.RequestContext">
      <summary>요청 컨텍스트를 가져옵니다.</summary>
      <returns>요청 컨텍스트입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.ResponseMessage(System.Net.Http.HttpResponseMessage)">
      <summary>지정된 응답을 사용하여 <see cref="T:System.Web.Http.Results.ResponseMessageResult" />를 만듭니다.</summary>
      <returns>지정된 응답에 대한 <see cref="T:System.Web.Http.Results.ResponseMessageResult" />입니다.</returns>
      <param name="response">HTTP 응답 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.StatusCode(System.Net.HttpStatusCode)">
      <summary>지정된 상태 코드를 사용하여 <see cref="T:System.Web.Http.StatusCodeResult" />를 만듭니다.</summary>
      <returns>지정된 상태 코드를 사용하는 <see cref="T:System.Web.Http.StatusCodeResult" />입니다.</returns>
      <param name="status">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue})">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.UnauthorizedResult" />(401 권한 없음)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.UnauthorizedResult" />입니다.</returns>
      <param name="challenges">WWW-Authenticate 챌린지입니다.</param>
    </member>
    <member name="M:System.Web.Http.ApiController.Unauthorized(System.Net.Http.Headers.AuthenticationHeaderValue[])">
      <summary>지정된 값을 사용하여 <see cref="T:System.Web.Http.Results.UnauthorizedResult" />(401 권한 없음)를 만듭니다.</summary>
      <returns>지정된 값을 사용하는 <see cref="T:System.Web.Http.Results.UnauthorizedResult" />입니다.</returns>
      <param name="challenges">WWW-Authenticate 챌린지입니다.</param>
    </member>
    <member name="P:System.Web.Http.ApiController.Url">
      <summary>다른 API에 대한 URL을 생성하는 데 사용되는 <see cref="T:System.Web.Http.Routing.UrlHelper" />의 인스턴스를 가져옵니다. </summary>
      <returns>다른 API에 대한 URL을 생성하는 데 사용되는 <see cref="T:System.Web.Http.Routing.UrlHelper" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ApiController.User">
      <summary>이 요청과 연관된 현재 사용자를 반환합니다.</summary>
      <returns>이 요청과 연관된 현재 주체입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0)">
      <summary>지정된 엔터티의 유효성을 검사하고 모델 상태에 접두사가 비어 있는 상태로 유효성 검사 오류를 추가합니다(있는 경우).</summary>
      <param name="entity">엔터티 유효성을 검사하고 있습니다.</param>
      <typeparam name="TEntity">유효성을 검사할 엔터티 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ApiController.Validate``1(``0,System.String)">
      <summary>지정된 엔터티의 유효성을 검사하고 모델 상태에 유효성 검사 오류를 추가합니다(있는 경우).</summary>
      <param name="entity">엔터티 유효성을 검사하고 있습니다.</param>
      <param name="keyPrefix">모델 상태에서 모델 상태 오류가 추가되는 키 접두사입니다.</param>
      <typeparam name="TEntity">유효성을 검사할 엔터티 유형입니다.</typeparam>
    </member>
    <member name="T:System.Web.Http.AuthorizeAttribute">
      <summary>요청의 <see cref="T:System.Security.Principal.IPrincipal" />을 확인하는 권한 부여 필터를 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.AuthorizeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.HandleUnauthorizedRequest(System.Web.Http.Controllers.HttpActionContext)">
      <summary>권한 부여에 실패한 요청을 처리합니다.</summary>
      <param name="actionContext">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.IsAuthorized(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 컨트롤에 권한이 부여되는지 여부를 나타냅니다.</summary>
      <returns>컨트롤에 권한이 부여되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.AuthorizeAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>작업에 권한을 부여할 때 호출됩니다.</summary>
      <param name="actionContext">컨텍스트입니다.</param>
      <exception cref="T:System.ArgumentNullException">작업 매개 변수가 null입니다.</exception>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Roles">
      <summary>권한이 부여된 역할을 가져오거나 설정합니다. </summary>
      <returns>역할 문자열입니다. </returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.TypeId">
      <summary>이 특성의 고유 식별자를 가져옵니다.</summary>
      <returns>이 특성의 고유 식별자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.AuthorizeAttribute.Users">
      <summary>권한이 있는 사용자를 가져오거나 설정합니다. </summary>
      <returns>사용자 문자열입니다. </returns>
    </member>
    <member name="T:System.Web.Http.FromBodyAttribute">
      <summary> 작업 매개 변수를 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />의 엔터티 본문에서만 가져오도록 지정하는 특성입니다. </summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.FromBodyAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.FromBodyAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>매개 변수 바인딩을 가져옵니다.</summary>
      <returns>매개 변수 바인딩입니다.</returns>
      <param name="parameter">매개 변수 설명입니다.</param>
    </member>
    <member name="T:System.Web.Http.FromUriAttribute">
      <summary>작업 매개 변수를 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />의 URI에서 가져오도록 지정하는 특성입니다.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.FromUriAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.FromUriAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>모델 바인더의 값 공급자 팩터리를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 개체의 컬렉션입니다.</returns>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="T:System.Web.Http.HttpBindNeverAttribute">
      <summary>HTTP 바인딩에서 속성을 제외해야 하는지를 지정하는 특성을 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpBindNeverAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpBindNeverAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.HttpBindRequiredAttribute">
      <summary>http 바인딩에 대한 필수 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpBindRequiredAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpBindRequiredAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.HttpConfiguration">
      <summary>
        <see cref="T:System.Web.Http.HttpServer" /> 인스턴스의 구성을 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.#ctor(System.Web.Http.HttpRouteCollection)">
      <summary>HTTP 경로 컬렉션을 사용하여 <see cref="T:System.Web.Http.HttpConfiguration" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routes">이 인스턴스와 연관시킬 HTTP 경로 컬렉션입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.DependencyResolver">
      <summary>이 인스턴스와 연관된 종속성 확인자를 가져오거나 설정합니다.</summary>
      <returns>종속성 확인자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose">
      <summary>관리되지 않는 리소스 확보, 해제, 재설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.Dispose(System.Boolean)">
      <summary>개체에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리된 리소스와 관리되지 않은 리소스를 모두 해제하려면 true이고, 관리되지 않은 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfiguration.EnsureInitialized">
      <summary>이니셜라이저 후크를 호출합니다. 이 지점에서 앞쪽으로 변경 불가능한 것으로 간주됩니다. 이 항목을 여러 번 호출하는 것이 안전합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Filters">
      <summary>이 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스를 사용하여 제공된 모든 요청에 적용되는 필터 목록을 가져옵니다.</summary>
      <returns>필터 목록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Formatters">
      <summary>이 인스턴스에 대한 미디어 유형 포맷터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.IncludeErrorDetailPolicy">
      <summary>오류 메시지에 오류 정보를 포함해야 할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>해당 오류 정보 정책을 나타내는 <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" /> 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Initializer">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" />이 요청 처리에 사용되기 전에 해당 구성의 최종 초기화를 수행하는 작업을 가져오거나 설정합니다. </summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스의 최종 초기화를 수행하는 작업입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.MessageHandlers">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" />가 스택으로 이동하고 그 대신 <see cref="T:System.Net.Http.HttpResponseMessage" />가 스택에서 나올 때 호출할 <see cref="T:System.Net.Http.DelegatingHandler" /> 인스턴스가 순서대로 지정된 목록을 가져옵니다. </summary>
      <returns>메시지 처리기 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.ParameterBindingRules">
      <summary>매개 변수를 바인딩하는 방법에 대한 규칙의 컬렉션을 가져옵니다.</summary>
      <returns>지정된 매개 변수에 대한 매개 변수 바인딩을 생성할 수 있는 함수의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Properties">
      <summary>이 인스턴스와 연관된 속성을 가져옵니다.</summary>
      <returns>속성이 포함된 <see cref="T:System.Collections.Concurrent.ConcurrentDictionary`2" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Routes">
      <summary>이 <see cref="T:System.Web.Http.HttpConfiguration" /> 인스턴스와 연관된 <see cref="T:System.Web.Http.HttpRouteCollection" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpRouteCollection" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.Services">
      <summary>이 인스턴스에 연결된 기본 서비스의 컨테이너를 가져옵니다.</summary>
      <returns>이 인스턴스에 대한 기본 서비스가 포함된 <see cref="T:System.Web.Http.Controllers.ServicesContainer" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpConfiguration.VirtualPathRoot">
      <summary>루트 가상 경로를 가져옵니다.</summary>
      <returns>루트 가상 경로입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpConfigurationExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" /> 클래스에 대한 확장 메서드가 포함되어 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.BindParameter(System.Web.Http.HttpConfiguration,System.Type,System.Web.Http.ModelBinding.IModelBinder)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>응용 프로그램에 대해 특성이 정의된 경로를 매핑합니다.</summary>
      <param name="configuration">서버 구성입니다.</param>
      <param name="directRouteProvider">경로의 검색 및 구성에 사용할 <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>응용 프로그램에 대해 특성이 정의된 경로를 매핑합니다.</summary>
      <param name="configuration">서버 구성입니다.</param>
      <param name="constraintResolver">제약 조건 확인자입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.MapHttpAttributeRoutes(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IInlineConstraintResolver,System.Web.Http.Routing.IDirectRouteProvider)">
      <summary>응용 프로그램에 대해 특성이 정의된 경로를 매핑합니다.</summary>
      <param name="configuration">서버 구성입니다.</param>
      <param name="constraintResolver">인라인 제약 조건을 확인하는 데 사용할 <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" />입니다.</param>
      <param name="directRouteProvider">경로의 검색 및 구성에 사용할 <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpConfigurationExtensions.SuppressHostPrincipal(System.Web.Http.HttpConfiguration)"></member>
    <member name="T:System.Web.Http.HttpDeleteAttribute">
      <summary>동작에서 DELETE HTTP 메서드를 지원하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpDeleteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpDeleteAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpDeleteAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpError">
      <summary>오류 정보를 저장할 수 있는 직렬화 가능한 컨테이너를 정의합니다. 이 정보는 키/값 쌍으로 저장됩니다. 표준 오류 정보를 조회하는 사전 키는 <see cref="T:System.Web.Http.HttpErrorKeys" /> 유형에서 사용할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Exception,System.Boolean)">
      <summary>
        <paramref name="exception" />에 대한 <see cref="T:System.Web.Http.HttpError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">오류 정보에 사용할 예외입니다.</param>
      <param name="includeErrorDetail">이 오류에 예외 정보를 포함하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.String)">
      <summary>오류 메시지 <paramref name="message" />를 포함하는 <see cref="T:System.Web.Http.HttpError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">이 인스턴스와 연관시킬 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean)">
      <summary>
        <paramref name="modelState" />에 대한 <see cref="T:System.Web.Http.HttpError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelState">오류 정보에 사용할 잘못된 모델 상태입니다.</param>
      <param name="includeErrorDetail">이 오류에 예외 메시지를 포함하려면 true이고, 그렇지 않으면 false입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionMessage">
      <summary>사용 가능한 경우 <see cref="T:System.Exception" /> 메시지를 가져오거나 설정합니다.</summary>
      <returns>사용 가능한 경우 <see cref="T:System.Exception" /> 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ExceptionType">
      <summary>사용 가능한 경우 <see cref="T:System.Exception" /> 형식을 가져오거나 설정합니다.</summary>
      <returns>사용 가능한 경우 <see cref="T:System.Exception" /> 유형입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.GetPropertyValue``1(System.String)">
      <summary>이 오류 인스턴스에서 특정 속성 값을 가져옵니다.</summary>
      <returns>이 오류 인스턴스의 특정 속성 값입니다.</returns>
      <param name="key">오류 속성 이름입니다.</param>
      <typeparam name="TValue">속성의 형식입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.HttpError.InnerException">
      <summary>사용 가능한 경우 이 인스턴스와 연관된 내부 <see cref="T:System.Exception" />을 가져옵니다.</summary>
      <returns>사용 가능한 경우 이 인스턴스와 연관된 내부 <see cref="T:System.Exception" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.Message">
      <summary>오류의 원인을 설명하는 사용자에게 표시되는 고급 메시지를 가져오거나 설정합니다. 이 필드로 전달되는 정보는 <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />에 상관없이 통신 중에 공개적으로 전달되는 것으로 간주됩니다. 따라서 서버 또는 응용 프로그램에 대한 중요한 정보를 공개하지 않도록 주의해야 합니다.</summary>
      <returns>사용자에게 표시되는 고급 메시지로, 오류의 원인을 설명합니다. 이 필드로 전달되는 정보는 <see cref="T:System.Web.Http.IncludeErrorDetailPolicy" />에 상관없이 통신 중에 공개적으로 전달되는 것으로 간주됩니다. 따라서 서버 또는 응용 프로그램에 대한 중요한 정보를 공개하지 않도록 주의해야 합니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.MessageDetail">
      <summary>개발자가 실패 원인을 정확하게 이해할 수 있도록 하는 오류에 대한 세부 설명을 가져오거나 설정합니다.</summary>
      <returns>개발자가 실패 원인을 정확하게 이해할 수 있도록 하는 오류에 대한 세부 설명입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.ModelState">
      <summary>모델 바인딩 중에 발생하는 오류 정보가 포함된 <see cref="P:System.Web.Http.HttpError.ModelState" />를 가져옵니다.</summary>
      <returns>모델 바인딩 중에 발생하는 오류 정보가 포함된 <see cref="P:System.Web.Http.HttpError.ModelState" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpError.StackTrace">
      <summary>사용 가능한 경우 이 인스턴스와 연관된 스택 추적 정보를 가져오거나 설정합니다.</summary>
      <returns>사용 가능한 경우 이 인스턴스와 연관된 스택 추적 정보입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#GetSchema">
      <summary>이 메서드는 예약되어 있으므로 사용하면 안 됩니다.</summary>
      <returns>항상 null을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#ReadXml(System.Xml.XmlReader)">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> 인스턴스를 해당 XML 표현에서 생성합니다.</summary>
      <param name="reader">개체가 역직렬화되는 XmlReader 스트림입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpError.System#Xml#Serialization#IXmlSerializable#WriteXml(System.Xml.XmlWriter)">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> 인스턴스를 해당 XML 표현으로 변환합니다.</summary>
      <param name="writer">개체가 직렬화되는 XmlWriter 스트림입니다.</param>
    </member>
    <member name="T:System.Web.Http.HttpErrorKeys">
      <summary>
        <see cref="T:System.Web.Http.HttpError" /> 사전에 저장된 오류 정보를 조회하는 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ErrorCodeKey">
      <summary> ErrorCode 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionMessageKey">
      <summary> ExceptionMessage 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ExceptionTypeKey">
      <summary> ExceptionType 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.InnerExceptionKey">
      <summary> InnerException 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageDetailKey">
      <summary> MessageDetail 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageKey">
      <summary> Message 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.MessageLanguageKey">
      <summary> MessageLanguage 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.ModelStateKey">
      <summary> ModelState 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.HttpErrorKeys.StackTraceKey">
      <summary> StackTrace 키를 제공합니다. </summary>
    </member>
    <member name="T:System.Web.Http.HttpGetAttribute">
      <summary>동작에서 GET HTTP 메서드를 지원하도록 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpGetAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpGetAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpGetAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpHeadAttribute">
      <summary> 동작에서 HEAD HTTP 메서드를 지원하도록 지정합니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpHeadAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpHeadAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpHeadAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpOptionsAttribute">
      <summary>HTTP OPTIONS 요청만 처리하도록 HTTP 메서드를 제한하는 데 사용되는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpOptionsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpOptionsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpOptionsAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPatchAttribute">
      <summary> 동작에서 PATCH HTTP 메서드를 지원하도록 지정합니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPatchAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPatchAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPatchAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPostAttribute">
      <summary>동작에서 POST HTTP 메서드를 지원하도록 지정합니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpPostAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPostAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPostAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpPutAttribute">
      <summary>HTTP PUT 요청만 처리하도록 HTTP 메서드를 제한하는 데 사용되는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpPutAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpPutAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.HttpPutAttribute.HttpMethods">
      <summary>이 특성에 해당하는 HTTP 메서드를 가져옵니다.</summary>
      <returns>이 특성에 해당하는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpResponseException">
      <summary> 지정된 <see cref="T:System.Net.Http.HttpResponseMessage" />가 클라이언트로 반환될 수 있도록 하는 예외입니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.HttpResponseException" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="response">클라이언트로 반환될 HTTP 응답입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpResponseException.#ctor(System.Net.HttpStatusCode)">
      <summary>
        <see cref="T:System.Web.Http.HttpResponseException" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="statusCode">응답의 상태 코드입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpResponseException.Response">
      <summary>클라이언트로 반환될 HTTP 응답을 가져옵니다.</summary>
      <returns>HTTP 응답을 나타내는 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollection">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스의 컬렉션입니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="virtualPathRoot">가상 경로 루트입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Add(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>컬렉션에 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 추가합니다.</summary>
      <param name="name">경로의 이름입니다.</param>
      <param name="route">컬렉션에 추가할 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Contains(System.Web.Http.Routing.IHttpRoute)">
      <summary>컬렉션에 특정 <see cref="T:System.Web.Http.Routing.IHttpRoute" />가 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>컬렉션에 <see cref="T:System.Web.Http.Routing.IHttpRoute" />가 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">컬렉션에서 찾을 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ContainsKey(System.String)">
      <summary>지정된 키가 있는 요소가 컬렉션에 포함되어 있는지 여부를 확인합니다.</summary>
      <returns>컬렉션에 키가 있는 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">컬렉션에서 찾을 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.Routing.IHttpRoute}[],System.Int32)">
      <summary>특정 배열 인덱스에서 시작하여 컬렉션의 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사한 요소의 대상인 배열입니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CopyTo(System.Web.Http.Routing.IHttpRoute[],System.Int32)">
      <summary>특정 배열 인덱스에서 시작하여 경로 이름 및 컬렉션의 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 배열에 복사합니다.</summary>
      <param name="array">컬렉션에서 복사한 요소의 대상인 배열입니다.</param>
      <param name="arrayIndex">
        <paramref name="array" />에서 복사가 시작되는 인덱스이며 0부터 시작합니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Count">
      <summary>컬렉션에 있는 항목 수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 항목 수입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스입니다.</returns>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 매개 변수가 포함되어 있는 개체입니다.</param>
      <param name="constraints">경로 제약 조건이 포함되어 있는 개체입니다.</param>
      <param name="dataTokens">경로 데이터 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스입니다.</returns>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 매개 변수가 포함되어 있는 개체입니다.</param>
      <param name="constraints">경로 제약 조건이 포함되어 있는 개체입니다.</param>
      <param name="dataTokens">경로 데이터 토큰입니다.</param>
      <param name="handler">경로의 메시지 처리기입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Object,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 만듭니다.</summary>
      <returns>새 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스입니다.</returns>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 매개 변수가 포함되어 있는 개체입니다.</param>
      <param name="constraints">경로 제약 조건이 포함되어 있는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose">
      <summary>관리되지 않는 리소스 확보, 해제, 재설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Dispose(System.Boolean)">
      <summary>개체에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리된 리소스와 관리되지 않은 리소스를 모두 해제하려면 true이고, 관리되지 않은 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetEnumerator">
      <summary>컬렉션 전체를 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.Generic.IEnumerator`1" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetRouteData(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 HTTP 요청에 대한 경로 데이터를 가져옵니다.</summary>
      <returns>경로 데이터를 나타내는 <see cref="T:System.Web.Http.Routing.IHttpRouteData" /> 인스턴스입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>가상 경로를 가져옵니다.</summary>
      <returns>가상 경로를 나타내는 <see cref="T:System.Web.Http.Routing.IHttpVirtualPathData" /> 인스턴스입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="name">경로 이름입니다.</param>
      <param name="values">경로 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Insert(System.Int32,System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>컬렉션에 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 <paramref name="value" />을 삽입해야 합니다.</param>
      <param name="name">경로 이름입니다.</param>
      <param name="value">삽입할 <see cref="T:System.Web.Http.Routing.IHttpRoute" />입니다.값은 null일 수 없습니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.Int32)">
      <summary>지정된 인덱스에 있는 요소를 가져오거나 설정합니다.</summary>
      <returns>지정된 인덱스에 있는 <see cref="T:System.Web.Http.Routing.IHttpRoute" />입니다.</returns>
      <param name="index">인덱스입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.Item(System.String)">
      <summary>지정된 경로 이름을 사용하여 요소를 가져오거나 설정합니다.</summary>
      <returns>지정된 인덱스에 있는 <see cref="T:System.Web.Http.Routing.IHttpRoute" />입니다.</returns>
      <param name="name">경로 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.OnGetEnumerator">
      <summary>컬렉션에 대한 열거자를 가져오기 위해 내부적으로 호출됩니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.Remove(System.String)">
      <summary>컬렉션에서 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스를 제거합니다.</summary>
      <returns>요소가 제거되었으면 true이고, 그렇지 않으면 false입니다.이 메서드는 컬렉션에 <paramref name="name" />이 없는 경우에도 false를 반환합니다.</returns>
      <param name="name">제거할 경로의 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Add(System.Web.Http.Routing.IHttpRoute)">
      <summary>컬렉션에 항목을 추가합니다.</summary>
      <param name="route">컬렉션에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#Generic#ICollection{T}#Remove(System.Web.Http.Routing.IHttpRoute)">
      <summary>컬렉션에서 맨 처음 발견되는 특정 개체를 제거합니다.</summary>
      <returns>컬렉션에서 <paramref name="route" />를 제거한 경우 true이고, 그렇지 않으면 false입니다.이 메서드는 원래 컬렉션에 <paramref name="key" />가 없는 경우에도 false를 반환합니다.</returns>
      <param name="route">컬렉션에서 제거할 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체를 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션을 반복하는 데 사용할 수 있는 <see cref="T:System.Collections.IEnumerator" /> 개체입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.TryGetValue(System.String,System.Web.Http.Routing.IHttpRoute@)">
      <summary>지정된 경로 이름을 사용하여 <see cref="T:System.Web.Http.Routing.IHttpRoute" />를 가져옵니다.</summary>
      <returns>컬렉션에 지정된 이름의 요소가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="name">경로 이름입니다.</param>
      <param name="route">이 메서드가 반환되면 경로 이름이 있는 경우 <see cref="T:System.Web.Http.Routing.IHttpRoute" /> 인스턴스가 포함되어 있고, 그렇지 않으면 null이 포함되어 있습니다.이 매개 변수는 초기화되지 않은 상태로 전달됩니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollection.ValidateConstraint(System.String,System.String,System.Object)">
      <summary>제약 조건이 <see cref="M:System.Web.Http.HttpRouteCollection.CreateRoute(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Collections.Generic.IDictionary{System.String,System.Object},System.Net.Http.HttpMessageHandler)" /> 메서드에 대한 호출에서 만든 <see cref="T:System.Web.Http.Routing.IHttpRoute" />에 적합한지 검사합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="name">제약 조건 이름입니다.</param>
      <param name="constraint">제약 조건 개체입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpRouteCollection.VirtualPathRoot">
      <summary>가상 경로 루트를 가져옵니다.</summary>
      <returns>가상 경로 루트입니다.</returns>
    </member>
    <member name="T:System.Web.Http.HttpRouteCollectionExtensions">
      <summary>
        <see cref="T:System.Web.Http.HttpRouteCollection" />에 대한 확장 메서드입니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>지정된 경로를 무시합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" />을 반환합니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="routeName">무시할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.IgnoreRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>지정된 경로를 무시합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" />을 반환합니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="routeName">무시할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="constraints">경로 템플릿에 대한 값을 지정하는 식의 집합입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpBatchRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Web.Http.Batch.HttpBatchHandler)">
      <summary> HTTP 일괄 처리 요청을 처리하기 위해 지정된 경로를 매핑합니다. </summary>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="routeName">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="batchHandler">일괄 처리 요청을 처리하기 위한 <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String)">
      <summary>지정된 경로 템플릿을 매핑합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로 값을 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로 값과 제약 조건을 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
      <param name="constraints">
        <paramref name="routeTemplate" />에 대한 값을 지정하는 식의 집합입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpRouteCollectionExtensions.MapHttpRoute(System.Web.Http.HttpRouteCollection,System.String,System.String,System.Object,System.Object,System.Net.Http.HttpMessageHandler)">
      <summary>지정된 경로 템플릿을 매핑하고 기본 경로 값, 제약 조건 및 끝점 메시지 처리기를 설정합니다.</summary>
      <returns>매핑된 경로에 대한 참조입니다.</returns>
      <param name="routes">응용 프로그램에 대한 경로의 컬렉션입니다.</param>
      <param name="name">매핑할 경로의 이름입니다.</param>
      <param name="routeTemplate">경로의 경로 템플릿입니다.</param>
      <param name="defaults">기본 경로 값을 포함하는 개체입니다.</param>
      <param name="constraints">
        <paramref name="routeTemplate" />에 대한 값을 지정하는 식의 집합입니다.</param>
      <param name="handler">요청이 발송될 처리기입니다.</param>
    </member>
    <member name="T:System.Web.Http.HttpServer">
      <summary> 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />를 발송하고, 그 결과로 <see cref="T:System.Net.Http.HttpResponseMessage" />를 만드는 <see cref="T:System.Net.Http.HttpMessageHandler" /> 구현을 정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor">
      <summary>기본 구성 및 발송자를 사용하여 <see cref="T:System.Web.Http.HttpServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Net.Http.HttpMessageHandler)">
      <summary> 지정된 발송자를 사용하여 <see cref="T:System.Web.Http.HttpServer" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="dispatcher">들어오는 요청을 처리할 HTTP 발송자입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>지정된 구성을 사용하여 <see cref="T:System.Web.Http.HttpServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">이 인스턴스를 구성하는 데 사용된 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary>지정된 구성 및 발송자를 사용하여 <see cref="T:System.Web.Http.HttpServer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">이 인스턴스를 구성하는 데 사용된 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</param>
      <param name="dispatcher">들어오는 요청을 처리할 HTTP 발송자입니다.</param>
    </member>
    <member name="P:System.Web.Http.HttpServer.Configuration">
      <summary>이 인스턴스를 구성하는 데 사용된 <see cref="T:System.Web.Http.HttpConfiguration" />을 가져옵니다.</summary>
      <returns>이 인스턴스를 구성하는 데 사용된 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.HttpServer.Dispatcher">
      <summary>들어오는 요청을 처리하는 HTTP 발송자를 가져옵니다.</summary>
      <returns>들어오는 요청을 처리하는 HTTP 발송자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.HttpServer.Dispose(System.Boolean)">
      <summary>개체에서 사용하는 관리되지 않는 리소스를 해제하고, 관리되는 리소스를 선택적으로 해제합니다.</summary>
      <param name="disposing">관리된 리소스와 관리되지 않은 리소스를 모두 해제하려면 true이고, 관리되지 않은 리소스만 해제하려면 false입니다.</param>
    </member>
    <member name="M:System.Web.Http.HttpServer.Initialize">
      <summary>작업용 서버를 준비합니다.</summary>
    </member>
    <member name="M:System.Web.Http.HttpServer.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />를 발송합니다.</summary>
      <returns> 비동기 작업을 나타내는 작업입니다.</returns>
      <param name="request">발송할 요청입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.IHttpActionResult">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" />를 비동기적으로 만드는 명령을 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.IHttpActionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" />를 비동기적으로 만듭니다.</summary>
      <returns>작업 완료 시 <see cref="T:System.Net.Http.HttpResponseMessage" />가 포함된 작업입니다.</returns>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.IncludeErrorDetailPolicy">
      <summary>예외 메시지, 스택 추적 등의 오류 정보를 오류 메시지에 포함할지를 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Always">
      <summary>항상 오류 정보를 포함합니다.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Default">
      <summary>호스트 환경의 기본 동작을 사용합니다.ASP.NET 호스팅의 경우 Web.config 파일의 customErrors 요소에서 값을 사용합니다.자체 호스팅의 경우에는 <see cref="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly" /> 값을 사용합니다.</summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.LocalOnly">
      <summary>로컬 요청에 응답할 때에만 오류 정보를 포함합니다. </summary>
    </member>
    <member name="F:System.Web.Http.IncludeErrorDetailPolicy.Never">
      <summary>오류 정보를 포함하지 않습니다. </summary>
    </member>
    <member name="T:System.Web.Http.NonActionAttribute">
      <summary>컨트롤러 메서드가 동작 메서드가 아님을 표시하는 데 사용되는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.NonActionAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.NonActionAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.OverrideActionFiltersAttribute">
      <summary>상위 수준에 정의된 작업 필터를 재정의하는 필터 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideActionFiltersAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OverrideActionFiltersAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.AllowMultiple">
      <summary>작업 필터에서 여러 특성을 허용하는지 여부를 나타내는 값을 가져옵니다.</summary>
      <returns>작업 필터에서 여러 특성을 허용하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideActionFiltersAttribute.FiltersToOverride">
      <summary>재정의할 필터 유형을 가져옵니다.</summary>
      <returns>재정의할 필터 유형입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideAuthenticationAttribute">
      <summary>상위 수준에 정의된 인증 필터를 재정의하는 필터 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthenticationAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideAuthenticationAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.OverrideAuthorizationAttribute">
      <summary>상위 수준에 정의된 권한 부여 필터를 재정의하는 필터 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideAuthorizationAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.OverrideAuthorizationAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.AllowMultiple">
      <summary>단일 프로그램 요소에 대해 지정한 특성의 인스턴스를 둘 이상 지정할 수 있는지를 나타내는 부울 값을 가져오거나 설정합니다.</summary>
      <returns>인스턴스를 둘 이상 지정할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.OverrideAuthorizationAttribute.FiltersToOverride">
      <summary>특성을 재정의할 필터 유형을 가져옵니다.</summary>
      <returns>특성을 재정의할 필터 유형입니다.</returns>
    </member>
    <member name="T:System.Web.Http.OverrideExceptionFiltersAttribute">
      <summary>상위 수준에 정의된 예외 필터를 재정의하는 필터 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.OverrideExceptionFiltersAttribute.#ctor"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.AllowMultiple"></member>
    <member name="P:System.Web.Http.OverrideExceptionFiltersAttribute.FiltersToOverride"></member>
    <member name="T:System.Web.Http.ParameterBindingAttribute">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />을 생성하는 매개 변수 또는 형식의 특성입니다.이 특성이 형식 선언에 있으면 해당 특성이 그 형식의 모든 동작 매개 변수에 있는 것과 같습니다.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ParameterBindingAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ParameterBindingAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>매개 변수 바인딩을 가져옵니다.</summary>
      <returns>매개 변수 바인딩입니다.</returns>
      <param name="parameter">매개 변수 설명입니다.</param>
    </member>
    <member name="T:System.Web.Http.RouteAttribute">
      <summary>경로를 통해 직접 사용하도록 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.RouteAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.RouteAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="template">일치 기준으로 사용할 URI 패턴을 설명하는 경로 템플릿입니다.</param>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Name">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.RouteAttribute.Order">
      <returns>
        <see cref="T:System.Int32" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.RouteAttribute.System#Web#Http#Routing#IDirectRouteFactory#CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)"></member>
    <member name="P:System.Web.Http.RouteAttribute.Template">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.RouteParameter">
      <summary>
        <see cref="T:System.Web.Http.RouteParameter" /> 클래스를 사용해 경로 매개 변수(<see cref="M:IHttpRoute.RouteTemplate" /> 세그먼트 내에 있는 리터럴 및 자리 표시자)에 대한 속성을 나타낼 수 있습니다.예를 들면 이 클래스를 사용해 경로 매개 변수가 선택 사항임을 나타낼 수 있습니다.</summary>
    </member>
    <member name="F:System.Web.Http.RouteParameter.Optional">
      <summary>선택적 매개 변수입니다.</summary>
    </member>
    <member name="M:System.Web.Http.RouteParameter.ToString">
      <summary>이 인스턴스를 나타내는 <see cref="T:System.String" />을 반환합니다.</summary>
      <returns>이 인스턴스를 나타내는 <see cref="T:System.String" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.RoutePrefixAttribute">
      <summary> 컨트롤러 내의 모든 작업에 적용되는 경로 접두사를 사용하여 컨트롤러에 주석을 지정합니다. </summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.RoutePrefixAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.RoutePrefixAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.RoutePrefixAttribute" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="prefix">컨트롤러의 경로 접두사입니다.</param>
    </member>
    <member name="P:System.Web.Http.RoutePrefixAttribute.Prefix">
      <summary> 경로 접두사를 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.ServicesExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> 개체에서 가져온 서비스의 형식이 안전한 접근자를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionInvoker(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetActionValueBinder(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetApiExplorer(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Description.IApiExplorer" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Description.IApiExplorer" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetAssembliesResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetBodyModelValidator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Validation.IBodyModelValidator" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.IBodyModelValidator" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetContentNegotiator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetDocumentationProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Description.IDocumentationProvider" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Description.IDocumentationProvider" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>있는 경우 처리되지 않은 상태의 등록된 예외 처리기를 반환합니다.</summary>
      <returns>있는 경우 처리되지 않은 상태의 등록된 예외 처리기이며, 그렇지 않으면 null입니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetExceptionLoggers(System.Web.Http.Controllers.ServicesContainer)">
      <summary>처리되지 않은 상태의 등록된 예외 로거 컬렉션을 반환합니다.</summary>
      <returns>처리되지 않은 상태의 등록된 예외 로거 컬렉션입니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetFilterProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Filters.IFilterProvider" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.IFilterProvider" /> 개체의 컬렉션을 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHostBufferPolicySelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerActivator(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /> 인스턴스를 반환하거나, 등록된 인스턴스가 없으면 null을 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerSelector(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetHttpControllerTypeResolver(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelBinderProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> 개체의 컬렉션을 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelMetadataProvider(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetModelValidatorProviders(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> 개체의 컬렉션을 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceManager(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceManager" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Tracing.ITraceManager" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetTraceWriter(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> 서비스를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" /> 인스턴스를 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ServicesExtensions.GetValueProviderFactories(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 개체의 컬렉션을 반환합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="T:System.Web.Http.SingleResult">
      <summary>엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable" />을 나타냅니다.System.Web.Http.OData 또는 System.Web.OData 네임스페이스의 [EnableQuery]를 함께 사용합니다.</summary>
    </member>
    <member name="M:System.Web.Http.SingleResult.#ctor(System.Linq.IQueryable)">
      <summary>
        <see cref="T:System.Web.Http.SingleResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="queryable">엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.SingleResult.Create``1(System.Linq.IQueryable{``0})">
      <summary>
        <see cref="T:System.Linq.IQueryable`1" />에서 <see cref="T:System.Web.Http.SingleResult`1" />를 만듭니다.<paramref name="T" /> 형식을 명시적으로 지정하지 않은 채 <see cref="T:System.Web.Http.SingleResult`1" /> 개체를 인스턴스화하는 도우미 메서드입니다.</summary>
      <returns>만든 <see cref="T:System.Web.Http.SingleResult`1" />입니다.</returns>
      <param name="queryable">엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
      <typeparam name="T">데이터 소스의 데이터 형식입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.SingleResult.Queryable">
      <summary>엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable" />입니다.</summary>
    </member>
    <member name="T:System.Web.Http.SingleResult`1">
      <summary>엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable`1" />을 나타냅니다.System.Web.Http.OData 또는 System.Web.OData 네임스페이스의 [EnableQuery]를 함께 사용합니다.</summary>
      <typeparam name="T">데이터 소스의 데이터 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.SingleResult`1.#ctor(System.Linq.IQueryable{`0})">
      <summary>
        <see cref="T:System.Web.Http.SingleResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="queryable">엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.SingleResult`1.Queryable">
      <summary>엔터티가 없거나 하나가 포함된 <see cref="T:System.Linq.IQueryable`1" />입니다.</summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchExecutionOrder">
      <summary> 일괄 처리 요청을 위한 실행 순서를 정의합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.NonSequential">
      <summary> 일괄 처리 요청을 비순차적으로 실행합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Batch.BatchExecutionOrder.Sequential">
      <summary> 일괄 처리 요청을 순차적으로 실행합니다. </summary>
    </member>
    <member name="T:System.Web.Http.Batch.BatchHttpRequestMessageExtensions">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" /> 클래스에 대한 확장 메서드를 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Batch.BatchHttpRequestMessageExtensions.CopyBatchRequestProperties(System.Net.Http.HttpRequestMessage,System.Net.Http.HttpRequestMessage)">
      <summary> 다른 <see cref="T:System.Net.Http.HttpRequestMessage" />에서 속성을 복사합니다. </summary>
      <param name="subRequest">하위 요청입니다.</param>
      <param name="batchRequest">복사할 속성이 포함된 일괄 처리 요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.Batch.DefaultHttpBatchHandler">
      <summary>HTTP 요청/응답 메시지를 MIME multipart로 인코딩하는 <see cref="T:System.Web.Http.Batch.HttpBatchHandler" />의 기본 구현을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>
        <see cref="T:System.Web.Http.Batch.DefaultHttpBatchHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="httpServer">개별 일괄 처리 요청을 처리하는 <see cref="T:System.Web.Http.HttpServer" />입니다.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.CreateResponseMessageAsync(System.Collections.Generic.IList{System.Net.Http.HttpResponseMessage},System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>일괄 처리 응답 메시지를 만듭니다.</summary>
      <returns>일괄 처리 응답 메시지입니다.</returns>
      <param name="responses">일괄 처리 요청을 위한 응답입니다.</param>
      <param name="request">모든 일괄 처리 요청이 포함된 원래 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecuteRequestMessagesAsync(System.Collections.Generic.IEnumerable{System.Net.Http.HttpRequestMessage},System.Threading.CancellationToken)">
      <summary>일괄 처리 요청 메시지를 실행합니다.</summary>
      <returns>일괄 처리 요청에 대한 <see cref="T:System.Net.Http.HttpResponseMessage" />의 컬렉션입니다.</returns>
      <param name="requests">일괄 처리 요청 메시지의 컬렉션입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.ExecutionOrder">
      <summary>일괄 처리 요청에 대한 실행 순서를 가져오거나 설정합니다.기본 실행 순서는 순차적입니다.</summary>
      <returns>일괄 처리 요청을 위한 실행 순서입니다.기본 실행 순서는 순차적입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ParseBatchRequestsAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>들어오는 일괄 처리 요청을 요청 메시지 컬렉션으로 변환합니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />의 컬렉션입니다.</returns>
      <param name="request">일괄 처리 요청 메시지가 포함된 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>일괄 처리 요청을 처리합니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="request">일괄 처리 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Batch.DefaultHttpBatchHandler.SupportedContentTypes">
      <summary>일괄 처리 요청에서 지원되는 콘텐츠 형식을 가져옵니다.</summary>
      <returns>일괄 처리 요청에서 지원되는 콘텐츠 형식입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.DefaultHttpBatchHandler.ValidateRequest(System.Net.Http.HttpRequestMessage)">
      <summary>일괄 처리 요청 메시지가 포함된 들어오는 요청의 유효성을 검사합니다.</summary>
      <param name="request">일괄 처리 요청 메시지가 포함된 요청입니다.</param>
    </member>
    <member name="T:System.Web.Http.Batch.HttpBatchHandler">
      <summary>HTTP 일괄 처리 요청을 처리하는 추상화를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.#ctor(System.Web.Http.HttpServer)">
      <summary>
        <see cref="T:System.Web.Http.Batch.HttpBatchHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="httpServer">개별 일괄 처리 요청을 처리하는 <see cref="T:System.Web.Http.HttpServer" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.Batch.HttpBatchHandler.Invoker">
      <summary>
        <see cref="T:System.Web.Http.HttpServer" />로 일괄 처리 요청을 보내는 호출자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpServer" />로 일괄 처리 요청을 보내는 호출자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.ProcessBatchAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>들어오는 일괄 처리 요청을 단일 <see cref="T:System.Net.Http.HttpRequestMessage" />로 처리합니다.</summary>
      <returns>일괄 처리 응답입니다.</returns>
      <param name="request">일괄 처리 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Batch.HttpBatchHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>일괄 처리 처리기를 비동기적으로 보냅니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="request">보내기 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionInvoker">
      <summary>컨트롤러의 동작 메서드를 호출합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>지정된 컨트롤러 컨텍스트를 사용하여 지정된 작업을 비동기적으로 호출합니다.</summary>
      <returns>호출된 작업입니다.</returns>
      <param name="actionContext">컨트롤러 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ApiControllerActionSelector">
      <summary>리플렉션 기반 작업 선택기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />에 대한 동작 매핑을 가져옵니다.</summary>
      <returns>동작 매핑입니다.</returns>
      <param name="controllerDescriptor">컨트롤러를 설명하는 정보입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ApiControllerActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ApiControllerActionSelector" />에 대한 동작을 선택합니다.</summary>
      <returns>선택한 동작입니다.</returns>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ControllerServices">
      <summary> 컨트롤러에 지정될 수 있는 서비스의 컨테이너를 나타냅니다.  여기에서는 해당 부모 <see cref="T:System.Web.Http.Controllers.ServicesContainer" />의 서비스를 그림자 처리합니다. 컨트롤러를 사용해 여기에 서비스를 설정하거나, 더 많은 글로벌 서비스 집합에 표시할 수 있습니다.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.#ctor(System.Web.Http.Controllers.ServicesContainer)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ControllerServices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="parent">부모 서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ClearSingle(System.Type)">
      <summary>기본 서비스에서 단일 인스턴스 서비스를 제거합니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetService(System.Type)">
      <summary>지정된 유형의 서비스를 가져옵니다.</summary>
      <returns>서비스의 첫 번째 인스턴스이거나, 서비스를 찾을 수 없는 경우 null입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServiceInstances(System.Type)">
      <summary>지정된 서비스 유형의 서비스 개체 목록을 가져오고 서비스 유형의 유효성을 검사합니다.</summary>
      <returns>지정된 유형의 서비스 개체 목록입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.GetServices(System.Type)">
      <summary>지정된 서비스 유형의 서비스 개체 목록을 가져옵니다.</summary>
      <returns>지정된 유형의 서비스 개체 목록이거나, 이 서비스를 찾을 수 없는 경우 빈 목록입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.IsSingleService(System.Type)">
      <summary>서비스 유형이 단일 서비스인지를 쿼리합니다.</summary>
      <returns>서비스 유형에 최대 하나의 인스턴스가 있으면 true이고, 이 서비스 유형이 여러 인스턴스를 지원하면 false입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ControllerServices.ReplaceSingle(System.Type,System.Object)">
      <summary>단일 인스턴스 서비스 개체를 바꿉니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">이전 인스턴스를 바꾸는 서비스 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionBinding">
      <summary>바인딩이 발생하지만 실제로 바인딩하지는 않는 *방식*에 대해 설명합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Controllers.HttpParameterBinding[])">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionDescriptor">이 바인딩 대상 작업에 대한 후방 포인터입니다.  </param>
      <param name="bindings">각 매개 변수에 대한 동기 바인딩입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ActionDescriptor">
      <summary>이 바인딩 대상 작업에 대한 후방 포인터를 가져오거나 설정합니다.  </summary>
      <returns>이 바인딩 대상 작업에 대한 후방 포인터입니다.  </returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionBinding.ExecuteBindingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>지정한 요청 컨텍스트에 대한 바인딩을 비동기적으로 실행합니다.</summary>
      <returns>바인딩이 완료되었을 때 신호를 받는 작업입니다. </returns>
      <param name="actionContext">바인딩할 작업 컨텍스트입니다. 여기에는 채워질 매개 변수 사전이 포함됩니다.</param>
      <param name="cancellationToken">바인딩 작업을 취소하는 취소 토큰입니다. 또는 바인더가 매개 변수를 이 토큰에 바인딩할 수도 있습니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionBinding.ParameterBindings">
      <summary>각 매개 변수에 대한 동기 바인딩을 가져오거나 설정합니다. </summary>
      <returns>각 매개 변수에 대한 동기 바인딩입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContext">
      <summary>작업 실행에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContext.#ctor(System.Web.Http.Controllers.HttpControllerContext,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionArguments">
      <summary>작업 인수의 목록을 가져옵니다.</summary>
      <returns>작업 인수의 목록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ActionDescriptor">
      <summary>작업 컨텍스트의 작업 설명자를 가져오거나 설정합니다.</summary>
      <returns>작업 설명자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ControllerContext">
      <summary>컨트롤러 컨텍스트를 가져오거나 설정합니다.</summary>
      <returns>컨트롤러 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.ModelState">
      <summary>컨텍스트의 모델 상태 사전을 가져옵니다.</summary>
      <returns>모델 상태 사전입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Request">
      <summary>작업 컨텍스트의 요청 메시지를 가져옵니다.</summary>
      <returns>작업 컨텍스트의 요청 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.RequestContext">
      <summary>현재 요청 컨텍스트를 가져옵니다.</summary>
      <returns>현재 요청 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionContext.Response">
      <summary>작업 컨텍스트의 응답 메시지를 가져오거나 설정합니다.</summary>
      <returns>작업 컨텍스트의 응답 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionContextExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionContext" />에 대한 확장 메서드를 포함합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.Bind(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetMetadataProvider(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidatorProviders(System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.GetValidators(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Metadata.ModelMetadata)"></member>
    <member name="M:System.Web.Http.Controllers.HttpActionContextExtensions.TryBindStrongModel``1(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.String,System.Web.Http.Metadata.ModelMetadataProvider,``0@)">
      <typeparam name="TModel"></typeparam>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpActionDescriptor">
      <summary>동작 메서드에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>작업의 컨트롤러를 설명하는 지정된 정보를 사용하여 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controllerDescriptor">작업의 컨트롤러를 설명하는 정보입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionBinding">
      <summary>동작을 설명하는 바인딩을 가져오거나 설정합니다.</summary>
      <returns>동작을 설명하는 바인딩입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ActionName">
      <summary>작업의 이름을 가져옵니다.</summary>
      <returns>작업 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Configuration">
      <summary>작업 구성을 가져오거나 설정합니다.</summary>
      <returns>작업 구성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ControllerDescriptor">
      <summary>작업의 컨트롤러를 설명하는 정보를 가져옵니다.</summary>
      <returns>작업의 컨트롤러를 설명하는 정보입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>설명된 작업을 실행하고 완료 시 작업의 반환 값을 포함하는 <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</summary>
      <returns>완료 시 작업의 반환 값을 포함하는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</returns>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="arguments">인수 목록입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1">
      <summary>작업 설명자와 연결된 사용자 지정 특성을 반환합니다.</summary>
      <returns>작업 설명자와 연결된 사용자 지정 특성입니다.</returns>
      <typeparam name="T">작업 설명자입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>동작에 대한 사용자 지정 특성을 가져옵니다.</summary>
      <returns>이 동작에 적용되는 사용자 지정 특성 컬렉션입니다.</returns>
      <param name="inherit">이 동작의 상속 체인을 검색하여 특성을 찾으려면 true이고, 그렇지 않으면 false입니다.</param>
      <typeparam name="T">검색할 특성 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilterPipeline">
      <summary>지정된 구성 및 작업에 대한 필터를 검색합니다.</summary>
      <returns>지정된 구성 및 작업에 대한 필터입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetFilters">
      <summary>작업 설명자에 대한 필터를 검색합니다.</summary>
      <returns>작업 설명자에 대한 필터입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpActionDescriptor.GetParameters">
      <summary>작업 설명자에 대한 매개 변수를 검색합니다.</summary>
      <returns>작업 설명자에 대한 매개 변수입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.Properties">
      <summary>이 인스턴스와 연관된 속성을 가져옵니다.</summary>
      <returns>이 인스턴스와 연관된 속성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ResultConverter">
      <summary>ExecuteAsync(HttpControllerContext, IDictionaryString, Object)"를 <see cref="T:System.Net.Http.HttpResponseMessage" />의 인스턴스로 호출한 결과를 올바르게 변환하기 위한 변환기를 가져옵니다.</summary>
      <returns>작업 결과 변환기입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.ReturnType">
      <summary>설명자의 반환 형식을 가져옵니다.</summary>
      <returns>설명자의 반환 형식입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpActionDescriptor.SupportedHttpMethods">
      <summary>설명자에 대해 지원되는 HTTP 메서드의 컬렉션을 가져옵니다.</summary>
      <returns>설명자에 대해 지원되는 HTTP 메서드의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerContext">
      <summary>단일 HTTP 작업에 대한 정보를 포함합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.Controllers.HttpRequestContext,System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Controllers.IHttpController)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="requestContext">요청 컨텍스트입니다.</param>
      <param name="request">HTTP 요청입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="controller">컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerContext.#ctor(System.Web.Http.HttpConfiguration,System.Web.Http.Routing.IHttpRouteData,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">구성입니다.</param>
      <param name="routeData">경로 데이터입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Configuration">
      <summary>구성을 가져오거나 설정합니다.</summary>
      <returns>구성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Controller">
      <summary>HTTP 컨트롤러를 가져오거나 설정합니다.</summary>
      <returns>HTTP 컨트롤러입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.ControllerDescriptor">
      <summary>컨트롤러 설명자를 가져오거나 설정합니다.</summary>
      <returns>컨트롤러 설명자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.Request">
      <summary>요청을 가져오거나 설정합니다.</summary>
      <returns>요청입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RequestContext">
      <summary>요청 컨텍스트를 가져오거나 설정합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerContext.RouteData">
      <summary>경로 데이터를 가져오거나 설정합니다.</summary>
      <returns>경로 데이터입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerDescriptor">
      <summary>HTTP 컨트롤러를 설명하는 정보를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.#ctor(System.Web.Http.HttpConfiguration,System.String,System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">구성입니다.</param>
      <param name="controllerName">컨트롤러 이름입니다.</param>
      <param name="controllerType">컨트롤러 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Configuration">
      <summary>컨트롤러에 연결된 구성을 가져오거나 설정합니다.</summary>
      <returns>컨트롤러에 연결된 구성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerName">
      <summary>컨트롤러의 이름을 가져오거나 설정합니다.</summary>
      <returns>컨트롤러의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.ControllerType">
      <summary>컨트롤러의 유형을 가져오거나 설정합니다.</summary>
      <returns>컨트롤러의 형식입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.CreateController(System.Net.Http.HttpRequestMessage)">
      <summary>지정한 <see cref="T:System.Net.Http.HttpRequestMessage" />의 컨트롤러 인스턴스를 만듭니다.</summary>
      <returns>만든 컨트롤러 인스턴스입니다.</returns>
      <param name="request">요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1">
      <summary>컨트롤러의 사용자 지정 특성의 컬렉션을 검색합니다.</summary>
      <returns>사용자 지정 특성 컬렉션입니다.</returns>
      <typeparam name="T">개체의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary> 이 설명자 컨트롤러의 &lt;typeparamref name="T" /&gt;에 할당할 수 있는 특성 컬렉션을 반환합니다. </summary>
      <returns>이 컨트롤러와 연관된 특성 컬렉션입니다.</returns>
      <param name="inherit">이 컨트롤러의 상속 체인을 검색하여 특성을 찾으려면 true이고, 그렇지 않으면 false입니다.</param>
      <typeparam name="T">특성 컬렉션을 필터링하는 데 사용됩니다. <see cref="T:System.Object" /> 값을 사용하여 모든 특성을 검색합니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerDescriptor.GetFilters">
      <summary>컨트롤러에 연결된 필터의 컬렉션을 반환합니다.</summary>
      <returns>컨트롤러에 연결된 필터의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerDescriptor.Properties">
      <summary>이 인스턴스와 연관된 속성을 가져옵니다.</summary>
      <returns>이 인스턴스와 연관된 속성입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpControllerSettings">
      <summary>HTTP 컨트롤러의 설정을 포함합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpControllerSettings.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpControllerSettings" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">인스턴스를 초기화하는 데 사용되는 구성 개체입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Formatters">
      <summary>컨트롤러에 대한 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 인스턴스 컬렉션을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 인스턴스의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.ParameterBindingRules">
      <summary>컨트롤러에 대한 매개 변수 바인딩 함수의 컬렉션을 가져옵니다.</summary>
      <returns>매개 변수 바인딩 함수의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpControllerSettings.Services">
      <summary>컨트롤러에 대한 서비스 인스턴스의 컬렉션을 가져옵니다.</summary>
      <returns>서비스 인스턴스의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterBinding">
      <summary> 매개 변수 바인딩 방식에 대해 설명합니다. 바인딩은 정적(설명자에만 따라야 함)이어야 하며 요청 간에 공유할 수 있습니다.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">매개 변수를 설명하는 <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.Descriptor">
      <summary>이 인스턴스를 초기화하는 데 사용된 <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> 인스턴스입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.ErrorMessage">
      <summary>바인딩이 잘못된 경우 바인딩 오류를 설명하는 오류 메시지가 표시됩니다.</summary>
      <returns>오류 메시지입니다. 바인딩에 성공하면 값이 null입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>지정된 요청에 대해 바인딩을 비동기적으로 실행합니다.</summary>
      <returns>비동기 작업을 나타내는 작업 개체입니다.</returns>
      <param name="metadataProvider">유효성 검사에 사용할 메타데이터 공급자입니다.</param>
      <param name="actionContext">바인딩할 작업 컨텍스트입니다. 작업 컨텍스트에는 매개 변수로 채울 매개 변수 사전이 포함되어 있습니다.</param>
      <param name="cancellationToken">바인딩 작업을 취소하는 취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.GetValue(System.Web.Http.Controllers.HttpActionContext)">
      <summary> 작업 컨텍스트의 인수 사전에서 매개 변수 값을 가져옵니다.</summary>
      <returns>지정된 작업 컨텍스트에서 이 매개 변수에 대한 값이거나, 매개 변수가 아직 설정되지 않은 경우 null입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.IsValid">
      <summary>바인딩에 성공했는지를 나타내는 값을 가져옵니다.</summary>
      <returns>바인딩에 성공했으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterBinding.SetValue(System.Web.Http.Controllers.HttpActionContext,System.Object)">
      <summary>작업 컨텍스트의 인수 사전에서 이 매개 변수 바인딩의 결과를 설정합니다.  </summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="value">매개 변수 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterBinding.WillReadBody">
      <summary>이 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" /> 인스턴스가 HTTP 메시지의 엔터티 본문을 읽는지 여부를 나타내는 값을 반환합니다.</summary>
      <returns>이 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />에서 엔터티 본문을 읽으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpParameterDescriptor">
      <summary>HTTP 매개 변수 설명자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ActionDescriptor">
      <summary>작업 설명자를 가져오거나 설정합니다.</summary>
      <returns>작업 설명자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Configuration">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />의 <see cref="T:System.Web.Http.HttpConfiguration" />을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />의 <see cref="T:System.Web.Http.HttpConfiguration" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.DefaultValue">
      <summary>매개 변수의 기본값을 가져옵니다.</summary>
      <returns>매개 변수의 기본값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpParameterDescriptor.GetCustomAttributes``1">
      <summary>매개 변수에서 사용자 지정 특성 컬렉션을 검색합니다.</summary>
      <returns>매개 변수의 사용자 지정 특성 컬렉션입니다.</returns>
      <typeparam name="T">사용자 지정 특성의 유형입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.IsOptional">
      <summary>매개 변수가 선택적인지를 나타내는 값을 가져옵니다.</summary>
      <returns>매개 변수가 선택적이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterBinderAttribute">
      <summary>매개 변수 바인딩 특성을 가져오거나 설정합니다.</summary>
      <returns>매개 변수 바인딩 특성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterName">
      <summary>매개 변수의 이름을 가져옵니다.</summary>
      <returns>매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.ParameterType">
      <summary>매개 변수의 유형을 가져옵니다.</summary>
      <returns>매개 변수의 유형입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Prefix">
      <summary>이 매개 변수의 접두사를 가져옵니다.</summary>
      <returns>이 매개 변수의 접두사입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpParameterDescriptor.Properties">
      <summary>이 매개 변수의 속성을 가져옵니다.</summary>
      <returns>이 매개 변수의 속성입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.HttpRequestContext">
      <summary>요청과 연관된 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.HttpRequestContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.ClientCertificate">
      <summary>클라이언트 인증서를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Cryptography.X509Certificates.X509Certificate2" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Configuration">
      <summary>구성을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.HttpConfiguration" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IncludeErrorDetail">
      <summary>예외 메시지, 스택 추적 등의 오류 정보를 이 요청에 대한 응답에 포함할지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.IsLocal">
      <summary>요청이 로컬 주소에서 시작되었는지 여부를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Principal">
      <summary>사용자를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Security.Principal.IPrincipal" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.RouteData">
      <summary>경로 데이터를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.IHttpRouteData" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.Url">
      <summary>다른 API에 대한 URL을 생성하는 데 사용되는 팩터리를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.HttpRequestContext.VirtualPathRoot">
      <summary>가상 경로 루트를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionHttpMethodProvider"></member>
    <member name="P:System.Web.Http.Controllers.IActionHttpMethodProvider.HttpMethods"></member>
    <member name="T:System.Web.Http.Controllers.IActionResultConverter">
      <summary> &lt;see cref="M:System.Web.Http.Controllers.HttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object})" /&gt;에서 반환한 작업의 결과를 가져와 <see cref="T:System.Net.Http.HttpResponseMessage" />의 인스턴스로 변환할 수 있는 변환 루틴에 대한 계약입니다. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>지정된 <see cref="T:System.Web.Http.Controllers.IActionResultConverter" /> 개체를 다른 개체로 변환합니다.</summary>
      <returns>변환된 개체입니다.</returns>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionResult">작업 결과입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IActionValueBinder">
      <summary>매개 변수 값과 연관된 작업 바인딩을 검색하는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpActionBinding" /> 개체입니다.</returns>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IControllerConfiguration">
      <summary> 컨트롤러가 이 인스턴스에 있는 특성으로 데코레이팅되면 이 컨트롤러 설정을 초기화할 수 있도록 호출하여 가져옵니다.  </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IControllerConfiguration.Initialize(System.Web.Http.Controllers.HttpControllerSettings,System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary> 컨트롤러에서 이 컨트롤러 설명자를 재정의할 때마다 설정할 수 있는 콜백이 호출됩니다. </summary>
      <param name="controllerSettings">초기화할 수 있는 컨트롤러 설정입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다. <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />는 <see cref="T:System.Web.Http.Controllers.IControllerConfiguration" />이 상속되도록 지정된 파생 컨트롤러 유형과 연관시킬 수 있습니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionInvoker">
      <summary>HTTP 작업을 호출하는 데 사용되는 메서드가 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionInvoker.InvokeActionAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>HTTP 작업을 비동기적으로 실행합니다.</summary>
      <returns>새로 시작된 작업입니다.</returns>
      <param name="actionContext">실행 컨텍스트입니다.</param>
      <param name="cancellationToken">HTTP 작업에 할당된 취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpActionSelector">
      <summary>동작 메서드의 선택 논리가 들어 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.GetActionMapping(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />의 동작 문자열로 키가 지정된 맵을 반환합니다.이것은 주로 컨트롤러에서 가능한 모든 작업을 검색하기 위해 <see cref="T:System.Web.Http.Description.IApiExplorer" />에서 호출합니다.</summary>
      <returns>선택기가 선택할 수 있는 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" /> 맵이거나, 선택기에 잘 정의된 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />의 매핑이 없는 경우 null입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpActionSelector.SelectAction(System.Web.Http.Controllers.HttpControllerContext)">
      <summary>컨트롤러의 동작을 선택합니다.</summary>
      <returns>컨트롤러의 동작입니다.</returns>
      <param name="controllerContext">컨트롤러의 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.IHttpController">
      <summary>HTTP 컨트롤러를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.IHttpController.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Threading.CancellationToken)">
      <summary>동기화에 대한 컨트롤러를 실행합니다.</summary>
      <returns>컨트롤러입니다.</returns>
      <param name="controllerContext">테스트 컨트롤러에 대한 현재 컨텍스트입니다.</param>
      <param name="cancellationToken">작업을 취소하는 알림입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ParameterBindingExtensions">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />에 대한 확장 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindAsError(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>오류를 발생시키는 매개 변수를 바인딩합니다. </summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="message">바인딩 실패에 대한 이유를 설명하는 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithAttribute(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ParameterBindingAttribute)">
      <summary>선언에 지정된 특성이 있는 것처럼 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩을 제공할 매개 변수입니다.</param>
      <param name="attribute">바인딩을 설명하는 특성입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>HTTP 본문 콘텐츠를 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>HTTP 본문 콘텐츠를 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="formatters">매개 변수를 개체로 직렬화하기 위한 적합한 포맷터 선택 사항을 제공하는 포맷터 목록입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>HTTP 본문 콘텐츠를 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="formatters">매개 변수를 개체로 직렬화하기 위한 적합한 포맷터 선택 사항을 제공하는 포맷터 목록입니다.</param>
      <param name="bodyModelValidator">매개 변수의 유효성을 검사하는 데 사용되는 본문 모델 유효성 검사기입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithFormatter(System.Web.Http.Controllers.HttpParameterDescriptor,System.Net.Http.Formatting.MediaTypeFormatter[])">
      <summary>HTTP 본문 콘텐츠를 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="formatters">매개 변수를 개체로 직렬화하기 위한 적합한 포맷터 선택 사항을 제공하는 포맷터 목록입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>쿼리 문자열을 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>쿼리 문자열을 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="valueProviderFactories">쿼리 문자열 매개 변수 데이터를 제공하는 값 공급자 팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>쿼리 문자열을 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="binder">매개 변수를 개체로 어셈블하는 데 사용되는 모델 바인더입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>쿼리 문자열을 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="binder">매개 변수를 개체로 어셈블하는 데 사용되는 모델 바인더입니다.</param>
      <param name="valueProviderFactories">쿼리 문자열 매개 변수 데이터를 제공하는 값 공급자 팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ParameterBindingExtensions.BindWithModelBinding(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ValueProviders.ValueProviderFactory[])">
      <summary>쿼리 문자열을 구문 분석하여 매개 변수를 바인딩합니다.</summary>
      <returns>HTTP 매개 변수 바인딩 개체입니다.</returns>
      <param name="parameter">바인딩할 매개 변수를 설명하는 매개 변수 설명자입니다.</param>
      <param name="valueProviderFactories">쿼리 문자열 매개 변수 데이터를 제공하는 값 공급자 팩터리입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor">
      <summary>반영된 동기 또는 비동기 동작 메서드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.#ctor(System.Web.Http.Controllers.HttpControllerDescriptor,System.Reflection.MethodInfo)">
      <summary>지정된 설명자와 메서드 세부 정보를 사용하여 <see cref="T:System.Web.Http.Controllers.ReflectedHttpActionDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="methodInfo">동작 메서드 정보입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ActionName">
      <summary>작업의 이름을 가져옵니다.</summary>
      <returns>작업 이름입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.Equals(System.Object)"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ExecuteAsync(System.Web.Http.Controllers.HttpControllerContext,System.Collections.Generic.IDictionary{System.String,System.Object},System.Threading.CancellationToken)">
      <summary>설명된 작업을 실행하고 완료 시 작업의 반환 값을 포함하는 <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</summary>
      <returns>완료 시 작업의 반환 값을 포함하는 [T:System.Threading.Tasks.Task`1"]입니다.</returns>
      <param name="controllerContext">컨텍스트입니다.</param>
      <param name="arguments">Argumenty.</param>
      <param name="cancellationToken">작업을 취소하기 위한 취소 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetCustomAttributes``1(System.Boolean)">
      <summary>이 멤버에 대해 정의된 사용자 지정 특성의 배열을 반환합니다(형식으로 식별됨).</summary>
      <returns>사용자 지정 특성의 배열 또는 사용자 지정 특성이 없는 경우 빈 배열입니다.</returns>
      <param name="inherit">이 동작의 상속 체인을 검색하여 특성을 찾으려면 true이고, 그렇지 않으면 false입니다.</param>
      <typeparam name="T">사용자 지정 특성의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetFilters">
      <summary>작업 필터에 대한 정보를 검색합니다.</summary>
      <returns>필터 정보입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetHashCode"></member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.GetParameters">
      <summary>동작 메서드의 매개 변수를 검색합니다.</summary>
      <returns>동작 메서드의 매개 변수입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.MethodInfo">
      <summary>동작 메서드 정보를 가져오거나 설정합니다.</summary>
      <returns>동작 메서드 정보입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.ReturnType">
      <summary>이 메서드의 반환 형식을 가져옵니다.</summary>
      <returns>이 메서드의 반환 형식입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpActionDescriptor.SupportedHttpMethods">
      <summary>지원되는 HTTP 메서드를 가져오거나 설정합니다.</summary>
      <returns>지원되는 HTTP 메서드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor">
      <summary>반영된 HTTP 매개 변수 설명자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.#ctor(System.Web.Http.Controllers.HttpActionDescriptor,System.Reflection.ParameterInfo)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionDescriptor">작업 설명자입니다.</param>
      <param name="parameterInfo">매개 변수 정보입니다.</param>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.DefaultValue">
      <summary>매개 변수의 기본값을 가져옵니다.</summary>
      <returns>매개 변수의 기본값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.GetCustomAttributes``1">
      <summary>매개 변수에서 사용자 지정 특성 컬렉션을 검색합니다.</summary>
      <returns>매개 변수의 사용자 지정 특성 컬렉션입니다.</returns>
      <typeparam name="TAttribute">사용자 지정 특성의 유형입니다.</typeparam>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.IsOptional">
      <summary>매개 변수가 선택적인지를 나타내는 값을 가져옵니다.</summary>
      <returns>매개 변수가 선택적이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterInfo">
      <summary>매개 변수 정보를 가져오거나 설정합니다.</summary>
      <returns>매개 변수 정보입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterName">
      <summary>매개 변수의 이름을 가져옵니다.</summary>
      <returns>매개 변수의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Controllers.ReflectedHttpParameterDescriptor.ParameterType">
      <summary>매개 변수의 유형을 가져옵니다.</summary>
      <returns>매개 변수의 유형입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Controllers.ResponseMessageResultConverter">
      <summary>반환 형식이 <see cref="T:System.Net.Http.HttpResponseMessage" />인 동작의 변환기를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ResponseMessageResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ResponseMessageResultConverter" /> 개체를 다른 개체로 변환합니다.</summary>
      <returns>변환된 개체입니다.</returns>
      <param name="controllerContext">컨트롤러 컨텍스트입니다.</param>
      <param name="actionResult">작업 결과입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ServicesContainer">
      <summary>ASP.NET Web API에서 사용된 서비스에 대한 컨테이너를 제공하는 추상 클래스입니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ServicesContainer" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Add(System.Type,System.Object)">
      <summary> 지정된 서비스 유형에 대한 서비스 목록 끝에 서비스를 추가합니다.  </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.AddRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> 지정된 서비스 유형에 대한 서비스 목록 끝에 지정된 컬렉션의 서비스를 추가합니다. </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="services">추가할 서비스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Clear(System.Type)">
      <summary> 지정된 서비스 유형의 모든 서비스 인스턴스를 제거합니다.  </summary>
      <param name="serviceType">서비스 목록에서 지울 서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearMultiple(System.Type)">
      <summary>여러 인스턴스 서비스 유형의 모든 인스턴스를 제거합니다.</summary>
      <param name="serviceType">제거할 서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ClearSingle(System.Type)">
      <summary>단일 인스턴스 서비스 유형을 제거합니다.</summary>
      <param name="serviceType">제거할 서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Dispose">
      <summary>관리되지 않는 리소스 확보, 해제, 재설정과 관련된 응용 프로그램 정의 작업을 수행합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.FindIndex(System.Type,System.Predicate{System.Object})">
      <summary> 지정된 조건자로 정의된 조건과 일치하는 서비스를 검색하고 맨 처음 발견되는 서비스의 인덱스(0부터 시작)를 반환합니다. </summary>
      <returns>요소가 발견되면 맨 처음 발견되는 요소의 인덱스(0부터 시작)이고, 그렇지 않으면 -1입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="match">검색할 요소의 조건을 정의하는 대리자입니다. </param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetService(System.Type)">
      <summary>지정된 유형의 서비스 인스턴스를 가져옵니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServiceInstances(System.Type)">
      <summary>지정된 유형의 변경할 수 있는 서비스 인스턴스 목록을 가져옵니다.</summary>
      <returns>변경할 수 있는 서비스 인스턴스 목록입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.GetServices(System.Type)">
      <summary>지정된 유형의 서비스 인스턴스 컬렉션을 가져옵니다.</summary>
      <returns>서비스 인스턴스의 컬렉션입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Insert(System.Type,System.Int32,System.Object)">
      <summary> 서비스를 지정된 인덱스의 컬렉션에 삽입합니다. </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="index">서비스가 삽입되어야 하는 인덱스(0부터 시작)입니다.<see cref="F:System.Int32.MaxValue" />가 전달되면 해당 요소가 끝에 추가된 것입니다.</param>
      <param name="service">삽입할 서비스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.InsertRange(System.Type,System.Int32,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> 컬렉션 요소를 지정된 인덱스의 서비스 목록에 삽입합니다. </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="index">새 요소가 삽입되어야 하는 인덱스(0부터 시작)입니다.<see cref="F:System.Int32.MaxValue" />가 전달되면 요소가 끝에 추가된 것입니다.</param>
      <param name="services">삽입할 서비스의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.IsSingleService(System.Type)">
      <summary> 서비스 유형을 GetService 또는 GetServices로 가져와야 하는지를 확인합니다.  </summary>
      <returns>서비스가 단수형이면 true입니다. </returns>
      <param name="serviceType">쿼리할 서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Remove(System.Type,System.Object)">
      <summary> 지정된 서비스 유형의 서비스 목록에서 맨 처음 발견되는 지정된 서비스를 제거합니다. </summary>
      <returns>해당 항목이 제거되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">제거할 서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAll(System.Type,System.Predicate{System.Object})">
      <summary> 지정된 조건자로 정의된 조건과 일치하는 모든 요소를 제거합니다. </summary>
      <returns>목록에서 제거된 요소 수입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="match">제거할 요소의 조건을 정의하는 대리자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.RemoveAt(System.Type,System.Int32)">
      <summary> 지정된 인덱스에서 서비스를 제거합니다. </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="index">제거할 서비스의 인덱스(0부터 시작)입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.Replace(System.Type,System.Object)">
      <summary>지정된 서비스 유형의 모든 기존 서비스를 지정된 서비스 인스턴스로 바꿉니다.이 작업은 단일형 서비스 및 복수형 서비스 모두에 대해 수행합니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceMultiple(System.Type,System.Object)">
      <summary>여러 인스턴스 서비스의 모든 인스턴스를 새 인스턴스로 바꿉니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">이 유형의 현재 서비스를 바꿀 서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceRange(System.Type,System.Collections.Generic.IEnumerable{System.Object})">
      <summary> 지정된 서비스 유형의 모든 기존 서비스를 지정된 서비스 인스턴스로 바꿉니다. </summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="services">서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ReplaceSingle(System.Type,System.Object)">
      <summary>지정된 유형의 단일 인스턴스 서비스를 바꿉니다.</summary>
      <param name="serviceType">서비스 유형입니다. </param>
      <param name="service">서비스 인스턴스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Controllers.ServicesContainer.ResetCache(System.Type)">
      <summary>단일 서비스 유형에 대해 캐시된 값을 제거합니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.ValueResultConverter`1">
      <summary> 임의의 <paramref name="T" /> 값을 반환하는 작업에서 응답을 만드는 변환기입니다. </summary>
      <typeparam name="T">작업에 대해 선언된 반환 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.ValueResultConverter`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.ValueResultConverter`1.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>임의 반환 형식인 <paramref name="T" />의 작업 결과를 <see cref="T:System.Net.Http.HttpResponseMessage" /> 인스턴스로 변환합니다.</summary>
      <returns>새로 만든 <see cref="T:System.Net.Http.HttpResponseMessage" /> 개체입니다.</returns>
      <param name="controllerContext">작업 컨트롤러 컨텍스트입니다.</param>
      <param name="actionResult">실행 결과입니다.</param>
    </member>
    <member name="T:System.Web.Http.Controllers.VoidResultConverter">
      <summary>값을 반환하지 않는 동작에서 응답을 만드는 변환기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Controllers.VoidResultConverter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Controllers.VoidResultConverter.Convert(System.Web.Http.Controllers.HttpControllerContext,System.Object)">
      <summary>값을 반환하지 않는 동작에서 만들어진 응답을 변환합니다.</summary>
      <returns>변환된 응답입니다.</returns>
      <param name="controllerContext">컨트롤러의 컨텍스트입니다.</param>
      <param name="actionResult">작업의 결과입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyResolver">
      <summary>종속성 주입 컨테이너를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyResolver.BeginScope">
      <summary> 결정 범위를 시작합니다. </summary>
      <returns>종속성 범위입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Dependencies.IDependencyScope">
      <summary>종속성의 범위에 대한 인터페이스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetService(System.Type)">
      <summary>범위에서 서비스를 검색합니다.</summary>
      <returns>검색된 서비스입니다.</returns>
      <param name="serviceType">검색할 서비스입니다.</param>
    </member>
    <member name="M:System.Web.Http.Dependencies.IDependencyScope.GetServices(System.Type)">
      <summary>범위에서 서비스 컬렉션을 검색합니다.</summary>
      <returns>검색된 서비스 컬렉션입니다.</returns>
      <param name="serviceType">검색할 서비스 컬렉션입니다.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiDescription">
      <summary> 상대 URI 경로와 HTTP 메서드로 정의한 API를 설명합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiDescription" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ActionDescriptor">
      <summary> API를 처리할 작업 설명자를 가져오거나 설정합니다. </summary>
      <returns> 작업 설명자입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Documentation">
      <summary> API의 설명서를 가져오거나 설정합니다. </summary>
      <returns> 설명서입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.HttpMethod">
      <summary> HTTP 메서드를 가져오거나 설정합니다. </summary>
      <returns> HTTP 메서드입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ID">
      <summary>ID를 가져옵니다.ID는 <see cref="T:System.Web.Http.HttpServer" /> 내에서 고유합니다.</summary>
      <returns>ID입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ParameterDescriptions">
      <summary> 매개 변수 설명을 가져옵니다. </summary>
      <returns>매개 변수 설명입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.RelativePath">
      <summary> 상대 경로를 가져오거나 설정합니다. </summary>
      <returns> 상대 경로입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.ResponseDescription">
      <summary>응답 설명을 가져오거나 설정합니다.</summary>
      <returns>응답 설명입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.Route">
      <summary> API에 대해 등록된 경로를 가져오거나 설정합니다. </summary>
      <returns> 경로입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedRequestBodyFormatters">
      <summary> 지원되는 요청 본문 포맷터를 가져옵니다. </summary>
      <returns>지원되는 요청 본문 포맷터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiDescription.SupportedResponseFormatters">
      <summary> 지원되는 응답 포맷터를 가져옵니다. </summary>
      <returns>지원되는 응답 포맷터입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorer">
      <summary> 시스템에서 사용할 수 있는 경로, 컨트롤러 및 작업을 기준으로 서비스의 URI 공간을 탐색합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorer" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions">
      <summary> API 설명을 가져옵니다. 설명은 처음 액세스할 때 초기화됩니다. </summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorer.DocumentationProvider">
      <summary> 설명서 공급자를 가져오거나 설정합니다. 이 공급자는 API에 대한 설명서를 작성합니다. </summary>
      <returns> 설명서 공급자입니다. </returns>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.GetHttpMethodsSupportedByAction(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary> 작업에서 지원하는 HttpMethods의 컬렉션을 가져옵니다. <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />를 초기화할 때 호출됩니다. </summary>
      <returns>작업에서 지원하는 HttpMethods의 컬렉션입니다.</returns>
      <param name="route">경로입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreAction(System.String,System.Web.Http.Controllers.HttpActionDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />을 생성할 때 작업을 고려해야 할지 여부를 결정합니다. <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />를 초기화할 때 호출됩니다. </summary>
      <returns>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />을 생성할 때 작업을 고려해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionVariableValue">경로에서 가져오는 작업 변수 값입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
      <param name="route">경로입니다.</param>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorer.ShouldExploreController(System.String,System.Web.Http.Controllers.HttpControllerDescriptor,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />을 생성할 때 컨트롤러를 고려해야 할지 여부를 결정합니다. <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />를 초기화할 때 호출됩니다. </summary>
      <returns>
        <see cref="P:System.Web.Http.Description.ApiExplorer.ApiDescriptions" />을 생성할 때 컨트롤러를 고려해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="controllerVariableValue">경로에서 가져오는 컨트롤러 변수 값입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="route">경로입니다.</param>
    </member>
    <member name="T:System.Web.Http.Description.ApiExplorerSettingsAttribute">
      <summary> 이 특성은 컨트롤러 및 작업에 사용하여 <see cref="T:System.Web.Http.Description.ApiExplorer" />의 동작에 영향을 줄 수 있습니다. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiExplorerSettingsAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorerSettingsAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiExplorerSettingsAttribute.IgnoreApi">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiExplorer" />에서 생성한 <see cref="T:System.Web.Http.Description.ApiDescription" /> 인스턴스의 컨트롤러 또는 작업을 제외할지를 나타내는 값을 가져오거나 설정합니다. </summary>
      <returns>컨트롤러 또는 작업을 무시해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterDescription">
      <summary> 상대 URI 경로와 HTTP 메서드로 정의한 API에 대한 매개 변수를 설명합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Description.ApiParameterDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiParameterDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Documentation">
      <summary> 설명서를 가져오거나 설정합니다. </summary>
      <returns> 설명서입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Name">
      <summary> 이름을 가져오거나 설정합니다. </summary>
      <returns> 이름입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.ParameterDescriptor">
      <summary> 매개 변수 설명자를 가져오거나 설정합니다. </summary>
      <returns> 매개 변수 설명자입니다. </returns>
    </member>
    <member name="P:System.Web.Http.Description.ApiParameterDescription.Source">
      <summary> 매개 변수의 소스를 가져오거나 설정합니다. 요청 URI, 요청 본문 또는 기타 위치에서 가져올 수 있습니다. </summary>
      <returns> 소스입니다. </returns>
    </member>
    <member name="T:System.Web.Http.Description.ApiParameterSource">
      <summary> 매개 변수를 가져올 소스 위치를 설명합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromBody">
      <summary>본문에서 가져온 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.FromUri">
      <summary>Uri에서 가져온 매개 변수입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Description.ApiParameterSource.Unknown">
      <summary>위치를 알 수 없습니다.</summary>
    </member>
    <member name="T:System.Web.Http.Description.IApiExplorer">
      <summary>
        <see cref="T:System.Web.Http.Description.ApiDescription" />의 컬렉션을 가져오는 인터페이스를 정의합니다. </summary>
    </member>
    <member name="P:System.Web.Http.Description.IApiExplorer.ApiDescriptions">
      <summary> API 설명을 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.Description.IDocumentationProvider">
      <summary> 서비스에 대한 설명서를 작성하는 공급자를 정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />에 따라 설명서를 가져옵니다. </summary>
      <returns>컨트롤러에 대한 설명서입니다.</returns>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpControllerDescriptor)"></member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetDocumentation(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.HttpParameterDescriptor" />에 따라 설명서를 가져옵니다. </summary>
      <returns>컨트롤러에 대한 설명서입니다.</returns>
      <param name="parameterDescriptor">매개 변수 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Description.IDocumentationProvider.GetResponseDocumentation(System.Web.Http.Controllers.HttpActionDescriptor)"></member>
    <member name="T:System.Web.Http.Description.ResponseDescription">
      <summary>API 응답을 설명합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseDescription.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Description.ResponseDescription" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.DeclaredType">
      <summary>선언된 응답 유형을 가져오거나 설정합니다.</summary>
      <returns>선언된 응답 유형입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.Documentation">
      <summary>응답 설명서를 가져오거나 설정합니다.</summary>
      <returns>응답 설명서입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Description.ResponseDescription.ResponseType">
      <summary>실제 응답 유형을 가져오거나 설정합니다.</summary>
      <returns>실제 응답 유형입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Description.ResponseTypeAttribute">
      <summary>선언된 반환 형식이 <see cref="T:System.Net.Http.HttpResponseMessage" /> 또는 <see cref="T:System.Web.Http.IHttpActionResult" />인 경우 작업에서 반환되는 엔터티 형식을 지정하는 데 사용합니다.<see cref="T:System.Web.Http.Description.ApiDescription" />을 생성할 때 <see cref="T:System.Web.Http.Description.ApiExplorer" />에서 <see cref="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType" />을 읽습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Description.ResponseTypeAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Description.ResponseTypeAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="responseType">응답 유형입니다.</param>
    </member>
    <member name="P:System.Web.Http.Description.ResponseTypeAttribute.ResponseType">
      <summary>응답 유형을 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver">
      <summary> 외부 종속성이 없는 <see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /> 구현을 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultAssembliesResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultAssembliesResolver.GetAssemblies">
      <summary> 응용 프로그램에 사용 가능한 어셈블리 목록을 반환합니다. </summary>
      <returns>어셈블리의 &lt;see cref="T:System.Collections.ObjectModel.Collection`1" /&gt;입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />의 기본 구현을 나타냅니다. <see cref="T:System.Web.Http.Services.DependencyResolver" />를 통해 다른 구현을 등록할 수 있습니다. 여기에서는 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 인스턴스당 <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> 인스턴스가 하나 있는 경우에 최적화되어 있지만, <see cref="T:System.Web.Http.Controllers.ApiControllerActionInvoker" /> 하나에 대해 여러 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 인스턴스가 있는 경우도 지원할 수 있습니다. 두 번째 경우에는 조회에서 <see cref="P:HttpControllerDescriptor.Properties" /> 사전을 확인하므로 속도가 약간 느려질 수 있습니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerActivator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary> 지정된 <paramref name="request" />를 사용하여 <paramref name="controllerType" />을 통해 지정된 <see cref="T:System.Web.Http.Controllers.IHttpController" />를 만듭니다.</summary>
      <returns>
        <paramref name="controllerType" /> 형식의 인스턴스입니다.</returns>
      <param name="request">요청 메시지입니다.</param>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="controllerType">컨트롤러의 형식입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector">
      <summary>
        <see cref="T:System.Net.Http.HttpRequestMessage" />가 지정된 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />를 선택하기 위한 기본 <see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /> 인스턴스를 나타냅니다. <see cref="P:System.Web.Http.HttpConfiguration.Services" />를 통해 다른 구현을 등록할 수 있습니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerSelector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="F:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.ControllerSuffix">
      <summary>컨트롤러 이름에서 접미사 문자열을 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerMapping">
      <summary>선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />의 컨트롤러 문자열로 키가 지정된 맵을 반환합니다. </summary>
      <returns>선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 맵이거나, 선택기에 잘 정의된 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />의 매핑이 없는 경우 null입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.GetControllerName(System.Net.Http.HttpRequestMessage)">
      <summary>지정한 <see cref="T:System.Net.Http.HttpRequestMessage" />의 컨트롤러 이름을 가져옵니다.</summary>
      <returns>지정한 <see cref="T:System.Net.Http.HttpRequestMessage" />의 컨트롤러 이름입니다.</returns>
      <param name="request">HTTP 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary>지정된 <see cref="T:System.Net.Http.HttpRequestMessage" />에 대해 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />를 선택합니다.</summary>
      <returns>지정한 <see cref="T:System.Net.Http.HttpRequestMessage" />의 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 인스턴스입니다.</returns>
      <param name="request">HTTP 요청 메시지입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver">
      <summary> 외부 종속성이 없는 <see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /> 구현을 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.#ctor(System.Predicate{System.Type})">
      <summary>컨트롤러 유형을 필터링하기 위한 조건자를 사용하여 새 <see cref="T:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver" /> 인스턴스를 초기화합니다. </summary>
      <param name="predicate">조건자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> 응용 프로그램에 사용 가능한 컨트롤러 목록을 반환합니다. </summary>
      <returns>컨트롤러의 &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;입니다.</returns>
      <param name="assembliesResolver">어셈블리 해결 프로그램입니다.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.DefaultHttpControllerTypeResolver.IsControllerTypePredicate">
      <summary>해결 프로그램 유형이 컨트롤러 유형 조건자인지를 나타내는 값을 가져옵니다.</summary>
      <returns>해결 프로그램 유형이 컨트롤러 유형 조건자이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpControllerDispatcher">
      <summary>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />를 <see cref="T:System.Web.Http.Controllers.IHttpController" /> 구현으로 발송하여 처리합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>지정한 구성을 사용하여 <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">HTTP 구성입니다.</param>
    </member>
    <member name="P:System.Web.Http.Dispatcher.HttpControllerDispatcher.Configuration">
      <summary>HTTP 구성을 가져옵니다.</summary>
      <returns>HTTP 구성입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpControllerDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />를 <see cref="T:System.Web.Http.Controllers.IHttpController" />로 발송합니다.</summary>
      <returns>진행 중인 작업을 나타내는 <see cref="T:System.Threading.Tasks.Task`1" />입니다.</returns>
      <param name="request">발송할 요청입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher">
      <summary> 이 클래스는 기본 끝점 메시지 처리기로, 여기에서는 일치된 경로의 <see cref="T:System.Web.Http.Routing.IHttpRoute" />를 검사하고 호출할 메시지 처리기를 선택합니다. <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" />가 null이면 <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" />에 위임합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration)">
      <summary> 제공된 <see cref="T:System.Web.Http.HttpConfiguration" /> 및 <see cref="T:System.Web.Http.Dispatcher.HttpControllerDispatcher" />를 기본 처리기로 사용하여 <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="configuration">서버 구성입니다.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.#ctor(System.Web.Http.HttpConfiguration,System.Net.Http.HttpMessageHandler)">
      <summary> 제공된 <see cref="T:System.Web.Http.HttpConfiguration" /> 및 <see cref="T:System.Net.Http.HttpMessageHandler" />를 사용하여 <see cref="T:System.Web.Http.Dispatcher.HttpRoutingDispatcher" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="configuration">서버 구성입니다.</param>
      <param name="defaultHandler">
        <see cref="T:System.Web.Http.Routing.IHttpRoute" />에 <see cref="P:System.Web.Http.Routing.IHttpRoute.Handler" />가 없을 때 사용할 기본 처리기입니다.</param>
    </member>
    <member name="M:System.Web.Http.Dispatcher.HttpRoutingDispatcher.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>HTTP 요청을 비동기 작업으로 보냅니다.</summary>
      <returns>비동기 작업을 나타내는 작업 개체입니다.</returns>
      <param name="request">보낼 HTTP 요청 메시지입니다.</param>
      <param name="cancellationToken">작업을 취소할 취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IAssembliesResolver">
      <summary>응용 프로그램의 어셈블리를 관리하기 위한 추상화를 제공합니다.<see cref="T:System.Web.Http.Services.DependencyResolver" />를 통해 다른 구현을 등록할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IAssembliesResolver.GetAssemblies">
      <summary> 응용 프로그램에 사용 가능한 어셈블리 목록을 반환합니다. </summary>
      <returns>어셈블리의 &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerActivator">
      <summary>
        <see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" />에 필요한 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerActivator.Create(System.Net.Http.HttpRequestMessage,System.Web.Http.Controllers.HttpControllerDescriptor,System.Type)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> 개체를 만듭니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> 개체입니다.</returns>
      <param name="request">메시지 요청입니다.</param>
      <param name="controllerDescriptor">HTTP 컨트롤러 설명자입니다.</param>
      <param name="controllerType">컨트롤러의 형식입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerSelector">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IHttpController" /> 팩터리에 필요한 메서드를 정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.GetControllerMapping">
      <summary>선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />의 컨트롤러 문자열로 키가 지정된 맵을 반환합니다.이것은 주로 시스템에서 가능한 모든 컨트롤러를 검색하기 위해 <see cref="T:System.Web.Http.Description.IApiExplorer" />에서 호출합니다.</summary>
      <returns>선택기가 선택할 수 있는 모든 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 맵이거나, 선택기에 잘 정의된 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />의 매핑이 없는 경우 null입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerSelector.SelectController(System.Net.Http.HttpRequestMessage)">
      <summary> 지정된 <see cref="T:System.Net.Http.HttpRequestMessage" />에 대해 <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" />를 선택합니다. </summary>
      <returns>
        <see cref="T:System.Web.Http.Controllers.HttpControllerDescriptor" /> 인스턴스입니다.</returns>
      <param name="request">요청 메시지입니다.</param>
    </member>
    <member name="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver">
      <summary> 응용 프로그램의 컨트롤러 유형을 관리하기 위한 추상화를 제공합니다. DependencyResolver를 통해 다른 구현을 등록할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Dispatcher.IHttpControllerTypeResolver.GetControllerTypes(System.Web.Http.Dispatcher.IAssembliesResolver)">
      <summary> 응용 프로그램에 사용 가능한 컨트롤러 목록을 반환합니다. </summary>
      <returns>컨트롤러의 &lt;see cref="T:System.Collections.Generic.ICollection`1" /&gt;입니다.</returns>
      <param name="assembliesResolver">실패한 어셈블리에 대한 해결 프로그램입니다.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks">
      <summary>이 어셈블리에서 사용되는 catch 블록을 제공합니다.</summary>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync의 catch 블록을 가져옵니다.</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpBatchHandler.SendAsync의 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync의 catch 블록을 가져옵니다.</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpControllerDispatcher.SendAsync의 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer">
      <summary>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync의 catch 블록을 가져옵니다.</summary>
      <returns>System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.HttpServer.SendAsync의 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter">
      <summary>
        <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />를 사용할 때 System.Web.Http.Owin.HttpMessageHandlerAdapter.ComputeContentLength의 catch 블록을 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Web.Http.ExceptionHandling.ExceptionCatchBlocks.IExceptionFilter" />를 사용할 때의 System.Web.Http.Owin.HttpMessageHandlerAdapter.ComputeContentLength의 catch 블록입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContext">
      <summary>예외가 catch된 경우 이 예외와 관련 컨텍스트 데이터를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">catch된 예외입니다.</param>
      <param name="catchBlock">예외가 catch된 catch 블록입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">catch된 예외입니다.</param>
      <param name="catchBlock">예외가 catch된 catch 블록입니다.</param>
      <param name="request">예외가 catch되었을 때 처리되는 요청입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Net.Http.HttpRequestMessage,System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">catch된 예외입니다.</param>
      <param name="catchBlock">예외가 catch된 catch 블록입니다.</param>
      <param name="request">예외가 catch되었을 때 처리되는 요청입니다.</param>
      <param name="response">예외가 catch되었을 때 반환되는 응답입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContext.#ctor(System.Exception,System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock,System.Web.Http.Controllers.HttpActionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">catch된 예외입니다.</param>
      <param name="catchBlock">예외가 catch된 catch 블록입니다.</param>
      <param name="actionContext">예외가 발생한 작업 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ActionContext">
      <summary>사용 가능한 경우 예외가 발생한 작업 컨텍스트를 가져옵니다.</summary>
      <returns>사용 가능한 경우 예외가 발생한 작업 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.CatchBlock">
      <summary>예외가 catch된 catch 블록을 가져옵니다.</summary>
      <returns>예외가 catch된 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.ControllerContext">
      <summary>사용 가능한 경우 예외가 발생한 컨트롤러 컨텍스트를 가져옵니다.</summary>
      <returns>사용 가능한 경우 예외가 발생한 컨트롤러 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Exception">
      <summary>catch된 예외를 가져옵니다.</summary>
      <returns>catch된 예외입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Request">
      <summary>예외가 catch되었을 때 처리되는 요청을 가져옵니다.</summary>
      <returns>예외가 catch되었을 때 처리되는 요청입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.RequestContext">
      <summary>예외가 발생한 요청 컨텍스트를 가져옵니다.</summary>
      <returns>예외가 발생한 요청 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContext.Response">
      <summary>예외가 catch되었을 때 보내는 응답을 가져옵니다.</summary>
      <returns>예외가 catch되었을 때 보내는 응답입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock">
      <summary>예외 컨텍스트에 대한 catch 블록 위치를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.#ctor(System.String,System.Boolean,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">예외가 catch된 catch 블록의 레이블입니다.</param>
      <param name="isTopLevel">예외가 catch된 catch 블록이 호스트 이전의 마지막 블록인지를 나타내는 값입니다.</param>
      <param name="callsHandler">catch 블록에서 예외가 기록된 후 이를 처리할 수 있는지를 나타내는 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.CallsHandler">
      <summary>catch 블록에서 예외가 기록된 후 이를 처리할 수 있는지를 나타내는 값을 가져옵니다.</summary>
      <returns>catch 블록에서 예외가 기록된 후 이를 처리할 수 있는지를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.IsTopLevel">
      <summary>예외가 catch된 catch 블록이 호스트 이전의 마지막 블록인지를 나타내는 값을 가져옵니다.</summary>
      <returns>예외가 catch된 catch 블록이 호스트 이전의 마지막 블록인지를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.Name">
      <summary>예외가 catch된 catch 블록의 레이블을 가져옵니다.</summary>
      <returns>예외가 catch된 catch 블록의 레이블입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionContextCatchBlock.ToString">
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandler">
      <summary>처리되지 않은 예외 처리기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.Handle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>파생된 클래스에서 재정의되면 예외를 동기적으로 처리합니다.</summary>
      <param name="context">예외 처리기 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>파생된 클래스에서 재정의되면 예외를 비동기적으로 처리합니다.</summary>
      <returns>비동기 예외 처리 작업을 나타내는 작업입니다.</returns>
      <param name="context">예외 처리기 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.ShouldHandle(System.Web.Http.ExceptionHandling.ExceptionHandlerContext)">
      <summary>예외가 처리되어야 하는지 여부를 확인합니다.</summary>
      <returns>예외가 처리되어야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="context">예외 처리기 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandler.System#Web#Http#ExceptionHandling#IExceptionHandler#HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext">
      <summary>처리되지 않은 예외 처리가 발생하는 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionHandlerContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exceptionContext">예외 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.CatchBlock">
      <summary>예외가 catch된 catch 블록을 가져옵니다.</summary>
      <returns>예외가 catch된 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Exception">
      <summary>catch된 예외를 가져옵니다.</summary>
      <returns>catch된 예외입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.ExceptionContext">
      <summary>예외 및 관련 데이터를 제공하는 예외 컨텍스트를 가져옵니다.</summary>
      <returns>예외 및 관련 데이터를 제공하는 예외 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Request">
      <summary>예외가 catch되었을 때 처리되는 요청을 가져옵니다.</summary>
      <returns>예외가 catch되었을 때 처리되는 요청입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.RequestContext">
      <summary>예외가 발생한 요청 컨텍스트를 가져옵니다.</summary>
      <returns>예외가 발생한 요청 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionHandlerContext.Result">
      <summary>예외가 처리될 때 응답 메시지를 제공하는 결과를 가져오거나 설정합니다.</summary>
      <returns>예외가 처리될 때 응답 메시지를 제공하는 결과입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionHandlerExtensions.HandleAsync(System.Web.Http.ExceptionHandling.IExceptionHandler,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>있는 경우 예외 처리기를 호출하고 이를 처리하는 응답을 확인합니다.</summary>
      <returns>예외가 처리될 때 완료 시 반환되는 응답 메시지가 포함된 작업이거나, 예외가 처리되지 않은 상태로 유지되면 null입니다.</returns>
      <param name="handler">처리되지 않은 예외 처리기입니다.</param>
      <param name="context">예외 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLogger">
      <summary>처리되지 않은 예외 로거를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLogger" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.Log(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>파생된 클래스에서 재정의되면 예외를 동기적으로 기록합니다.</summary>
      <param name="context">예외 로거 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>파생된 클래스에서 재정의되면 예외를 비동기적으로 기록합니다.</summary>
      <returns>비동기 예외 로깅 작업을 나타내는 작업입니다.</returns>
      <param name="context">예외 로거 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.ShouldLog(System.Web.Http.ExceptionHandling.ExceptionLoggerContext)">
      <summary>예외가 기록되어야 하는지 여부를 확인합니다.</summary>
      <returns>예외가 기록되어야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="context">예외 로거 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLogger.System#Web#Http#ExceptionHandling#IExceptionLogger#LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext">
      <summary>처리되지 않은 예외 로깅이 발생하는 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.#ctor(System.Web.Http.ExceptionHandling.ExceptionContext)">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.ExceptionLoggerContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exceptionContext">예외 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CallsHandler">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />에서 이후에 예외를 처리하여 새 응답 메시지를 생성할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionHandler" />에서 이후에 예외를 처리하여 새 응답 메시지를 생성할 수 있는지를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.CatchBlock">
      <summary>예외가 catch된 catch 블록을 가져옵니다.</summary>
      <returns>예외가 catch된 catch 블록입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Exception">
      <summary>catch된 예외를 가져옵니다.</summary>
      <returns>catch된 예외입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.ExceptionContext">
      <summary>예외 및 관련 데이터를 제공하는 예외 컨텍스트를 가져옵니다.</summary>
      <returns>예외 및 관련 데이터를 제공하는 예외 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.Request">
      <summary>예외가 catch되었을 때 처리되는 요청을 가져옵니다.</summary>
      <returns>예외가 catch되었을 때 처리되는 요청입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ExceptionHandling.ExceptionLoggerContext.RequestContext">
      <summary>예외가 발생한 요청 컨텍스트를 가져옵니다.</summary>
      <returns>예외가 발생한 요청 컨텍스트입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions">
      <summary>
        <see cref="T:System.Web.Http.ExceptionHandling.IExceptionLogger" />에 대한 확장 메서드를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionLoggerExtensions.LogAsync(System.Web.Http.ExceptionHandling.IExceptionLogger,System.Web.Http.ExceptionHandling.ExceptionContext,System.Threading.CancellationToken)">
      <summary>예외 로거를 호출합니다.</summary>
      <returns>비동기 예외 로깅 작업을 나타내는 작업입니다.</returns>
      <param name="logger">처리되지 않은 예외 로거입니다.</param>
      <param name="context">예외 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.ExceptionServices">
      <summary>로깅을 호출하고 catch 블록에서 처리하는 예외 서비스를 만듭니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.Controllers.ServicesContainer)">
      <summary>있는 경우 등록된 처리기 서비스를 호출하는 예외 처리기를 가져오며 예외가 호스트에 실수로 전파하지 않았는지 확인합니다.</summary>
      <returns>있는 경우 등록된 처리기를 호출하는 예외 처리기이며 예외가 호스트에 실수로 전파하지 않았는지 확인합니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetHandler(System.Web.Http.HttpConfiguration)">
      <summary>있는 경우 등록된 처리기 서비스를 호출하는 예외 처리기를 가져오며 예외가 호스트에 실수로 전파하지 않았는지 확인합니다.</summary>
      <returns>있는 경우 등록된 처리기를 호출하는 예외 처리기이며 예외가 호스트에 실수로 전파하지 않았는지 확인합니다.</returns>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.Controllers.ServicesContainer)">
      <summary>등록된 모든 로거 서비스를 호출하는 예외 로거를 가져옵니다.</summary>
      <returns>복합 로거입니다.</returns>
      <param name="services">서비스 컨테이너입니다.</param>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.ExceptionServices.GetLogger(System.Web.Http.HttpConfiguration)">
      <summary>등록된 모든 로거 서비스를 호출하는 예외 로거를 가져옵니다.</summary>
      <returns>복합 로거입니다.</returns>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionHandler">
      <summary>처리되지 않은 예외 처리기를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionHandler.HandleAsync(System.Web.Http.ExceptionHandling.ExceptionHandlerContext,System.Threading.CancellationToken)">
      <summary>대신 반환할 응답 메시지를 제공하여 예외를 처리하거나 예외에서 전파하도록 허용함으로써 처리되지 않은 예외를 처리합니다.</summary>
      <returns>비동기 예외 처리 작업을 나타내는 작업입니다.</returns>
      <param name="context">예외 처리기 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.ExceptionHandling.IExceptionLogger">
      <summary>처리되지 않은 예외 로거를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ExceptionHandling.IExceptionLogger.LogAsync(System.Web.Http.ExceptionHandling.ExceptionLoggerContext,System.Threading.CancellationToken)">
      <summary>처리되지 않은 예외를 기록합니다.</summary>
      <returns>비동기 예외 로깅 작업을 나타내는 작업입니다.</returns>
      <param name="context">예외 로거 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionDescriptorFilterProvider">
      <summary>동작 메서드의 이름, 컨트롤러, 매개 변수, 특성, 필터 등의 동작 메서드에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ActionDescriptorFilterProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionDescriptorFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>이 동작 메서드에 연결된 필터를 반환합니다.</summary>
      <returns>이 동작 메서드에 연결된 필터입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ActionFilterAttribute">
      <summary>모든 작업 필터 특성에 대한 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ActionFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuted(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>동작 메서드가 호출된 후 발생합니다.</summary>
      <param name="actionExecutedContext">작업 실행 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutedAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecuting(System.Web.Http.Controllers.HttpActionContext)">
      <summary>동작 메서드가 호출되기 전에 발생합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.OnActionExecutingAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ActionFilterAttribute.System#Web#Http#Filters#IActionFilter#ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>필터 동작을 비동기적으로 실행합니다.</summary>
      <returns>이 작업에 대해 새로 만들어진 작업입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">이 작업에 할당된 취소 토큰입니다.</param>
      <param name="continuation">동작 메서드가 호출된 후 계속되는 대리자 함수입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.AuthorizationFilterAttribute">
      <summary>권한 부여 필터에 대한 세부 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorization(System.Web.Http.Controllers.HttpActionContext)">
      <summary>프로세스에서 권한 부여를 요청하는 경우 호출됩니다.</summary>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> 사용에 대한 정보를 캡슐화하는 작업 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.OnAuthorizationAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.AuthorizationFilterAttribute.System#Web#Http#Filters#IAuthorizationFilter#ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>동기화하는 동안 권한 부여 필터를 실행합니다.</summary>
      <returns>동기화하는 동안의 권한 부여 필터입니다.</returns>
      <param name="actionContext">
        <see cref="T:System.Web.Http.Filters.AuthorizationFilterAttribute" /> 사용에 대한 정보를 캡슐화하는 작업 컨텍스트입니다.</param>
      <param name="cancellationToken">작업을 취소하는 취소 토큰입니다.</param>
      <param name="continuation">작업의 연속입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ConfigurationFilterProvider">
      <summary>구성 필터 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ConfigurationFilterProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ConfigurationFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>이 구성 메서드에 연결된 필터를 반환합니다.</summary>
      <returns>이 구성 메서드에 연결된 필터입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.ExceptionFilterAttribute">
      <summary>예외 필터의 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.ExceptionFilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnException(System.Web.Http.Filters.HttpActionExecutedContext)">
      <summary>예외 이벤트가 발생합니다.</summary>
      <param name="actionExecutedContext">작업에 대한 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.OnExceptionAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)"></member>
    <member name="M:System.Web.Http.Filters.ExceptionFilterAttribute.System#Web#Http#Filters#IExceptionFilter#ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>예외 필터를 비동기적으로 실행합니다.</summary>
      <returns>실행 결과입니다.</returns>
      <param name="actionExecutedContext">작업에 대한 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.FilterAttribute">
      <summary>작업 필터 특성에 대한 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.FilterAttribute.AllowMultiple">
      <summary>여러 필터가 허용되는지를 나타내는 값을 가져옵니다.</summary>
      <returns>여러 필터가 허용되면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterInfo">
      <summary>사용 가능한 작업 필터에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.FilterInfo.#ctor(System.Web.Http.Filters.IFilter,System.Web.Http.Filters.FilterScope)">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterInfo" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="instance">이 클래스의 인스턴스입니다.</param>
      <param name="scope">이 클래스의 범위입니다.</param>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Instance">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />의 인스턴스를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.FilterInfo.Scope">
      <summary>
        <see cref="T:System.Web.Http.Filters.FilterInfo" />의 범위를 가져오거나 설정합니다.</summary>
      <returns>FilterInfo의 범위입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.FilterScope">
      <summary>필터가 같은 필터 형식과 필터 순서 내에서 실행되는 순서를 지정하는 값을 정의합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Action">
      <summary>컨트롤러 후의 순서를 지정합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Controller">
      <summary>작업 전과 글로벌 후의 순서를 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Filters.FilterScope.Global">
      <summary>컨트롤러 전의 작업을 지정합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpActionExecutedContext">
      <summary>HTTP 실행 컨텍스트의 작업을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpActionExecutedContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Exception)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpActionExecutedContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.ActionContext">
      <summary>HTTP 작업 컨텍스트를 가져오거나 설정합니다.</summary>
      <returns>HTTP 작업 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Exception">
      <summary>실행 도중 발생했던 예외를 가져오거나 설정합니다.</summary>
      <returns>실행 도중 발생했던 예외입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Request">
      <summary>컨텍스트에 대한 <see cref="T:System.Net.Http.HttpRequestMessage" /> 개체를 가져옵니다.</summary>
      <returns>컨텍스트에 대한 <see cref="T:System.Net.Http.HttpRequestMessage" /> 개체입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpActionExecutedContext.Response">
      <summary>컨텍스트에 대한 <see cref="T:System.Net.Http.HttpResponseMessage" />를 가져오거나 설정합니다.</summary>
      <returns>컨텍스트에 대한 <see cref="T:System.Net.Http.HttpResponseMessage" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext">
      <summary>인증 챌린지를 실행하는 데 대한 정보가 포함된 인증 챌린지 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationChallengeContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.IHttpActionResult)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpAuthenticationChallengeContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="result">현재 작업 결과입니다.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.ActionContext">
      <summary>작업 컨텍스트를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Request">
      <summary>요청 메시지를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationChallengeContext.Result">
      <summary>실행할 작업 결과를 가져오거나 설정합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Filters.HttpAuthenticationContext">
      <summary>인증을 수행하는 데 대한 정보가 포함된 인증 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpAuthenticationContext.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Security.Principal.IPrincipal)">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpAuthenticationContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="principal">현재 사용자입니다.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ActionContext">
      <summary>작업 컨텍스트를 가져옵니다.</summary>
      <returns>작업 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.ErrorResult">
      <summary>인증에 실패한 경우 오류 응답을 생성하는 작업 결과를 가져오거나 설정합니다(인증에 성공한 경우 null임).</summary>
      <returns>오류 응답을 생성하는 작업 결과입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Principal">
      <summary>인증된 주체를 가져오거나 설정합니다.</summary>
      <returns>인증된 주체입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Filters.HttpAuthenticationContext.Request">
      <summary>요청 메시지를 가져옵니다.</summary>
      <returns>요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.HttpFilterCollection">
      <summary>HTTP 필터의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Filters.HttpFilterCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Add(System.Web.Http.Filters.IFilter)">
      <summary>컬렉션 끝에 항목을 추가합니다.</summary>
      <param name="filter">컬렉션에 추가할 항목입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.AddRange(System.Collections.Generic.IEnumerable{System.Web.Http.Filters.IFilter})"></member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Clear">
      <summary>컬렉션에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Contains(System.Web.Http.Filters.IFilter)">
      <summary>컬렉션에 지정된 항목이 포함되는지를 결정합니다.</summary>
      <returns>컬렉션에 지정한 항목이 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="filter">확인할 항목입니다.</param>
    </member>
    <member name="P:System.Web.Http.Filters.HttpFilterCollection.Count">
      <summary>컬렉션에 있는 요소의 개수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 요소의 수입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.GetEnumerator">
      <summary>컬렉션 전체를 반복하는 열거자를 가져옵니다.</summary>
      <returns>컬렉션 전체를 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.Remove(System.Web.Http.Filters.IFilter)">
      <summary>지정된 항목을 컬렉션에서 제거합니다.</summary>
      <param name="filter">컬렉션에서 제거할 항목입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.HttpFilterCollection.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체를 반복하는 열거자를 가져옵니다.</summary>
      <returns>컬렉션 전체를 반복하는 데 사용할 수 있는 열거자 개체입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IActionFilter">
      <summary>작업 필터에 사용되는 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IActionFilter.ExecuteActionFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>필터 동작을 비동기적으로 실행합니다.</summary>
      <returns>이 작업에 대해 새로 만들어진 작업입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">이 작업에 할당된 취소 토큰입니다.</param>
      <param name="continuation">동작 메서드가 호출된 후 계속되는 대리자 함수입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IAuthenticationFilter">
      <summary>인증을 수행하는 필터를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.AuthenticateAsync(System.Web.Http.Filters.HttpAuthenticationContext,System.Threading.CancellationToken)">
      <summary>요청을 인증합니다.</summary>
      <returns>인증을 수행할 작업입니다.</returns>
      <param name="context">인증 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthenticationFilter.ChallengeAsync(System.Web.Http.Filters.HttpAuthenticationChallengeContext,System.Threading.CancellationToken)"></member>
    <member name="T:System.Web.Http.Filters.IAuthorizationFilter">
      <summary>권한 부여 필터에 필요한 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IAuthorizationFilter.ExecuteAuthorizationFilterAsync(System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken,System.Func{System.Threading.Tasks.Task{System.Net.Http.HttpResponseMessage}})">
      <summary>동기화할 권한 부여 필터를 실행합니다.</summary>
      <returns>동기화할 권한 부여 필터입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">필터와 연관된 취소 토큰입니다.</param>
      <param name="continuation">연속입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IExceptionFilter">
      <summary>예외 필터에 필요한 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IExceptionFilter.ExecuteExceptionFilterAsync(System.Web.Http.Filters.HttpActionExecutedContext,System.Threading.CancellationToken)">
      <summary>비동기 예외 필터를 실행합니다.</summary>
      <returns>비동기 예외 필터입니다.</returns>
      <param name="actionExecutedContext">작업 실행 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IFilter">
      <summary>필터에 사용되는 메서드를 정의합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Filters.IFilter.AllowMultiple">
      <summary>단일 프로그램 요소에 대해 지정한 특성의 인스턴스를 둘 이상 지정할 수 있는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>인스턴스를 둘 이상 지정할 수 있으면 true이고, 그렇지 않으면 false입니다.기본값은 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Filters.IFilterProvider">
      <summary>필터 정보를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Filters.IFilterProvider.GetFilters(System.Web.Http.HttpConfiguration,System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>필터의 열거형을 반환합니다.</summary>
      <returns>필터의 열거형입니다.</returns>
      <param name="configuration">HTTP 구성입니다.</param>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Filters.IOverrideFilter"></member>
    <member name="P:System.Web.Http.Filters.IOverrideFilter.FiltersToOverride"></member>
    <member name="T:System.Web.Http.Hosting.HttpPropertyKeys">
      <summary>
        <see cref="P:System.Net.Http.HttpRequestMessage.Properties" />에 저장된 속성에 대한 공통 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.ClientCertificateKey">
      <summary>이 요청에 대한 클라이언트 인증서 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DependencyScope">
      <summary>이 요청과 연결된 <see cref="T:System.Web.Http.Dependencies.IDependencyScope" />에 대한 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.DisposableRequestResourcesKey">
      <summary>요청이 삭제될 경우 삭제해야 할 리소스 컬렉션에 대한 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpActionDescriptorKey">
      <summary> 이 요청과 연결된 <see cref="T:System.Web.Http.Controllers.HttpActionDescriptor" />에 대한 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpConfigurationKey">
      <summary>이 요청과 연결된 <see cref="T:System.Web.Http.HttpConfiguration" />에 대한 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.HttpRouteDataKey">
      <summary>이 요청과 연결된 <see cref="T:System.Web.Http.Routing.IHttpRouteData" />에 대한 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IncludeErrorDetailKey">
      <summary>오류 세부 정보가 이 HTTP 요청의 응답에 포함되어야 하는지를 나타내는 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsBatchRequest">
      <summary> 요청이 일괄 처리 요청인지 여부를 나타내는 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.IsLocalKey">
      <summary>요청이 로컬 주소에서 시작되었는지 여부를 나타내는 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.NoRouteMatched">
      <summary> 요청이 경로와의 일치 여부를 확인하지 못했는지를 나타내는 키를 제공합니다. </summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestContextKey">
      <summary>이 요청에 대한 <see cref="T:System.Web.Http.Controllers.HttpRequestContext" /> 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestCorrelationKey">
      <summary>
        <see cref="T:System.Net.Http.Properties" />에 저장된 <see cref="T:System.Guid" />에 대한 키를 제공합니다. 이것은 해당 요청에 대한 상관 관계 ID입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RequestQueryNameValuePairsKey">
      <summary>
        <see cref="T:System.Net.Http.Properties" />에 저장된 구문 분석된 쿼리 문자열의 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.RetrieveClientCertificateDelegateKey">
      <summary>이 요청에 대한 클라이언트 인증서를 검색할 수 있는 대리자에 대한 키를 제공합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Hosting.HttpPropertyKeys.SynchronizationContextKey">
      <summary>Properties()에 저장된 현재 <see cref="T:System.Threading.SynchronizationContext" />에 대한 키를 제공합니다. Current()가 null이면 컨텍스트가 저장되지 않습니다.</summary>
    </member>
    <member name="T:System.Web.Http.Hosting.IHostBufferPolicySelector">
      <summary> 호스트에서 버퍼링 요청과 응답의 사용을 제어하기 위한 인터페이스입니다. 호스트에서 버퍼링 요청 및/또는 응답을 지원하는 경우 이 인터페이스를 사용하여 버퍼링을 사용할 경우에 대한 정책을 결정할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedInputStream(System.Object)">
      <summary>호스트에서 <see cref="T:System.Net.Http.HttpRequestMessage" /> 엔터티 본문을 버퍼링해야 하는지 여부를 확인합니다.</summary>
      <returns>버퍼링을 사용해야 하면 true이고, 그렇지 않으면 스트리밍된 요청을 사용해야 합니다.</returns>
      <param name="hostContext">호스트 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Hosting.IHostBufferPolicySelector.UseBufferedOutputStream(System.Net.Http.HttpResponseMessage)">
      <summary>호스트에서 <see cref="T.System.Net.Http.HttpResponseMessage" /> 엔터티 본문을 버퍼링해야 하는지 여부를 확인합니다.</summary>
      <returns>버퍼링을 사용해야 하면 true이고, 그렇지 않으면 스트리밍된 응답을 사용해야 합니다.</returns>
      <param name="response">HTTP 응답 메시지입니다.</param>
    </member>
    <member name="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler">
      <summary>호스트 인증 결과를 표시하지 않는 메시지 처리기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Hosting.SuppressHostPrincipalMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
      <summary>메시지를 비동기적으로 보냅니다.</summary>
      <returns>비동기 작업을 완료하는 작업입니다.</returns>
      <param name="request">보낼 요청 메시지입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadata">
      <summary>ModelMetadata의 메타데이터 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Type,System.Func{System.Object},System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">공급자입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
      <param name="modelType">모델 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.AdditionalValues">
      <summary>모델에 대한 추가 메타데이터를 포함하는 사전을 가져옵니다.</summary>
      <returns>모델에 대한 추가 메타데이터를 포함하는 사전입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ContainerType">
      <summary>모델 컨테이너의 형식을 가져오거나 설정합니다.</summary>
      <returns>모델 컨테이너의 형식입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ConvertEmptyStringToNull">
      <summary>양식에 다시 게시된 빈 문자열을 null로 변환할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>양식에 다시 게시된 빈 문자열을 null로 변환해야 하면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Description">
      <summary>모델에 대한 설명을 가져오거나 설정합니다.</summary>
      <returns>모델에 대한 설명입니다.기본값은 null입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetDisplayName">
      <summary>모델의 표시 이름을 가져옵니다.</summary>
      <returns>모델의 표시 이름입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadata.GetValidators(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>모델의 유효성 검사기 목록을 가져옵니다.</summary>
      <returns>모델의 유효성 검사기 목록입니다.</returns>
      <param name="validatorProviders">모델의 유효성 검사기 공급자입니다.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsComplexType">
      <summary>모델이 복합 형식인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모델이 복합 형식으로 간주되는지를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsNullableValueType">
      <summary>형식이 nullable인지를 나타내는 값을 가져옵니다.</summary>
      <returns>형식이 nullable이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.IsReadOnly">
      <summary>모델이 읽기 전용인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모델이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Model">
      <summary>모델의 값을 가져옵니다.</summary>
      <returns>모델 값은 null일 수 있습니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.ModelType">
      <summary>모델의 형식을 가져옵니다.</summary>
      <returns>모델 유형입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Properties">
      <summary>모델의 속성을 설명하는 모델 메타데이터 개체의 컬렉션을 가져옵니다.</summary>
      <returns>모델의 속성을 설명하는 모델 메타데이터 개체의 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.PropertyName">
      <summary>속성 이름을 가져옵니다.</summary>
      <returns>속성 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.ModelMetadata.Provider">
      <summary>공급자를 가져오거나 설정합니다.</summary>
      <returns>공급자입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.ModelMetadataProvider">
      <summary>사용자 지정 메타데이터 공급자에 대한 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperties(System.Object,System.Type)">
      <summary>모델의 각 속성에 대한 ModelMetadata 개체를 가져옵니다.</summary>
      <returns>모델의 각 속성에 대한 ModelMetadata 개체입니다.</returns>
      <param name="container">컨테이너입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>지정된 속성에 대한 메타데이터를 가져옵니다.</summary>
      <returns>지정된 속성에 대한 메타데이터 모델입니다.</returns>
      <param name="modelAccessor">모델 접근자입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
      <param name="propertyName">메타데이터 모델을 가져올 속성입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.ModelMetadataProvider.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>지정된 모델 접근자와 모델 형식에 대한 메타데이터를 가져옵니다.</summary>
      <returns>메타데이터입니다.</returns>
      <param name="modelAccessor">모델 접근자입니다.</param>
      <param name="modelType">모드의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1">
      <summary>메타데이터 공급자를 구현하는 추상 클래스를 제공합니다.</summary>
      <typeparam name="TModelMetadata">모델 메타데이터의 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataFromPrototype(`0,System.Func{System.Object})">
      <summary>파생 클래스에서 재정의되면 지정된 프로토타입을 사용하여 속성에 대한 모델 메타데이터를 만듭니다.</summary>
      <returns>이 속성에 대한 모델 메타데이터입니다.</returns>
      <param name="prototype">모델 메타데이터를 만드는 프로토타입입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>파생 클래스에서 재정의되면 속성에 대한 모델 메타데이터를 만듭니다.</summary>
      <returns>이 속성에 대한 모델 메타데이터입니다.</returns>
      <param name="attributes">특성의 집합입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
      <param name="modelType">모델 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperties(System.Object,System.Type)">
      <summary>모델의 속성 목록을 검색합니다.</summary>
      <returns>모델의 속성 목록입니다.</returns>
      <param name="container">모델 컨테이너입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForProperty(System.Func{System.Object},System.Type,System.String)">
      <summary>컨테이너 유형과 속성 이름을 사용하여 지정된 속성에 대한 메타데이터를 검색합니다.</summary>
      <returns>지정된 속성의 메타데이터입니다.</returns>
      <param name="modelAccessor">모델 접근자입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.AssociatedMetadataProvider`1.GetMetadataForType(System.Func{System.Object},System.Type)">
      <summary>모델 유형을 사용하여 지정된 속성에 대한 메타데이터를 반환합니다.</summary>
      <returns>지정된 속성의 메타데이터입니다.</returns>
      <param name="modelAccessor">모델 접근자입니다.</param>
      <param name="modelType">컨테이너의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />의 프로토타입 캐시 데이터를 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.#ctor(System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="attributes">초기화할 데이터를 제공하는 특성입니다.</param>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Display">
      <summary>메타데이터 표시 특성을 가져오거나 설정합니다.</summary>
      <returns>메타데이터 표시 특성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayFormat">
      <summary>메타데이터 표시 형식 특성을 가져오거나 설정합니다.</summary>
      <returns>메타데이터 표시 형식 특성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.DisplayName"></member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.Editable">
      <summary>메타데이터의 편집 가능한 특성을 가져오거나 설정합니다. </summary>
      <returns>메타데이터의 편집 가능한 특성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedDataAnnotationsMetadataAttributes.ReadOnly">
      <summary>메타데이터의 읽기 전용 특성을 가져오거나 설정합니다.</summary>
      <returns>메타데이터의 읽기 전용 특성입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata">
      <summary>데이터 모델의 <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> 클래스 및 일반 메타데이터에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prototype">모델 메타데이터를 초기화하는 데 사용되는 프로토타입입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">메타데이터 공급자입니다.</param>
      <param name="containerType">컨테이너의 형식입니다.</param>
      <param name="modelType">모델의 형식입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
      <param name="attributes">초기화할 데이터를 제공하는 특성입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeConvertEmptyStringToNull">
      <summary>양식에 다시 게시된 빈 문자열을 null로 변환할지를 나타내는 캐시된 값을 검색합니다.</summary>
      <returns>양식에 다시 게시된 빈 문자열을 null로 변환해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeDescription">
      <summary>모델의 설명을 검색합니다.</summary>
      <returns>모델에 대한 설명입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.ComputeIsReadOnly">
      <summary>모델이 읽기 전용인지를 나타내는 값을 검색합니다.</summary>
      <returns>모델이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata.GetDisplayName"></member>
    <member name="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" />의 프로토타입 캐시 데이터를 제공합니다. </summary>
      <typeparam name="TPrototypeCache">프로토타입 캐시 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.CachedModelMetadata{`0},System.Func{System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prototype">프로토타입입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.#ctor(System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider,System.Type,System.Type,System.String,`0)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.CachedModelMetadata`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="provider">공급자입니다.</param>
      <param name="containerType">컨테이너 유형입니다.</param>
      <param name="modelType">모델 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
      <param name="prototypeCache">프로토타입 캐시입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeConvertEmptyStringToNull">
      <summary>양식에 다시 게시된 빈 문자열을 계산하여 null로 변환할지를 나타냅니다.</summary>
      <returns>양식에 다시 게시된 빈 문자열을 계산하여 null로 변환해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeDescription">
      <summary>계산 값을 나타냅니다.</summary>
      <returns>계산 값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsComplexType">
      <summary>모델이 복합 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns>Web API 프레임워크에서 모델이 복합 형식으로 간주되는지를 나타내는 값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ComputeIsReadOnly">
      <summary>계산될 모델이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>계산될 모델이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.ConvertEmptyStringToNull">
      <summary>양식에 다시 게시된 빈 문자열을 null로 변환할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>양식에 다시 게시된 빈 문자열을 null로 변환해야 하면 true이고, 그렇지 않으면 false입니다.기본값은 true입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.Description">
      <summary>모델에 대한 설명을 가져오거나 설정합니다.</summary>
      <returns>모델에 대한 설명입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsComplexType">
      <summary>모델이 복합 형식인지를 나타내는 값을 가져옵니다.</summary>
      <returns>Web API 프레임워크에서 모델이 복합 형식으로 간주되는지를 나타내는 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.IsReadOnly">
      <summary>모델이 읽기 전용인지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모델이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Metadata.Providers.CachedModelMetadata`1.PrototypeCache">
      <summary>프로토타입 캐시를 업데이트할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>프로토타입 캐시가 업데이트되고 있으면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider">
      <summary>기본 모델 메타데이터 공급자를 구현합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.Providers.CachedDataAnnotationsModelMetadata,System.Func{System.Object})">
      <summary>지정된 속성에 대한 프로토타입의 메타데이터를 만듭니다.</summary>
      <returns>속성의 메타데이터입니다.</returns>
      <param name="prototype">프로토타입입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.DataAnnotationsModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>지정된 속성에 대한 메타데이터를 만듭니다.</summary>
      <returns>속성의 메타데이터입니다.</returns>
      <param name="attributes">특성입니다.</param>
      <param name="containerType">컨테이너의 유형입니다.</param>
      <param name="modelType">모델 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider">
      <summary>빈 모델 메타데이터 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataFromPrototype(System.Web.Http.Metadata.ModelMetadata,System.Func{System.Object})">
      <summary>프로토타입에서 메타데이터를 만듭니다.</summary>
      <returns>메타데이터입니다.</returns>
      <param name="prototype">모델 메타데이터 프로토타입입니다.</param>
      <param name="modelAccessor">모델 접근자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider.CreateMetadataPrototype(System.Collections.Generic.IEnumerable{System.Attribute},System.Type,System.Type,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Metadata.Providers.EmptyModelMetadataProvider" />의 메타데이터 공급자에 대한 프로토타입을 만듭니다.</summary>
      <returns>메타데이터 공급자의 프로토타입입니다.</returns>
      <param name="attributes">특성입니다.</param>
      <param name="containerType">컨테이너 유형입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
      <param name="propertyName">속성 이름입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding">
      <summary>취소 토큰에 대한 바인딩을 직접 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.CancellationTokenParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">바인딩 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CancellationTokenParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>동기화하는 동안 바인딩을 실행합니다.</summary>
      <returns>동기화하는 동안의 바인딩입니다.</returns>
      <param name="metadataProvider">메타데이터 공급자입니다.</param>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">작업 취소 후의 알림입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute">
      <summary>사용자 지정 모델 바인더를 호출하는 특성을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.CustomModelBinderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.CustomModelBinderAttribute.GetBinder">
      <summary>연결된 모델 바인더를 검색합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.IModelBinder" /> 인터페이스를 구현하는 개체에 대한 참조입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.DefaultActionValueBinder">
      <summary>바인더의 기본 동작 값을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetBinding(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /> 인터페이스의 기본 구현입니다.이 인터페이스는 작업 매개 변수 바인딩에 대한 기본 진입점입니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />과 연관된 <see cref="T:System.Web.Http.Controllers.HttpActionBinding" />입니다.</returns>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.DefaultActionValueBinder.GetParameterBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />과 연관된 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.DefaultActionValueBinder" />과 연관된 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />입니다.</returns>
      <param name="parameter">매개 변수 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ErrorParameterBinding">
      <summary>바인딩 오류를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.String)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ErrorParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">오류 설명자입니다.</param>
      <param name="message">메시지입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ErrorParameterBinding.ErrorMessage">
      <summary>오류 메시지를 가져옵니다.</summary>
      <returns>오류 메시지입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ErrorParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>동기화하는 동안 바인딩 메서드를 실행합니다.</summary>
      <param name="metadataProvider">메타데이터 공급자입니다.</param>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 토큰 값입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormatterParameterBinding">
      <summary>본문에서 읽고 포맷터를 호출할 매개 변수 바인딩을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Web.Http.Validation.IBodyModelValidator)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">설명자입니다.</param>
      <param name="formatters">포맷터입니다.</param>
      <param name="bodyModelValidator">본문 모델 유효성 검사기입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.BodyModelValidator">
      <summary>본문 모델 유효성 검사기의 인터페이스를 가져오거나 설정합니다.</summary>
      <returns>본문 모델 유효성 검사기의 인터페이스입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.ErrorMessage">
      <summary>오류 메시지를 가져옵니다.</summary>
      <returns>오류 메시지입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />의 바인딩을 비동기적으로 실행합니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="metadataProvider">메타데이터 공급자입니다.</param>
      <param name="actionContext">작업과 연관된 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.Formatters">
      <summary>매개 변수 바인딩의 포맷터를 나타내는 열거 가능 개체를 가져오거나 설정합니다.</summary>
      <returns>매개 변수 바인딩의 포맷터를 나타내는 열거 가능한 개체입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />의 콘텐츠를 비동기적으로 읽습니다.</summary>
      <returns>작업의 결과입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="type">유형입니다.</param>
      <param name="formatters">포맷터입니다.</param>
      <param name="formatterLogger">형식 로거입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormatterParameterBinding.ReadContentAsync(System.Net.Http.HttpRequestMessage,System.Type,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter},System.Net.Http.Formatting.IFormatterLogger,System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.ModelBinding.FormatterParameterBinding.WillReadBody">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />에서 본문을 읽을지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.FormatterParameterBinding" />에서 본문을 읽을 경우 True이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.FormDataCollectionExtensions">
      <summary>양식 데이터 컬렉션의 확장명을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection)">
      <summary>컬렉션 확장명을 지정한 형식으로 읽습니다.</summary>
      <returns>읽기 컬렉션 확장명입니다.</returns>
      <param name="formData">양식 데이터입니다.</param>
      <typeparam name="T">제네릭 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>컬렉션 확장명을 지정한 형식으로 읽습니다.</summary>
      <returns>컬렉션 확장명입니다.</returns>
      <param name="formData">양식 데이터입니다.</param>
      <param name="modelName">모델의 이름입니다.</param>
      <param name="requiredMemberSelector">필수 구성원 선택기입니다.</param>
      <param name="formatterLogger">포맷터 로거입니다.</param>
      <typeparam name="T">제네릭 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.String,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type)">
      <summary>컬렉션 확장명을 지정한 형식으로 읽습니다.</summary>
      <returns>지정한 형식이 있는 컬렉션 확장명입니다.</returns>
      <param name="formData">양식 데이터입니다.</param>
      <param name="type">개체의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>지정한 형식 및 모델 이름을 사용하여 컬렉션 확장명을 읽습니다.</summary>
      <returns>컬렉션 확장명입니다.</returns>
      <param name="formData">양식 데이터입니다.</param>
      <param name="type">개체의 형식입니다.</param>
      <param name="modelName">모델의 이름입니다.</param>
      <param name="requiredMemberSelector">필수 구성원 선택기입니다.</param>
      <param name="formatterLogger">포맷터 로거입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Net.Http.Formatting.IRequiredMemberSelector,System.Net.Http.Formatting.IFormatterLogger,System.Web.Http.HttpConfiguration)">
      <summary>모델 바인딩을 사용하여 지정된 형식으로 폼 데이터를 deserialize합니다.</summary>
      <returns>개체를 바인딩할 최적의 시도입니다. 최적의 시도는 null일 수 있습니다.</returns>
      <param name="formData">구문 분석된 폼 URI 데이터가 있는 컬렉션</param>
      <param name="type">읽을 대상 형식</param>
      <param name="modelName">전체 폼을 하나의 개체로 읽는 null이나 공란입니다. 본문 데이터에 공통됩니다. 또는 폼 데이터에 대해 부분 바인딩을 수행할 모델 이름입니다. 개별 필드를 추출하는 데 있어 공통되는 사항입니다.</param>
      <param name="requiredMemberSelector">필수 구성원을 결정하는 데 사용되는 <see cref="T:System.Net.Http.Formatting.IRequiredMemberSelector" />입니다.</param>
      <param name="formatterLogger">이벤트를 기록할 <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />입니다.</param>
      <param name="config">바인더를 선택할 <see cref="T:System.Web.Http.HttpConfiguration" /> 구성입니다. 구성이 아직 생성되지 않은 경우 null일 수 있습니다. 이 경우에는 새 구성이 생성됩니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.String,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs(System.Net.Http.Formatting.FormDataCollection,System.Type,System.Web.Http.Controllers.HttpActionContext)"></member>
    <member name="M:System.Web.Http.ModelBinding.FormDataCollectionExtensions.ReadAs``1(System.Net.Http.Formatting.FormDataCollection,System.Web.Http.Controllers.HttpActionContext)">
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehavior">
      <summary>HTTP 바인딩의 동작을 열거합니다.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Never">
      <summary>HTTP 바인딩을 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Optional">
      <summary>선택적 바인딩 동작</summary>
    </member>
    <member name="F:System.Web.Http.ModelBinding.HttpBindingBehavior.Required">
      <summary>HTTP 바인딩이 필요합니다.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute">
      <summary>모델 바인딩 동작 특성에 대한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.#ctor(System.Web.Http.ModelBinding.HttpBindingBehavior)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="behavior">동작입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.Behavior">
      <summary>동작 범주를 가져오거나 설정합니다.</summary>
      <returns>동작 범주입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.HttpBindingBehaviorAttribute.TypeId">
      <summary>이 특성의 고유 식별자를 가져옵니다.</summary>
      <returns>이 특성의 ID입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding">
      <summary>매개 변수가 요청에 바인딩됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.HttpRequestParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">매개 변수 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.HttpRequestParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>매개 변수 바인딩을 비동기적으로 실행합니다.</summary>
      <returns>바인딩된 매개 변수입니다.</returns>
      <param name="metadataProvider">메타데이터 공급자입니다.</param>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IModelBinder">
      <summary>모델 바인더에 필요한 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.IModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 컨트롤러 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 값에 바인딩합니다.</summary>
      <returns>모델이 정상적으로 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.IValueProviderParameterBinding">
      <summary>매개 변수 바인딩에 대한 값 공급자를 나타냅니다.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.IValueProviderParameterBinding.ValueProviderFactories">
      <summary>이 매개 변수 바인딩에 사용된 <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 인스턴스를 가져옵니다.</summary>
      <returns>이 매개 변수 바인딩에 사용된 <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 인스턴스입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter">
      <summary>HTML 양식 URL로 인코딩된 데이터(application/x-www-form-urlencoded라고도 함)를 처리하는 <see cref="T:System.Net.Http.Formatting.MediaTypeFormatter" /> 클래스를 나타냅니다.  </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.#ctor(System.Web.Http.HttpConfiguration)"></member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.CanReadType(System.Type)">
      <summary> 이 <see cref="T:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter" />가 지정된 <paramref name="type" />의 개체를 읽을 수 있는지 여부를 결정합니다. </summary>
      <returns>이 형식의 개체를 읽을 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="type">읽을 개체의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.JQueryMvcFormUrlEncodedFormatter.ReadFromStreamAsync(System.Type,System.IO.Stream,System.Net.Http.HttpContent,System.Net.Http.Formatting.IFormatterLogger)">
      <summary>지정된 스트림에서 지정된 <paramref name="type" />의 개체를 읽습니다. 이 메서드는 역직렬화하는 동안 호출됩니다.</summary>
      <returns>결과가 읽은 개체 인스턴스가 되는 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
      <param name="type">읽을 개체의 형식입니다.</param>
      <param name="readStream">개체를 읽을 <see cref="T:System.IO.Stream" />입니다.</param>
      <param name="content">읽을 콘텐츠입니다.</param>
      <param name="formatterLogger">이벤트를 기록할 <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderAttribute">
      <summary>이 매개 변수가 모델 바인더를 사용하도록 지정합니다.필요에 따라 특정 모델 바인더와 해당 모델 바인더를 구동하는 값 공급자를 지정할 수 있습니다.파생된 특성은 모델 바인더나 값 공급자에 편리한 설정을 제공할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="binderType">모델 바인더의 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.BinderType">
      <summary>모델 바인더의 형식을 가져오거나 설정합니다.</summary>
      <returns>모델 바인더의 형식입니다. </returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary>매개 변수에 대한 바인딩을 가져옵니다.</summary>
      <returns>바인딩이 포함된 <see cref="T:System.Web.Http.Controllers.HttpParameterBinding" />입니다.</returns>
      <param name="parameter">바인딩할 매개 변수입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary> 이 형식에 대한 IModelBinder를 가져옵니다. </summary>
      <returns> null이 아닌 모델 바인더입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">바인더가 바인딩할 것으로 예상되는 모델 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetModelBinderProvider(System.Web.Http.HttpConfiguration)">
      <summary>모델 바인더 공급자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> 인스턴스입니다.</returns>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> 구성 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary> 모델 바인더에 공급할 값 공급자를 가져옵니다. </summary>
      <returns>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 인스턴스의 컬렉션입니다.</returns>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> 구성 개체입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.Name">
      <summary>모델 바인딩 중에 매개 변수 이름으로 간주할 이름을 가져오거나 설정합니다.</summary>
      <returns>간주할 매개 변수 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderAttribute.SuppressPrefixCheck">
      <summary>접두사 확인을 표시하지 않을지를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>접두사 확인을 표시하지 않으려면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderConfig">
      <summary>모델 바인더 구성에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ResourceClassKey">
      <summary>지역화된 문자열 값을 포함하는 리소스 파일(클래스 키)의 이름을 가져오거나 설정합니다.</summary>
      <returns>리소스 파일(클래스 키)의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.TypeConversionErrorMessageProvider">
      <summary>형식 변환 오류 메시지에 대한 현재 공급자를 가져오거나 설정합니다.</summary>
      <returns>형식 변환 오류 메시지에 대한 현재 공급자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderConfig.ValueRequiredErrorMessageProvider">
      <summary>값 필요 오류 메시지에 대한 현재 공급자를 가져오거나 설정합니다.</summary>
      <returns>오류 메시지 공급자입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderErrorMessageProvider">
      <summary>모델 바인더 오류 메시지 공급자에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding">
      <summary> ModelBinding을 통해 바인딩되는 매개 변수를 설명합니다.   </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.#ctor(System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.ModelBinding.IModelBinder,System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderParameterBinding" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="descriptor">매개 변수 설명자입니다.</param>
      <param name="modelBinder">모델 바인더입니다.</param>
      <param name="valueProviderFactories">값 공급자 팩터리의 컬렉션입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.Binder">
      <summary>모델 바인더를 가져옵니다.</summary>
      <returns>모델 바인더입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ExecuteBindingAsync(System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.Threading.CancellationToken)">
      <summary>모델 바인더를 통해 매개 변수 바인딩을 비동기적으로 실행합니다.</summary>
      <returns>바인딩이 완료되었을 때 신호를 받는 작업입니다.</returns>
      <param name="metadataProvider">유효성 검사에 사용할 메타데이터 공급자입니다.</param>
      <param name="actionContext">바인딩할 작업 컨텍스트입니다.</param>
      <param name="cancellationToken">바인딩 작업을 취소하는 이 작업에 할당된 취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBinderParameterBinding.ValueProviderFactories">
      <summary>값 공급자 팩터리의 컬렉션을 가져옵니다.</summary>
      <returns>값 공급자 팩터리의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBinderProvider">
      <summary>모델 바인더 공급자에 대한 추상 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>지정한 유형의 바인더를 찾습니다.</summary>
      <returns>이 유형의 바인딩을 시도할 수 있는 바인더입니다. 바인더가 이 유형을 절대 바인딩할 수 없다고 정적으로 알고 있는 경우에는 null입니다.</returns>
      <param name="configuration">구성 개체입니다.</param>
      <param name="modelType">다음에 대하여 바인딩할 모델의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelBindingContext">
      <summary>모델 바인더가 작동하는 컨텍스트를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelBindingContext.#ctor(System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBindingContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.FallbackToEmptyPrefix">
      <summary>바인더가 빈 접두사를 사용해야 하는지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>바인더가 빈 접두사를 사용해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.Model">
      <summary>모델을 가져오거나 설정합니다.</summary>
      <returns>모델입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelMetadata">
      <summary>모델 메타데이터를 가져오거나 설정합니다.</summary>
      <returns>모델 메타데이터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelName">
      <summary>모델의 이름을 가져오거나 설정합니다.</summary>
      <returns>모델의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelState">
      <summary>모델의 상태를 가져오거나 설정합니다.</summary>
      <returns>모델의 상태입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ModelType">
      <summary>모델의 형식을 가져오거나 설정합니다.</summary>
      <returns>모델의 형식입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.PropertyMetadata">
      <summary>속성 메타데이터를 가져옵니다.</summary>
      <returns>속성 메타데이터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValidationNode">
      <summary>유효성 검사 노드를 가져오거나 설정합니다.</summary>
      <returns>유효성 검사 노드입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelBindingContext.ValueProvider">
      <summary>값 공급자를 가져오거나 설정합니다.</summary>
      <returns>값 공급자입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelError">
      <summary>모델 바인딩 중에 발생하는 오류를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception)">
      <summary>지정된 예외를 사용하여 <see cref="T:System.Web.Http.ModelBinding.ModelError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.Exception,System.String)">
      <summary>지정된 예외와 오류 메시지를 사용하여 <see cref="T:System.Web.Http.ModelBinding.ModelError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">예외입니다.</param>
      <param name="errorMessage">오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelError.#ctor(System.String)">
      <summary>지정된 오류 메시지를 사용하여 <see cref="T:System.Web.Http.ModelBinding.ModelError" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="errorMessage">오류 메시지입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.ErrorMessage">
      <summary>오류 메시지를 가져오거나 설정합니다.</summary>
      <returns>오류 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelError.Exception">
      <summary>예외 개체를 가져오거나 설정합니다.</summary>
      <returns>예외 개체입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelErrorCollection">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelError" /> 인스턴스의 컬렉션을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.Exception)">
      <summary>모델 오류 컬렉션에 지정된 Exception 개체를 추가합니다.</summary>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelErrorCollection.Add(System.String)">
      <summary>모델 오류 컬렉션에 지정된 오류 메시지를 추가합니다.</summary>
      <param name="errorMessage">오류 메시지입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelState">
      <summary>작업 메서드 인수의 속성 또는 인수 자체에 대한 모델 바인딩의 상태를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelState.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelState" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Errors">
      <summary>모델 바인딩 중에 발생한 오류를 포함하는 <see cref="T:System.Web.Http.ModelBinding.ModelErrorCollection" /> 개체를 가져옵니다.</summary>
      <returns>모델 상태 오류입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelState.Value">
      <summary>모델 바인딩 중에 바인딩되는 값을 캡슐화하는 <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> 개체를 가져옵니다.</summary>
      <returns>모델 상태 값입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ModelStateDictionary">
      <summary>유효성 검사 정보를 비롯하여 게시된 폼을 작업 메서드에 바인딩하려는 상태를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>지정된 모델 상태 사전에서 복사한 값을 사용하여 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">사전입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>모델 상태 사전에 지정된 항목을 추가합니다.</summary>
      <param name="item">모델 상태 사전에 추가할 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Add(System.String,System.Web.Http.ModelBinding.ModelState)">
      <summary>모델 상태 사전에 지정된 키와 값이 있는 요소를 추가합니다.</summary>
      <param name="key">추가할 요소의 키입니다.</param>
      <param name="value">추가할 요소의 값입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.Exception)">
      <summary>지정된 키에 연결된 모델 상태 사전에 대한 오류 컬렉션에 지정된 모델 오류를 추가합니다.</summary>
      <param name="key">키입니다.</param>
      <param name="exception">예외입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.AddModelError(System.String,System.String)">
      <summary>지정된 키에 연결된 모델 상태 사전에 대한 오류 컬렉션에 지정된 오류 메시지를 추가합니다.</summary>
      <param name="key">키입니다.</param>
      <param name="errorMessage">오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Clear">
      <summary>모델 상태 사전에서 모든 항목을 제거합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>모델 상태 사전에 특정 값이 들어 있는지 확인합니다.</summary>
      <returns>모델 상태 사전에 항목이 들어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="item">모델 상태 사전에서 찾을 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.ContainsKey(System.String)">
      <summary>모델 상태 사전에 지정된 키가 들어 있는지 확인합니다.</summary>
      <returns>모델 상태 사전에 지정된 키가 들어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">모델 상태 사전에서 찾을 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState}[],System.Int32)">
      <summary>지정된 인덱스에서 시작하여 모델 상태 사전의 요소를 배열에 복사합니다.</summary>
      <param name="array">배열입니다. 배열에는 0부터 시작하는 인덱스를 사용해야 합니다.</param>
      <param name="arrayIndex">배열에서 복사가 시작되는 0부터 시작하는 인덱스입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Count">
      <summary>컬렉션에 있는 키/값 쌍의 개수를 가져옵니다.</summary>
      <returns>컬렉션에 있는 키/값 쌍의 수입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.GetEnumerator">
      <summary>컬렉션을 반복하는 데 사용할 수 있는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체를 반복하는 데 사용할 수 있는 열거자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsReadOnly">
      <summary>컬렉션이 읽기 전용인지를 나타내는 값을 가져옵니다.</summary>
      <returns>컬렉션이 읽기 전용이면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.IsValid">
      <summary>모델 상태 사전의 이 인스턴스가 유효한지를 나타내는 값을 가져옵니다.</summary>
      <returns>이 인스턴스가 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.IsValidField(System.String)">
      <summary>지정된 키에 연결되었거나 지정된 키가 접두사로 사용된 <see cref="T:System.Web.Http.ModelBinding.ModelError" /> 개체가 있는지 확인합니다.</summary>
      <returns>지정된 키에 연결된 값이 모델 상태 사전에 들어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">키입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Item(System.String)">
      <summary>지정된 키와 연결된 값을 가져오거나 설정합니다.</summary>
      <returns>모델 상태 항목입니다.</returns>
      <param name="key">키입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Keys">
      <summary>사전의 키가 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns>모델 상태 사전의 키가 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Merge(System.Web.Http.ModelBinding.ModelStateDictionary)">
      <summary>지정된 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" /> 개체의 값을 이 사전에 복사하고 키가 동일한 경우 기존 값을 덮어씁니다.</summary>
      <param name="dictionary">사전입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Web.Http.ModelBinding.ModelState})">
      <summary>모델 상태 사전에서 맨 처음 발견되는 지정된 개체를 제거합니다.</summary>
      <returns>항목이 모델 상태 사전에서 제거되었으면 true이고, 그렇지 않으면 false입니다. 모델 상태 사전에서 항목을 찾을 수 없는 경우에도 false가 반환됩니다.</returns>
      <param name="item">모델 상태 사전에서 제거할 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.Remove(System.String)">
      <summary>모델 상태 사전에서 지정된 키가 있는 요소를 제거합니다.</summary>
      <returns>요소가 제거되었으면 true이고, 그렇지 않으면 false입니다. 모델 상태 사전에서 키를 찾을 수 없는 경우에도 false가 반환됩니다.</returns>
      <param name="key">제거할 요소의 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.SetModelValue(System.String,System.Web.Http.ValueProviders.ValueProviderResult)">
      <summary>지정된 값 공급자 사전을 사용해 지정된 키의 값을 설정합니다.</summary>
      <param name="key">키입니다.</param>
      <param name="value">값입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.System#Collections#IEnumerable#GetEnumerator">
      <summary>컬렉션 전체를 반복하는 열거자를 반환합니다.</summary>
      <returns>컬렉션 전체를 반복하는 데 사용할 수 있는 IEnumerator 개체입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ModelStateDictionary.TryGetValue(System.String,System.Web.Http.ModelBinding.ModelState@)">
      <summary>지정된 키에 연결된 값을 가져옵니다.</summary>
      <returns>개체에 지정된 키가 있는 요소가 들어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="key">가져올 값의 키입니다.</param>
      <param name="value">지정된 키와 연관된 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.ModelStateDictionary.Values">
      <summary>사전의 값이 들어 있는 컬렉션을 가져옵니다.</summary>
      <returns>모델 상태 사전의 값이 들어 있는 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection">
      <summary> 지정된 매개 변수의 매개 변수 바인딩을 생성할 수 있는 함수의 컬렉션입니다.    </summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ParameterBindingRulesCollection" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Add(System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> 컬렉션의 끝점에 함수를 추가합니다.  추가된 함수는 parameterType이 typeMatch와 일치하는지 확인하는 funcInner 주변 래퍼입니다. </summary>
      <param name="typeMatch">HttpParameterDescriptor.ParameterType에 일치시킬 형식입니다.</param>
      <param name="funcInner">형식이 성공과 일치하면 호출되는 내부 함수입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.Insert(System.Int32,System.Type,System.Func{System.Web.Http.Controllers.HttpParameterDescriptor,System.Web.Http.Controllers.HttpParameterBinding})">
      <summary> 컬렉션의 지정된 인덱스에 함수를 삽입합니다. /// 추가된 함수는 parameterType이 typeMatch와 일치하는지 확인하는 funcInner 주변 래퍼입니다. </summary>
      <param name="index">삽입할 인덱스입니다.</param>
      <param name="typeMatch">HttpParameterDescriptor.ParameterType에 일치시킬 형식입니다.</param>
      <param name="funcInner">형식이 성공과 일치하면 호출되는 내부 함수입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.ParameterBindingRulesCollection.LookupBinding(System.Web.Http.Controllers.HttpParameterDescriptor)">
      <summary> 각 바인딩 함수 중 하나가 null이 아닌 바인딩을 반환하기 전까지 이 함수를 실행합니다.  </summary>
      <returns>매개 변수에 생성된 null이 아닌 첫 번째 바인딩입니다. 또는 바인딩이 생성되지 않으면 null입니다.</returns>
      <param name="parameter">바인딩할 매개 변수입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1">
      <summary>브라우저 요청을 배열에 매핑합니다.</summary>
      <typeparam name="TElement">배열의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>모델이 바인딩되는지 여부를 나타냅니다.</summary>
      <returns>지정된 모델이 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>컬렉션을 배열로 변환합니다.</summary>
      <returns>모든 경우에 true입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
      <param name="newCollection">새 컬렉션입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider">
      <summary>배열에 대해 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ArrayModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>배열에 대한 모델 바인더를 반환합니다.</summary>
      <returns>모델 바인더 개체이거나, 모델 바인더를 가져오지 못한 경우 null입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1">
      <summary>브라우저 요청을 컬렉션에 매핑합니다.</summary>
      <typeparam name="TElement">컬렉션의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 실행 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 바인딩합니다.</summary>
      <returns>모델이 정상적으로 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinder`1.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{`0})">
      <summary>파생된 클래스가 바인더에서 컬렉션을 반환하기 전에 조작할 수 있는 방법을 제공합니다.</summary>
      <returns>모든 경우에 true입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
      <param name="newCollection">새 컬렉션입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider">
      <summary>컬렉션에 대해 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CollectionModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>컬렉션에 대해 모델 바인더를 검색합니다.</summary>
      <returns>모델 바인더입니다.</returns>
      <param name="configuration">모델의 구성입니다.</param>
      <param name="modelType">모델 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto">
      <summary>복잡한 모델에 대한 DTO(데이터 전송 개체)를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDto.#ctor(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Metadata.ModelMetadata})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelMetadata">모델 메타데이터입니다.</param>
      <param name="propertyMetadata">속성 메타데이터의 컬렉션입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.ModelMetadata">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 모델 메타데이터를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 모델 메타데이터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.PropertyMetadata">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 속성 메타데이터 컬렉션을 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 속성 메타데이터 컬렉션입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDto.Results">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 결과를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" />의 결과입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> 개체에 대한 모델 바인더를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 모델이 바인딩되는지 여부를 확인합니다.</summary>
      <returns>지정된 모델이 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider">
      <summary>모델 바인더 공급자를 호출하는 복잡한 모델을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>연결된 모델 바인더를 검색합니다.</summary>
      <returns>모델 바인더입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">검색할 모델의 형식입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDto" /> 개체에 대한 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.#ctor(System.Object,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="model">개체 모델입니다.</param>
      <param name="validationNode">유효성 검사 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.Model">
      <summary>이 개체에 대한 모델을 가져오거나 설정합니다.</summary>
      <returns>이 개체에 대한 모델입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult.ValidationNode">
      <summary>이 개체에 대한 <see cref="T:System.Web.Http.Validation.ModelValidationNode" />를 가져오거나 설정합니다.</summary>
      <returns>이 개체에 대한 <see cref="T:System.Web.Http.Validation.ModelValidationNode" />입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /> 인스턴스의 컬렉션 중 하나에 위임하는 <see cref="T:System.Web.Http.ModelBinding.IModelBinder" />를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="binders">바인더의 열거형입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.#ctor(System.Web.Http.ModelBinding.IModelBinder[])">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="binders">바인더의 배열입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 모델이 바인딩되는지 여부를 나타냅니다.</summary>
      <returns>모델이 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider">
      <summary>복합 모델 바인더 공급자의 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ModelBinding.ModelBinderProvider})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="providers">
        <see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" />의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>모델의 바인더를 가져옵니다.</summary>
      <returns>모델의 바인더입니다.</returns>
      <param name="configuration">바인더 구성입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.CompositeModelBinderProvider.Providers">
      <summary>복합 모델 바인더의 공급자를 가져옵니다.</summary>
      <returns>공급자의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2">
      <summary>브라우저 요청을 사전 데이터 개체에 매핑합니다.</summary>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TValue">값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinder`2.CreateOrReplaceCollection(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{`0,`1}})">
      <summary>컬렉션을 사전으로 변환합니다.</summary>
      <returns>모든 경우에 true입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
      <param name="newCollection">새 컬렉션입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider">
      <summary>사전에 대해 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.DictionaryModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>연결된 모델 바인더를 검색합니다.</summary>
      <returns>연관된 모델 바인더입니다.</returns>
      <param name="configuration">사용할 구성입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2">
      <summary>브라우저 요청을 키/값 쌍 데이터 개체에 매핑합니다.</summary>
      <typeparam name="TKey">키의 형식입니다.</typeparam>
      <typeparam name="TValue">값의 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinder`2.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 실행 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 바인딩합니다.</summary>
      <returns>모델이 정상적으로 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider">
      <summary>키/값 쌍 컬렉션에 대해 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.KeyValuePairModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>연결된 모델 바인더를 검색합니다.</summary>
      <returns>연관된 모델 바인더입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder">
      <summary>브라우저 요청을 변경할 수 있는 데이터 개체에 매핑합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 작업 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 바인딩합니다.</summary>
      <returns>바인딩에 성공하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CanUpdateProperty(System.Web.Http.Metadata.ModelMetadata)">
      <summary>속성을 업데이트할 수 있는지를 나타내는 값을 검색합니다.</summary>
      <returns>속성을 업데이트할 수 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="propertyMetadata">평가할 속성의 메타데이터입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.CreateModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>모델의 인스턴스를 만듭니다.</summary>
      <returns>새로 만든 모델 개체입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.EnsureModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>모델 인스턴스가 아직 바인딩 컨텍스트에 없으면 인스턴스를 만듭니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.GetMetadataForProperties(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>모델 속성의 메타데이터를 검색합니다.</summary>
      <returns>모델 속성의 메타데이터입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinder.SetProperty(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext,System.Web.Http.Metadata.ModelMetadata,System.Web.Http.ModelBinding.Binders.ComplexModelDtoResult,System.Web.Http.Validation.ModelValidator)">
      <summary>지정된 속성의 값을 설정합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
      <param name="propertyMetadata">설정할 속성의 메타데이터입니다.</param>
      <param name="dtoResult">속성에 대한 유효성 검사 정보입니다.</param>
      <param name="requiredValidator">모델의 유효성 검사기입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider">
      <summary>변경할 수 있는 개체에 대해 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.MutableObjectModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>지정된 형식에 대한 모델 바인더를 검색합니다.</summary>
      <returns>모델 바인더입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">검색할 모델의 형식입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider">
      <summary>이 모델 바인딩 클래스에 대한 단순 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Func{System.Web.Http.ModelBinding.IModelBinder})">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelType">모델 형식입니다.</param>
      <param name="modelBinderFactory">모델 바인더 팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.#ctor(System.Type,System.Web.Http.ModelBinding.IModelBinder)">
      <summary>지정된 모델 형식과 모델 바인더를 사용하여 <see cref="T:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelType">모델 형식입니다.</param>
      <param name="modelBinder">모델 바인더입니다.</param>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>지정한 실행 컨텍스트와 바인딩 컨텍스트를 사용하여 모델 바인더를 반환합니다.</summary>
      <returns>모델 바인더이거나, 모델 바인더를 가져오지 못한 경우 null입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">모델 형식입니다.</param>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.ModelType">
      <summary>모델의 형식을 가져옵니다.</summary>
      <returns>모델 유형입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ModelBinding.Binders.SimpleModelBinderProvider.SuppressPrefixCheck">
      <summary>접두사 확인을 표시하지 않을지를 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>접두사 확인을 표시하지 않으려면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder">
      <summary>브라우저 요청을 데이터 개체에 매핑합니다. 이 형식은 .NET Framework 형식 변환기를 사용하여 모델 바인딩을 변환해야 하는 경우에 사용됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 컨트롤러 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 바인딩합니다.</summary>
      <returns>모델이 정상적으로 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider">
      <summary>형식 변환이 필요한 모델에 대한 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeConverterModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>형식 변환이 필요한 모델에 대한 모델 바인더를 검색합니다.</summary>
      <returns>모델 바인더이거나, 형식을 변환할 수 없는 경우 또는 변환할 값이 없는 경우 Nothing입니다.</returns>
      <param name="configuration">바인더의 구성입니다.</param>
      <param name="modelType">모델의 형식입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder">
      <summary>브라우저 요청을 데이터 개체에 매핑합니다. 이 클래스는 모델 바인딩에서 형식 변환이 필요하지 않은 경우에 사용됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinder.BindModel(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.ModelBinding.ModelBindingContext)">
      <summary>지정된 실행 컨텍스트와 바인딩 컨텍스트를 사용하여 모델을 바인딩합니다.</summary>
      <returns>모델이 정상적으로 바인딩되면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="bindingContext">바인딩 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider">
      <summary>형식 변환이 필요하지 않은 모델에 대한 모델 바인더를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ModelBinding.Binders.TypeMatchModelBinderProvider.GetBinder(System.Web.Http.HttpConfiguration,System.Type)">
      <summary>연결된 모델 바인더를 검색합니다.</summary>
      <returns>연관된 모델 바인더입니다.</returns>
      <param name="configuration">구성입니다.</param>
      <param name="modelType">모델의 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestErrorMessageResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 응답을 반환하고 <see cref="P:System.Web.Http.HttpError.Message" />가 있는 <see cref="T:System.Web.Http.HttpError" />에서 콘텐츠 협상을 수행하는 작업 결과를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="message">사용자에게 표시되는 오류 메시지입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.#ctor(System.String,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestErrorMessageResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="message">사용자에게 표시되는 오류 메시지입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestErrorMessageResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Message">
      <summary>사용자에게 표시되는 오류 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestErrorMessageResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.BadRequestResult">
      <summary>비어 있는 <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.BadRequestResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.BadRequestResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>요청을 비동기적으로 실행합니다.</summary>
      <returns>실행 작업을 완료하는 작업입니다.</returns>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.BadRequestResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ConflictResult">
      <summary>비어 있는 HttpStatusCode.Conflict 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.ConflictResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.ConflictResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>충돌 결과 작업을 비동기적으로 실행합니다.</summary>
      <returns>지정된 작업을 비동기적으로 실행합니다.</returns>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.ConflictResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 HTTP 요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1">
      <summary>경로 생성 및 콘텐츠 협상을 수행하고 콘텐츠 협상에 성공하면 <see cref="F:System.Net.HttpStatusCode.Created" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},`0,System.Web.Http.Routing.UrlHelper,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="urlFactory">경로 URL을 생성하는 데 사용되는 팩터리입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Content">
      <summary>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteName">
      <summary>URL을 생성하는 데 사용되는 경로의 이름을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.RouteValues">
      <summary>URL을 생성하는 데 사용되는 경로 데이터를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.CreatedAtRouteNegotiatedContentResult`1.UrlFactory">
      <summary>경로 URL을 생성하는 데 사용되는 팩터리를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1">
      <summary>콘텐츠 협상을 수행하고 콘텐츠 협상에 성공하면 <see cref="F:System.Net.HttpStatusCode.Created" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="location">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="content">콘텐츠를 만든 위치입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.#ctor(System.Uri,`0,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.CreatedNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="location">콘텐츠를 만든 위치입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Content">
      <summary>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값을 가져옵니다.</summary>
      <returns>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
      <returns>콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.CreatedNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>협상된 콘텐츠 결과를 만드는 작업을 비동기적으로 실행합니다.</summary>
      <returns>반환 값을 비동기적으로 실행합니다.</returns>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
      <returns>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Location">
      <summary>콘텐츠를 만든 위치를 가져옵니다.</summary>
      <returns>콘텐츠를 만든 위치입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.CreatedNegotiatedContentResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 HTTP 요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ExceptionResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 응답을 반환하고 <see cref="P:System.Web.Http.Results.ExceptionResult.Exception" />을 기반으로 <see cref="T:System.Web.Http.HttpError" />에서 콘텐츠 협상을 수행하는 작업 결과를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.ExceptionResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="exception">오류에 포함할 예외입니다.</param>
      <param name="includeErrorDetail">오류에 예외 메시지가 포함되어 있어야 하면 true이고, 그렇지 않으면 false입니다. </param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.#ctor(System.Exception,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.ExceptionResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="exception">오류에 포함할 예외입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.Formatting.IContentNegotiator" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Exception">
      <summary>오류에 포함할 예외를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Exception" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.ExceptionResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.IncludeErrorDetail">
      <summary>오류에 예외 메시지가 포함되어 있어야 하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Boolean" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.ExceptionResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.FormattedContentResult`1">
      <summary>형식이 지정된 콘텐츠를 반환하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Net.Http.HttpRequestMessage)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="content">엔터티 본문에서 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="formatter">콘텐츠 형식을 지정하는 데 사용하는 포맷터입니다.</param>
      <param name="mediaType">포맷터가 기본값을 선택하도록 하는 Content-Type 헤더 값 또는 <see cref="null" /> 값입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.FormattedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="content">엔터티 본문에서 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="formatter">콘텐츠 형식을 지정하는 데 사용하는 포맷터입니다.</param>
      <param name="mediaType">포맷터가 기본값을 선택하도록 하는 Content-Type 헤더 값 또는 <see cref="null" /> 값입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Content">
      <summary>엔터티 본문에서 형식을 지정하는 콘텐츠 값을 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.FormattedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Formatter">
      <summary>콘텐츠 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.MediaType">
      <summary>포맷터가 기본값을 선택하도록 하는 Content-Type 헤더 값 또는 <see cref="null" /> 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.FormattedContentResult`1.StatusCode">
      <summary>응답 메시지에 대한 HTTP 상태 코드를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Results.InternalServerErrorResult">
      <summary>비어 있는 <see cref="F:System.Net.HttpStatusCode.InternalServerError" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.InternalServerErrorResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.InternalServerErrorResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InternalServerErrorResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.InvalidModelStateResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.BadRequest" /> 응답을 반환하고 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />를 기반으로 <see cref="T:System.Web.Http.HttpError" />에서 콘텐츠 협상을 수행하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Boolean,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelState">오류에 포함할 모델 상태입니다.</param>
      <param name="includeErrorDetail">오류에 예외 메시지가 포함되어 있어야 하면 true이고, 그렇지 않으면 false입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.InvalidModelStateResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelState">오류에 포함할 모델 상태입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
      <returns>콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.InvalidModelStateResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>응답 메시지를 비동기적으로 만듭니다.</summary>
      <returns>작업 완료 시 응답 메시지가 포함된 작업입니다.</returns>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
      <returns>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.IncludeErrorDetail">
      <summary>오류에 예외 메시지가 포함되어 있어야 하는지를 나타내는 값을 가져옵니다.</summary>
      <returns>오류에 예외 메시지가 포함되어 있어야 하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.ModelState">
      <summary>오류에 포함할 모델 상태를 가져옵니다.</summary>
      <returns>오류에 포함할 모델 상태입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.InvalidModelStateResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.JsonResult`1">
      <summary>JSON 데이터와 함께 <see cref="F:System.Net.HttpStatusCode.OK" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Net.Http.HttpRequestMessage)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.JsonResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="content">엔터티 본문에서 직렬화할 콘텐츠 값입니다.</param>
      <param name="serializerSettings">직렬 변환기 설정입니다.</param>
      <param name="encoding">콘텐츠 인코딩입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.#ctor(`0,Newtonsoft.Json.JsonSerializerSettings,System.Text.Encoding,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.JsonResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="content">엔터티 본문에서 직렬화할 콘텐츠 값입니다.</param>
      <param name="serializerSettings">직렬 변환기 설정입니다.</param>
      <param name="encoding">콘텐츠 인코딩입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Content">
      <summary>엔터티 본문에서 직렬화할 콘텐츠 값을 가져옵니다.</summary>
      <returns>엔터티 본문에서 직렬화할 콘텐츠 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Encoding">
      <summary>콘텐츠 인코딩을 가져옵니다.</summary>
      <returns>콘텐츠 인코딩입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.JsonResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>응답 메시지를 비동기적으로 만듭니다.</summary>
      <returns>작업 완료 시 응답 메시지가 포함된 작업입니다.</returns>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 요청 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.JsonResult`1.SerializerSettings">
      <summary>직렬 변환기 설정을 가져옵니다.</summary>
      <returns>직렬 변환기 설정입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NegotiatedContentResult`1">
      <summary>콘텐츠 협상을 수행하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.#ctor(System.Net.HttpStatusCode,`0,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.NegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Content">
      <summary>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값을 가져옵니다.</summary>
      <returns>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
      <returns>콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.NegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>협상된 HTTP 콘텐츠 결과를 비동기적으로 실행합니다.</summary>
      <returns>협상된 HTTP 콘텐츠 결과를 비동기적으로 실행합니다.</returns>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
      <returns>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 HTTP 요청 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.NegotiatedContentResult`1.StatusCode">
      <summary>응답 메시지에 대한 HTTP 상태 코드를 가져옵니다.</summary>
      <returns>응답 메시지에 대한 HTTP 상태 코드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.NotFoundResult">
      <summary>비어 있는 <see cref="F:System.Net.HttpStatusCode.NotFound" /> 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.NotFoundResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.NotFoundResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkNegotiatedContentResult`1">
      <summary>콘텐츠 협상을 수행하고 콘텐츠 협상에 성공하면 HttpStatusCode.OK 응답을 반환하는 작업 결과를 나타냅니다.</summary>
      <typeparam name="T">엔터티 본문의 콘텐츠 유형입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Net.Http.Formatting.IContentNegotiator,System.Net.Http.HttpRequestMessage,System.Collections.Generic.IEnumerable{System.Net.Http.Formatting.MediaTypeFormatter})">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="contentNegotiator">콘텐츠 협상을 처리하는 콘텐츠 협상자입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
      <param name="formatters">콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.#ctor(`0,System.Web.Http.ApiController)">
      <summary>제공된 값으로 <see cref="T:System.Web.Http.Results.OkNegotiatedContentResult`1" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="content">엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Content">
      <summary>엔터티 본문에서 협상을 담당하고 형식을 지정하는 콘텐츠 값을 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.ContentNegotiator">
      <summary>콘텐츠 협상을 처리하는 콘텐츠 협상자를 가져옵니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkNegotiatedContentResult`1.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Formatters">
      <summary>콘텐츠를 협상하고 형식을 지정하는 데 사용하는 포맷터를 가져옵니다.</summary>
    </member>
    <member name="P:System.Web.Http.Results.OkNegotiatedContentResult`1.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Results.OkResult">
      <summary>비어 있는 HttpStatusCode.OK 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.#ctor(System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.NotFoundResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.OkResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>비동기적으로 실행합니다.</summary>
      <returns>작업을 반환합니다.</returns>
      <param name="cancellationToken">취소 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.OkResult.Request">
      <summary>결과에 대한 HTTP 요청 메시지를 가져옵니다.</summary>
      <returns>결과에 대한 HTTP 요청 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectResult">
      <summary>&lt;see cref="F:System.Net.HttpStatusCode.Redirect"/&gt;에 대한 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Net.Http.HttpRequestMessage)">
      <summary>제공된 값을 사용하여 &lt;see cref="T:System.Web.Http.Results.RedirectResult"/&gt; 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="location">리디렉션할 위치입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.#ctor(System.Uri,System.Web.Http.ApiController)">
      <summary>제공된 값을 사용하여 &lt;see cref="T:System.Web.Http.Results.RedirectResult"/&gt; 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="location">리디렉션할 위치입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Location">
      <summary>콘텐츠를 만든 위치를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Uri" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.RedirectToRouteResult">
      <summary>경로 생성을 수행하고 &lt;see cref="F:System.Net.HttpStatusCode.Redirect"/&gt; 응답을 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.ApiController)">
      <summary>제공된 값을 사용하여 &lt;see cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.#ctor(System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.UrlHelper,System.Net.Http.HttpRequestMessage)">
      <summary>제공된 값을 사용하여 &lt;see cref="T:System.Web.Http.Results.RedirectToRouteResult"/&gt; 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeName">URL을 생성하는 데 사용되는 경로의 이름입니다.</param>
      <param name="routeValues">URL을 생성하는 데 사용되는 경로 데이터입니다.</param>
      <param name="urlFactory">경로 URL을 생성하는 데 사용되는 팩터리입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.RedirectToRouteResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteName">
      <summary>URL을 생성하는 데 사용되는 경로의 이름을 가져옵니다.</summary>
      <returns>
        <see cref="T:System.String" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.RouteValues">
      <summary>URL을 생성하는 데 사용되는 경로 데이터를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IDictionary`2" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.RedirectToRouteResult.UrlFactory">
      <summary>경로 URL을 생성하는 데 사용되는 팩터리를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.ResponseMessageResult">
      <summary>지정된 응답 메시지를 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.#ctor(System.Net.Http.HttpResponseMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.ResponseMessageResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="response">응답 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.ResponseMessageResult.ExecuteAsync(System.Threading.CancellationToken)"></member>
    <member name="P:System.Web.Http.Results.ResponseMessageResult.Response">
      <summary>응답 메시지를 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Results.StatusCodeResult">
      <summary>지정된 HTTP 상태 코드를 반환하는 작업 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.#ctor(System.Net.HttpStatusCode,System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="statusCode">응답 메시지에 대한 HTTP 상태 코드입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.StatusCodeResult.ExecuteAsync(System.Threading.CancellationToken)">
      <summary>응답 메시지를 비동기적으로 만듭니다.</summary>
      <returns>작업 완료 시 응답 메시지가 포함된 작업입니다.</returns>
      <param name="cancellationToken">취소 요청을 모니터링하기 위한 토큰입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>이 결과를 초래한 요청 메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.StatusCodeResult.StatusCode">
      <summary>응답 메시지에 대한 HTTP 상태 코드를 가져옵니다.</summary>
      <returns>응답 메시지에 대한 HTTP 상태 코드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Results.UnauthorizedResult">
      <summary>
        <see cref="F:System.Net.HttpStatusCode.Unauthorized" /> 응답을 반환하는 작업 결과를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="challenges">WWW-Authenticate 챌린지입니다.</param>
      <param name="request">이 결과를 초래한 요청 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.#ctor(System.Collections.Generic.IEnumerable{System.Net.Http.Headers.AuthenticationHeaderValue},System.Web.Http.ApiController)">
      <summary>
        <see cref="T:System.Web.Http.Results.StatusCodeResult" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
      <param name="challenges">WWW-Authenticate 챌린지입니다.</param>
      <param name="controller">실행에 필요한 종속성을 가져올 컨트롤러입니다.</param>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Challenges">
      <summary>WWW-Authenticate 챌린지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Collections.Generic.IEnumerable`1" />을 반환합니다.</returns>
    </member>
    <member name="M:System.Web.Http.Results.UnauthorizedResult.ExecuteAsync(System.Threading.CancellationToken)">
      <returns>
        <see cref="T:System.Threading.Tasks.Task`1" />을 반환합니다.</returns>
    </member>
    <member name="P:System.Web.Http.Results.UnauthorizedResult.Request">
      <summary>이 결과를 초래한 요청 메시지를 가져옵니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpRequestMessage" />을 반환합니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultDirectRouteProvider">
      <summary>기본 <see cref="T:System.Web.Http.Routing.IDirectRouteProvider" /> 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.#ctor"></member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionDirectRoutes(System.Web.Http.Controllers.HttpActionDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>제공된 팩터리 및 작업에 따라 <see cref="T:System.Web.Http.Routing.RouteEntry" /> 인스턴스를 만듭니다.경로 항목은 제공된 작업에 대한 직접 라우팅을 제공합니다.</summary>
      <returns>경로 항목 집합입니다.</returns>
      <param name="actionDescriptor">작업 설명자입니다.</param>
      <param name="factories">직접 경로 팩터리입니다.</param>
      <param name="constraintResolver">제약 조건 확인자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetActionRouteFactories(System.Web.Http.Controllers.HttpActionDescriptor)">
      <summary>지정된 작업 설명자의 경로 팩터리 집합을 가져옵니다.</summary>
      <returns>경로 팩터리 집합입니다.</returns>
      <param name="actionDescriptor">작업 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Collections.Generic.IReadOnlyList{System.Web.Http.Routing.IDirectRouteFactory},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>제공된 팩터리, 컨트롤러 및 작업에 따라 <see cref="T:System.Web.Http.Routing.RouteEntry" /> 인스턴스를 만듭니다.경로 항목은 제공된 컨트롤러에 대한 직접 라우팅을 제공하며 제공된 작업 집합에 도달할 수 있습니다.</summary>
      <returns>경로 항목 집합입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="actionDescriptors">작업 설명자입니다.</param>
      <param name="factories">직접 경로 팩터리입니다.</param>
      <param name="constraintResolver">제약 조건 확인자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetControllerRouteFactories(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>지정된 컨트롤러 설명자의 경로 팩터리를 가져옵니다.</summary>
      <returns>경로 팩터리 집합입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>
        <see cref="T:System.Web.Http.Routing.IDirectRouteFactory" /> 특성에 따라 지정된 컨트롤러 설명자 및 작업 설명자의 직접 경로를 가져옵니다.</summary>
      <returns>경로 항목 집합입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="actionDescriptors">모든 작업에 대한 작업 설명자입니다.</param>
      <param name="constraintResolver">제약 조건 확인자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultDirectRouteProvider.GetRoutePrefix(System.Web.Http.Controllers.HttpControllerDescriptor)">
      <summary>제공된 컨트롤러에서 경로 접두사를 가져옵니다.</summary>
      <returns>경로 접두사 또는 null입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.DefaultInlineConstraintResolver">
      <summary>기본 <see cref="T:System.Web.Http.Routing.IInlineConstraintResolver" /> 구현입니다.제약 조건 키 및 제약 조건 인수를 구문 분석하고, 맵을 사용하여 제약 조건 형식을 확인하며, 제약 조건 형식의 해당 생성자를 호출하여 제약 조건을 확인합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.DefaultInlineConstraintResolver" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.DefaultInlineConstraintResolver.ConstraintMap">
      <summary> 제약 조건 키를 특정 제약 조건 형식에 매핑하는 변경 가능한 사전을 가져옵니다. </summary>
      <returns>제약 조건 키를 특정 제약 조건 형식에 매핑하는 변경 가능한 사전입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DefaultInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary>인라인 제약 조건을 확인합니다.</summary>
      <returns>인라인 제약 조건을 확인한 <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />입니다.</returns>
      <param name="inlineConstraint">확인할 인라인 제약 조건입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.DirectRouteFactoryContext">
      <summary>직접 경로를 만들 수 있는 컨텍스트를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.#ctor(System.String,System.Collections.Generic.IReadOnlyCollection{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver,System.Boolean)">
      <summary>
        <see cref="T:System.Web.Http.Routing.DirectRouteFactoryContext" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="prefix">있는 경우 컨트롤러에서 정의된 경로 접두사입니다.</param>
      <param name="actions">경로를 만들 작업 설명자입니다.</param>
      <param name="inlineConstraintResolver">인라인 제약 조건 확인자입니다.</param>
      <param name="targetIsAction">경로가 작업 수준에서 구성되었는지 또는 컨트롤러 수준에서 구성되었는지를 나타내는 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Actions">
      <summary>경로를 만들 작업 설명자를 가져옵니다.</summary>
      <returns>경로를 만들 작업 설명자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String)">
      <summary>이 컨텍스트와 일치하는 경로를 작성할 수 있는 경로 빌더를 만듭니다.</summary>
      <returns>이 컨텍스트와 일치하는 경로를 작성할 수 있는 경로 빌더입니다.</returns>
      <param name="template">경로 템플릿입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.DirectRouteFactoryContext.CreateBuilder(System.String,System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>이 컨텍스트와 일치하는 경로를 작성할 수 있는 경로 빌더를 만듭니다.</summary>
      <returns>이 컨텍스트와 일치하는 경로를 작성할 수 있는 경로 빌더입니다.</returns>
      <param name="template">경로 템플릿입니다.</param>
      <param name="constraintResolver">있는 경우 사용할 인라인 제약 조건 확인자이고, 그렇지 않으면 null입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.InlineConstraintResolver">
      <summary>인라인 제약 조건 확인자를 가져옵니다.</summary>
      <returns>인라인 제약 조건 확인자입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.Prefix">
      <summary>있는 경우 컨트롤러에서 정의된 경로 접두사를 가져옵니다.</summary>
      <returns>있는 경우 컨트롤러에서 정의된 경로 접두사입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.DirectRouteFactoryContext.TargetIsAction">
      <summary>경로가 작업 수준에서 구성되었는지 또는 컨트롤러 수준에서 구성되었는지를 나타내는 값을 가져옵니다.</summary>
      <returns>경로가 작업 수준에서 구성된 경우 true이고, 그렇지 않으면(경로가 컨트롤러 수준에서 구성된 경우) false입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpMethodConstraint">
      <summary>ASP.NET 라우팅에서 URL이 경로와 일치하는지 확인할 때 허용되는 HTTP 동사를 정의할 수 있습니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.#ctor(System.Net.Http.HttpMethod[])">
      <summary>경로에 허용되는 HTTP 동사를 사용하여 <see cref="T:System.Web.Http.Routing.HttpMethodConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="allowedMethods">경로에 대해 유효한 HTTP 동사입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpMethodConstraint.AllowedMethods">
      <summary>경로에 대해 허용되는 HTTP 동사 컬렉션을 가져오거나 설정합니다.</summary>
      <returns>경로에 대해 허용되는 HTTP 동사 컬렉션입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>요청을 수행할 때 경로에 대해 허용되는 동사 중 하나인 HTTP 동사가 사용되었는지를 확인합니다.</summary>
      <returns>ASP.NET 라우팅에서 요청을 처리 중일 때는 허용되는 HTTP 동사를 사용하여 요청을 수행했으면 true이고, 그렇지 않으면 false입니다. ASP.NET 라우팅에서 URL을 생성 중일 때는 제공된 값이 허용되는 HTTP 동사 중 하나와 일치하는 HTTP 동사를 포함하면 true이고, 그렇지 않으면 false입니다. 기본값은 true입니다.</returns>
      <param name="request">URL과 일치하는지를 확인 중인 요청입니다.</param>
      <param name="route">URL과 일치하는지를 확인 중인 개체입니다.</param>
      <param name="parameterName">확인 중인 매개 변수의 이름입니다.</param>
      <param name="values">경로의 매개 변수가 들어 있는 개체입니다.</param>
      <param name="routeDirection">들어오는 요청을 처리할 때 또는 URL을 생성할 때 제약 조건 확인을 수행 중인지를 나타내는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpMethodConstraint.System#Web#Http#Routing#IHttpRouteConstraint#Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>요청을 수행할 때 경로에 대해 허용되는 동사 중 하나인 HTTP 동사가 사용되었는지를 확인합니다.</summary>
      <returns>ASP.NET 라우팅에서 요청을 처리 중일 때는 허용되는 HTTP 동사를 사용하여 요청을 수행했으면 true이고, 그렇지 않으면 false입니다. ASP.NET 라우팅에서 URL을 생성 중일 때는 제공된 값이 허용되는 HTTP 동사 중 하나와 일치하는 HTTP 동사를 포함하면 true이고, 그렇지 않으면 false입니다. 기본값은 true입니다.</returns>
      <param name="request">URL과 일치하는지를 확인 중인 요청입니다.</param>
      <param name="route">URL과 일치하는지를 확인 중인 개체입니다.</param>
      <param name="parameterName">확인 중인 매개 변수의 이름입니다.</param>
      <param name="values">경로의 매개 변수가 들어 있는 개체입니다.</param>
      <param name="routeDirection">들어오는 요청을 처리할 때 또는 URL을 생성할 때 제약 조건 확인을 수행 중인지를 나타내는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRoute">
      <summary>자가 호스트(즉,ASP.NET 외부에서 호스팅)를 위한 경로 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">경로 매개 변수의 기본값입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">경로 매개 변수의 기본값입니다.</param>
      <param name="constraints">경로 매개 변수에 대한 제약 조건입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">경로 매개 변수의 기본값입니다.</param>
      <param name="constraints">경로 매개 변수에 대한 제약 조건입니다.</param>
      <param name="dataTokens">경로 매개 변수에 대한 추가 토큰입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.#ctor(System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteValueDictionary,System.Net.Http.HttpMessageHandler)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRoute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="routeTemplate">경로 템플릿입니다.</param>
      <param name="defaults">경로 매개 변수의 기본값입니다.</param>
      <param name="constraints">경로 매개 변수에 대한 제약 조건입니다.</param>
      <param name="dataTokens">경로 매개 변수에 대한 추가 토큰입니다.</param>
      <param name="handler">요청의 수신자가 될 메시지 처리기입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Constraints">
      <summary>경로 매개 변수에 대한 제약 조건을 가져옵니다.</summary>
      <returns>경로 매개 변수에 대한 제약 조건입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.DataTokens">
      <summary>경로가 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />와 일치하는지 여부를 확인하는 데 직접 사용되지 않는 추가 데이터 토큰을 가져옵니다.</summary>
      <returns>경로가 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />와 일치하는지 여부를 확인하는 데 직접 사용되지 않는 추가 데이터 토큰입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Defaults">
      <summary>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />에서 제공하지 않는 경우 경로 매개 변수의 기본값을 가져옵니다.</summary>
      <returns>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />에서 제공하지 않는 경우 경로 매개 변수의 기본값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary>경로에 대한 <see cref="T:System.Web.Http.Routing.HttpRouteData" />를 검색하여 이 경로가 들어오는 요청과 일치하는지 여부를 확인합니다.</summary>
      <returns>일치하면 경로에 대한 <see cref="T:System.Web.Http.Routing.HttpRouteData" />이고, 그렇지 않으면 null입니다.</returns>
      <param name="virtualPathRoot">가상 경로 루트입니다.</param>
      <param name="request">HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" />의 현재 값 및 지정된 <see cref="T:System.Web.Http.Routing.HttpRoute" />를 사용하는 새 값을 기준으로 전달된 값을 나타내는 URI를 생성하려고 시도합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> 인스턴스이거나, URI를 생성할 수 없는 경우 null입니다.</returns>
      <param name="request">HTTP 요청 메시지입니다.</param>
      <param name="values">경로 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.Handler">
      <summary>http 경로 처리기를 가져오거나 설정합니다.</summary>
      <returns>http 경로 처리기입니다.</returns>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRoute.HttpRouteKey">
      <summary>HTTP 경로 키를 지정합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRoute.ProcessConstraint(System.Net.Http.HttpRequestMessage,System.Object,System.String,System.Web.Http.Routing.HttpRouteValueDictionary,System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">HTTP 요청입니다.</param>
      <param name="constraint">경로 매개 변수에 대한 제약 조건입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">
        <see cref="System.Web.Http.Routing.HttpRouteDirection" /> 열거형의 열거형 값 중 하나입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRoute.RouteTemplate">
      <summary>일치 기준으로 사용할 URI 패턴을 설명하는 경로 템플릿을 가져옵니다.</summary>
      <returns>일치 기준으로 사용할 URI 패턴을 설명하는 경로 템플릿입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteData">
      <summary>HTTP 경로에 대한 정보를 캡슐화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="route">경로를 정의하는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteData.#ctor(System.Web.Http.Routing.IHttpRoute,System.Web.Http.Routing.HttpRouteValueDictionary)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="route">경로를 정의하는 개체입니다.</param>
      <param name="values">값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Route">
      <summary>경로를 나타내는 개체를 가져옵니다.</summary>
      <returns>경로를 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpRouteData.Values">
      <summary>경로의 기본값과 URL 매개 변수 값의 컬렉션을 가져옵니다.</summary>
      <returns>URL과 기본값에서 구문 분석되는 값이 포함된 개체입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDataExtensions">
      <summary>경로 데이터의 값이 없는 선택적 매개 변수를 모두 제거합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.GetSubRoutes(System.Web.Http.Routing.IHttpRouteData)">
      <summary>경로가 다른 경로의 조합인 경우 하위 경로 집합을 반환합니다.</summary>
      <returns>이 경로에 포함된 하위 경로 집합을 반환합니다.</returns>
      <param name="routeData">조합 경로 데이터입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteDataExtensions.RemoveOptionalRoutingParameters(System.Web.Http.Routing.IHttpRouteData)">
      <summary>경로 데이터의 값이 없는 선택적 매개 변수를 모두 제거합니다.</summary>
      <param name="routeData">내부적으로 변환되는 경로 데이터입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteDirection">
      <summary>경로 방향의 열거형을 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriGeneration">
      <summary>UriGeneration 방향입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Routing.HttpRouteDirection.UriResolution">
      <summary>UriResolution 방향입니다.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.HttpRouteValueDictionary">
      <summary>지정된 키/값 쌍의 자가 호스트에 대한 경로 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="dictionary">사전입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.HttpRouteValueDictionary.#ctor(System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpRouteValueDictionary" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values">키 값입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.HttpVirtualPathData">
      <summary>HTTP 가상 경로에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.HttpVirtualPathData.#ctor(System.Web.Http.Routing.IHttpRoute,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.HttpVirtualPathData" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="route">가상 경로의 경로입니다.</param>
      <param name="virtualPath">경로 정의에서 만든 URL입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.Route">
      <summary>가상 경로의 경로를 가져오거나 설정합니다.</summary>
      <returns>가상 경로의 경로입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.HttpVirtualPathData.VirtualPath">
      <summary>경로 정의에서 만든 URL을 가져오거나 설정합니다.</summary>
      <returns>경로 정의에서 만든 URL입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteBuilder">
      <summary>작업에 대한 직접 경로(특성 경로)를 만드는 빌더를 정의합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Actions">
      <summary>경로를 만들 작업 설명자를 가져옵니다.</summary>
      <returns>경로를 만들 작업 설명자입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteBuilder.Build">
      <summary>현재 속성 값을 기반으로 경로 항목을 만듭니다.</summary>
      <returns>만들어진 경로 항목입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Constraints">
      <summary>경로 제약 조건을 가져오거나 설정합니다.</summary>
      <returns>경로 제약 조건입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.DataTokens">
      <summary>경로 데이터 토큰을 가져오거나 설정합니다.</summary>
      <returns>경로 데이터 토큰입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Defaults">
      <summary>경로 기본값을 가져오거나 설정합니다.</summary>
      <returns>경로 기본값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Name">
      <summary>있는 경우 경로 이름을 가져오거나 설정하고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 이름이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Order">
      <summary>경로 순서를 가져오거나 설정합니다.</summary>
      <returns>경로 순서입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Precedence">
      <summary>경로 우선 순위를 가져오거나 설정합니다.</summary>
      <returns>경로 우선 순위입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.TargetIsAction">
      <summary>경로가 작업 수준에서 구성되었는지 또는 컨트롤러 수준에서 구성되었는지를 나타내는 값을 가져옵니다.</summary>
      <returns>경로가 작업 수준에서 구성된 경우 true이고, 그렇지 않으면(경로가 컨트롤러 수준에서 구성된 경우) false입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IDirectRouteBuilder.Template">
      <summary>경로 템플릿을 가져오거나 설정합니다.</summary>
      <returns>경로 템플릿입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteFactory">
      <summary>작업 설명자 집합에 대한 직접 경로(특성 경로)를 만드는 팩터리를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteFactory.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>직접 경로 항목을 만듭니다.</summary>
      <returns>직접 경로 항목입니다.</returns>
      <param name="context">경로를 만드는 데 사용되는 컨텍스트입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IDirectRouteProvider">
      <summary>작업 설명자(특성 경로)를 직접 대상으로 하는 경로의 공급자를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IDirectRouteProvider.GetDirectRoutes(System.Web.Http.Controllers.HttpControllerDescriptor,System.Collections.Generic.IReadOnlyList{System.Web.Http.Controllers.HttpActionDescriptor},System.Web.Http.Routing.IInlineConstraintResolver)">
      <summary>컨트롤러의 직접 경로를 가져옵니다.</summary>
      <returns>컨트롤러의 경로 항목 집합입니다.</returns>
      <param name="controllerDescriptor">컨트롤러 설명자입니다.</param>
      <param name="actionDescriptors">작업 설명자입니다.</param>
      <param name="constraintResolver">인라인 제약 조건 확인자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRoute">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRoute" />는 경로에 대한 인터페이스를 정의하여 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />를 특정 컨트롤러와 작업에 매핑하는 방법을 나타냅니다. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Constraints">
      <summary> 경로 매개 변수에 대한 제약 조건을 가져옵니다. </summary>
      <returns>경로 매개 변수에 대한 제약 조건입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.DataTokens">
      <summary> 경로가 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />와 일치하는지 여부를 확인하는 데 직접 사용되지 않는 추가 데이터 토큰을 가져옵니다. </summary>
      <returns>추가 데이터 토큰입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Defaults">
      <summary> 들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />에서 제공하지 않는 경우 경로 매개 변수의 기본값을 가져옵니다. </summary>
      <returns>경로 매개 변수의 기본값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetRouteData(System.String,System.Net.Http.HttpRequestMessage)">
      <summary> 경로에 대한 &lt;see cref="!:IRouteData" /&gt;를 검색하여 이 경로가 들어오는 요청과 일치하는지 여부를 확인합니다. </summary>
      <returns>일치하면 경로의 &lt;see cref="!:RouteData" /&gt;이고, 그렇지 않으면 null입니다.</returns>
      <param name="virtualPathRoot">가상 경로 루트입니다.</param>
      <param name="request">요청입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRoute.GetVirtualPath(System.Net.Http.HttpRequestMessage,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>경로 및 제공된 값을 기반으로 가상 경로 데이터를 가져옵니다.</summary>
      <returns>가상 경로 데이터입니다.</returns>
      <param name="request">요청 메시지입니다.</param>
      <param name="values">값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.Handler">
      <summary>요청의 수신자가 될 메시지 처리기를 가져옵니다.</summary>
      <returns>메시지 처리기입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRoute.RouteTemplate">
      <summary> 일치 기준으로 사용할 URI 패턴을 설명하는 경로 템플릿을 가져옵니다.  </summary>
      <returns>경로 템플릿입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteConstraint">
      <summary>기본 클래스 경로 제약 조건을 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.IHttpRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteData">
      <summary>경로에 대한 정보를 제공합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Route">
      <summary>경로를 나타내는 개체를 가져옵니다.</summary>
      <returns>경로를 나타내는 개체입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteData.Values">
      <summary>경로의 기본값과 URL 매개 변수 값의 컬렉션을 가져옵니다.</summary>
      <returns>URL 및 기본값에서 구문 분석된 값입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpRouteInfoProvider">
      <summary> 경로 정의에 필요한 정보를 제공합니다. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Name">
      <summary> 생성할 경로의 이름을 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Order">
      <summary> 다른 경로와 상대적인 경로 순서를 가져옵니다. </summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpRouteInfoProvider.Template">
      <summary> 일치 기준으로 사용할 URI 패턴을 설명하는 경로 템플릿을 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.Routing.IHttpVirtualPathData">
      <summary>HTTP 경로에 대한 속성을 정의합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.Route">
      <summary>HTTP 경로를 가져옵니다.</summary>
      <returns>HTTP 경로입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.IHttpVirtualPathData.VirtualPath">
      <summary>현재 HTTP 경로의 가상 경로를 나타내는 URI를 가져옵니다.</summary>
      <returns>현재 HTTP 경로의 가상 경로를 나타내는 URI입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.IInlineConstraintResolver">
      <summary>
        <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" /> 인스턴스로 인라인 제약 조건을 확인하는 추상화를 정의합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.IInlineConstraintResolver.ResolveConstraint(System.String)">
      <summary> 인라인 제약 조건을 확인합니다. </summary>
      <returns>인라인 제약 조건을 확인한 <see cref="T:System.Web.Http.Routing.IHttpRouteConstraint" />입니다.</returns>
      <param name="inlineConstraint">확인할 인라인 제약 조건입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.IRoutePrefix">
      <summary>경로 접두사를 정의합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Routing.IRoutePrefix.Prefix">
      <summary>경로 접두사를 가져옵니다.</summary>
      <returns>경로 접두사입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteEntry">
      <summary>명명된 경로를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteEntry.#ctor(System.String,System.Web.Http.Routing.IHttpRoute)">
      <summary>
        <see cref="T:System.Web.Http.Routing.RouteEntry" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="name">있는 경우 경로 이름이고, 그렇지 않으면 null입니다.</param>
      <param name="route">경로입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Name">
      <summary>있는 경우 경로 이름을 가져오고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 이름이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteEntry.Route">
      <summary>경로를 가져옵니다.</summary>
      <returns>경로입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.RouteFactoryAttribute">
      <summary>사용자 지정 제약 조건을 포함할 수 있는 특성 경로를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.RouteFactoryAttribute" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="template">경로 템플릿입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Constraints">
      <summary>있는 경우 경로 제약 조건을 가져오고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 제약 조건이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.RouteFactoryAttribute.CreateRoute(System.Web.Http.Routing.DirectRouteFactoryContext)">
      <summary>경로 항목을 만듭니다.</summary>
      <returns>만들어진 경로 항목입니다.</returns>
      <param name="context">컨텍스트입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.DataTokens">
      <summary>있는 경우 경로 데이터 토큰을 가져오고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 데이터 토큰이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Defaults">
      <summary>있는 경우 경로 기본값을 가져오고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 기본값이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Name">
      <summary>있는 경우 경로 이름을 가져오거나 설정하고, 그렇지 않으면 null입니다.</summary>
      <returns>있는 경우 경로 이름이고, 그렇지 않으면 null입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Order">
      <summary>경로 순서를 가져오거나 설정합니다.</summary>
      <returns>경로 순서입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.RouteFactoryAttribute.Template">
      <summary>경로 템플릿을 가져옵니다.</summary>
      <returns>경로 템플릿입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.StopRoutingHandler">
      <summary>라우팅을 지정하는 처리기가 경로 템플릿에 대한 요청을 처리하지 않음을 나타냅니다.경로가 이 클래스를 처리기로 제공하는 경우 이 경로와 일치하는 요청이 무시됩니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.StopRoutingHandler.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.StopRoutingHandler" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.UrlHelper">
      <summary>URL을 만들기 위한 팩터리를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> 클래스의 새 인스턴스를 초기화합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.#ctor(System.Net.Http.HttpRequestMessage)">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">이 인스턴스의 HTTP 요청입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Content(System.String)">
      <summary>지정된 경로를 사용하여 절대 URL을 만듭니다.</summary>
      <returns>생성된 URL입니다.</returns>
      <param name="path">상대 URL, 루트 URL 또는 가상 경로일 수 있는 URL 경로입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>지정된 경로에 대한 링크를 반환합니다.</summary>
      <returns>지정된 경로에 대한 링크입니다.</returns>
      <param name="routeName">경로의 이름입니다.</param>
      <param name="routeValues">경로의 매개 변수가 들어 있는 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Link(System.String,System.Object)">
      <summary>지정된 경로에 대한 링크를 반환합니다.</summary>
      <returns>지정된 경로에 대한 링크입니다.</returns>
      <param name="routeName">경로의 이름입니다.</param>
      <param name="routeValues">경로 값입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.UrlHelper.Request">
      <summary>현재 <see cref="T:System.Web.Http.Routing.UrlHelper" /> 인스턴스의 <see cref="T:System.Net.Http.HttpRequestMessage" />를 가져오거나 설정합니다.</summary>
      <returns>현재 인스턴스의 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Collections.Generic.IDictionary{System.String,System.Object})">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />에 대한 경로를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />에 대한 경로입니다.</returns>
      <param name="routeName">경로의 이름입니다.</param>
      <param name="routeValues">경로 값의 목록입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.UrlHelper.Route(System.String,System.Object)">
      <summary>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />에 대한 경로를 반환합니다.</summary>
      <returns>
        <see cref="T:System.Web.Http.Routing.UrlHelper" />에 대한 경로입니다.</returns>
      <param name="routeName">경로의 이름입니다.</param>
      <param name="routeValues">경로 값입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint">
      <summary>영어 알파벳 A부터 Z까지의 소문자 또는 대문자만 포함하도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.AlphaRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.AlphaRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint">
      <summary>부울 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.BoolRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.BoolRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint">
      <summary>여러 자식 제약 조건으로 경로를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.#ctor(System.Collections.Generic.IList{System.Web.Http.Routing.IHttpRouteConstraint})">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.CompoundRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="constraints">일치시킬 이 제약 조건에 대해 일치해야 하는 자식 제약 조건입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Constraints">
      <summary>일치시킬 이 제약 조건에 대해 일치해야 하는 자식 제약 조건을 가져옵니다.</summary>
      <returns>일치시킬 이 제약 조건에 대해 일치해야 하는 자식 제약 조건입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.CompoundRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint">
      <summary>
        <see cref="T:System.DateTime" /> 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DateTimeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint">
      <summary>10진수 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.DecimalRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DecimalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.DoubleRouteConstraint">
      <summary>64비트 부동 소수점 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.DoubleRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.FloatRouteConstraint">
      <summary>32비트 부동 소수점 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.FloatRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint">
      <summary>
        <see cref="T:System.Guid" /> 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.GuidRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.GuidRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.IntRouteConstraint">
      <summary>32비트 정수 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.IntRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.IntRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint">
      <summary>지정된 길이 또는 지정된 길이 범위 내의 문자열이 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.#ctor(System.Int32,System.Int32)">
      <summary>지정된 길이의 문자열이 되도록 경로 매개 변수를 제한하는 <see cref="T:System.Web.Http.Routing.Constraints.LengthRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="minLength">경로 매개 변수의 최소 길이입니다.</param>
      <param name="maxLength">경로 매개 변수의 최대 길이입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Length">
      <summary>경로 매개 변수의 길이를 가져옵니다(설정된 경우).</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MaxLength">
      <summary>경로 매개 변수의 최대 길이를 가져옵니다(설정된 경우).</summary>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.LengthRouteConstraint.MinLength">
      <summary>경로 매개 변수의 최소 길이를 가져옵니다(설정된 경우).</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.LongRouteConstraint">
      <summary>64비트 정수 값만 나타내도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.#ctor"></member>
    <member name="M:System.Web.Http.Routing.Constraints.LongRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint">
      <summary>최대 길이를 사용하는 문자열이 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="maxLength">최대 길이입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxLengthRouteConstraint.MaxLength">
      <summary>경로 매개 변수의 최대 길이를 가져옵니다.</summary>
      <returns>경로 매개 변수의 최대 길이입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MaxRouteConstraint">
      <summary>최대값을 사용하는 정수가 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.#ctor(System.Int64)"></member>
    <member name="M:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)"></member>
    <member name="P:System.Web.Http.Routing.Constraints.MaxRouteConstraint.Max">
      <summary>경로 매개 변수의 최대값을 가져옵니다.</summary>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint">
      <summary>최대 길이를 사용하는 문자열이 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.#ctor(System.Int32)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="minLength">최소 길이입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinLengthRouteConstraint.MinLength">
      <summary>경로 매개 변수의 최소 길이를 가져옵니다.</summary>
      <returns>경로 매개 변수의 최소 길이입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.MinRouteConstraint">
      <summary>최소값을 사용하는 Long이 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.#ctor(System.Int64)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.MinRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="min">경로 매개 변수의 최소값입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.MinRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.MinRouteConstraint.Min">
      <summary>경로 매개 변수의 최소값을 가져옵니다.</summary>
      <returns>경로 매개 변수의 최소값입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint">
      <summary>선택적 매개 변수가 기본값으로 설정된 경우 실패하지 않는 내부 제약 조건으로 경로를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.#ctor(System.Web.Http.Routing.IHttpRouteConstraint)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.OptionalRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="innerConstraint">매개 변수가 값이 없는 선택적 매개 변수가 아닌 경우에 일치시킬 내부 제약 조건입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.InnerConstraint">
      <summary>매개 변수가 값이 없는 선택적 매개 변수가 아닌 경우에 일치시킬 내부 제약 조건을 가져옵니다.</summary>
      <returns>매개 변수가 값이 없는 선택적 매개 변수가 아닌 경우에 일치시킬 내부 제약 조건입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.OptionalRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint">
      <summary>지정된 값 범위 내의 정수가 되도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.#ctor(System.Int64,System.Int64)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.RangeRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="min">최소값입니다.</param>
      <param name="max">최대값입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Max">
      <summary>경로 매개 변수의 최대값을 가져옵니다.</summary>
      <returns>경로 매개 변수의 최대값입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RangeRouteConstraint.Min">
      <summary>경로 매개 변수의 최소값을 가져옵니다.</summary>
      <returns>경로 매개 변수의 최소값입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint">
      <summary>정규식과 일치하도록 경로 매개 변수를 제한합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.#ctor(System.String)">
      <summary>
        <see cref="T:System.Web.Http.Routing.Constraints.RegexRouteConstraint" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="pattern">패턴입니다.</param>
    </member>
    <member name="M:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Match(System.Net.Http.HttpRequestMessage,System.Web.Http.Routing.IHttpRoute,System.String,System.Collections.Generic.IDictionary{System.String,System.Object},System.Web.Http.Routing.HttpRouteDirection)">
      <summary>이 인스턴스가 지정된 경로와 같은지 여부를 확인합니다.</summary>
      <returns>이 인스턴스가 지정된 경로와 같으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="request">요청입니다.</param>
      <param name="route">비교할 경로입니다.</param>
      <param name="parameterName">매개 변수의 이름입니다.</param>
      <param name="values">매개 변수 값의 목록입니다.</param>
      <param name="routeDirection">경로 방향입니다.</param>
    </member>
    <member name="P:System.Web.Http.Routing.Constraints.RegexRouteConstraint.Pattern">
      <summary>일치시킬 정규식 패턴을 가져옵니다.</summary>
      <returns>일치시킬 정규식 패턴입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Services.Decorator">
      <summary> &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;로 래핑할 수 있는 개체의 가장 안쪽 개체를 검색하는 메서드를 제공합니다. </summary>
    </member>
    <member name="M:System.Web.Http.Services.Decorator.GetInner``1(``0)">
      <summary> &lt;see cref="T:System.Web.Http.Services.IDecorator`1" /&gt;를 구현하지 않는 가장 안쪽 개체를 가져옵니다. </summary>
      <param name="outer">래핑 해제해야 하는 개체입니다.</param>
      <typeparam name="T"></typeparam>
    </member>
    <member name="T:System.Web.Http.Services.DefaultServices">
      <summary>
        <see cref="T:System.Web.Http.HttpConfiguration" />에서 사용하는 서비스 인스턴스의 컨테이너를 나타냅니다.이 컨테이너는 알려진 유형만 지원하므로 임의 서비스 유형을 가져오거나 설정하는 메서드를 호출하면 <see cref="T:System.ArgumentException" />이 발생합니다.임의 유형을 만들 때는 대신 <see cref="T:System.Web.Http.Dependencies.IDependencyResolver" />를 사용하십시오.이 컨테이너에 대해 지원되는 유형은 다음과 같습니다.        <see cref="T:System.Web.Http.Controllers.IActionValueBinder" /><see cref="T:System.Web.Http.Description.IApiExplorer" /><see cref="T:System.Web.Http.Dispatcher.IAssembliesResolver" /><see cref="T:System.Web.Http.Validation.IBodyModelValidator" /><see cref="T:System.Net.Http.Formatting.IContentNegotiator" /><see cref="T:System.Web.Http.Description.IDocumentationProvider" /><see cref="T:System.Web.Http.Filters.IFilterProvider" /><see cref="T:System.Web.Http.Hosting.IHostBufferPolicySelector" /><see cref="T:System.Web.Http.Controllers.IHttpActionInvoker" /><see cref="T:System.Web.Http.Controllers.IHttpActionSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerActivator" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerSelector" /><see cref="T:System.Web.Http.Dispatcher.IHttpControllerTypeResolver" /><see cref="T:System.Web.Http.Tracing.ITraceManager" /><see cref="T:System.Web.Http.Tracing.ITraceWriter" /><see cref="T:System.Web.Http.Query.IStructuredQueryBuilder" /><see cref="T:System.Web.Http.ModelBinding.ModelBinderProvider" /><see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" /><see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /><see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />이 목록에 없는 임의 유형을 이 인터페이스의 임의 메서드로 전달하면 <see cref="T:System.ArgumentException" />이 발생합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Services.DefaultServices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.#ctor(System.Web.Http.HttpConfiguration)">
      <summary>지정된 <see cref="T:System.Web.Http.HttpConfiguration" /> 개체를 사용하여 <see cref="T:System.Web.Http.Services.DefaultServices" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="configuration">
        <see cref="T:System.Web.Http.HttpConfiguration" /> 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ClearSingle(System.Type)">
      <summary>기본 서비스에서 단일 인스턴스 서비스를 제거합니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetService(System.Type)">
      <summary>지정된 유형의 서비스를 가져옵니다.</summary>
      <returns>서비스의 첫 번째 인스턴스이거나, 서비스를 찾을 수 없는 경우 null입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServiceInstances(System.Type)">
      <summary>지정된 서비스 유형에 대한 서비스 개체 목록을 가져오고 서비스 유형의 유효성을 검사합니다.</summary>
      <returns>지정된 유형의 서비스 개체 목록입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.GetServices(System.Type)">
      <summary>지정된 서비스 유형에 대한 서비스 개체 목록을 가져옵니다.</summary>
      <returns>지정된 유형의 서비스 개체 목록이거나, 서비스를 찾을 수 없는 경우 빈 목록입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.IsSingleService(System.Type)">
      <summary>서비스 유형이 단일 인스턴스인지 쿼리합니다.</summary>
      <returns>서비스 유형에 최대 하나의 인스턴스가 있으면 true이고, 서비스 유형이 여러 인스턴스를 지원하면 false입니다.</returns>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ReplaceSingle(System.Type,System.Object)">
      <summary>단일 인스턴스 서비스 개체를 바꿉니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
      <param name="service">이전 인스턴스를 바꾸는 서비스 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.Services.DefaultServices.ResetCache(System.Type)">
      <summary>단일 서비스 유형에 대해 캐시된 값을 제거합니다.</summary>
      <param name="serviceType">서비스 유형입니다.</param>
    </member>
    <member name="T:System.Web.Http.Services.IDecorator`1">
      <summary> 데코레이트된 내부 개체를 사용하는 데코레이터를 정의합니다. </summary>
      <typeparam name="T">이 형식 매개 변수는 공변입니다. 즉, 지정한 형식이나 더 많이 파생되는 모든 형식을 사용할 수 있습니다. 공 분산 및 반공 분산에 대한 자세한 내용은 을 참조하십시오.</typeparam>
    </member>
    <member name="P:System.Web.Http.Services.IDecorator`1.Inner">
      <summary> 내부 개체를 가져옵니다. </summary>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceManager">
      <summary>메서드 시작/종료 및 지속 시간을 기록하기 위한 성능 추적 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceManager.Initialize(System.Web.Http.HttpConfiguration)">
      <summary>지정된 구성을 사용하여 <see cref="T:System.Web.Http.Tracing.ITraceManager" /> 클래스를 초기화합니다.</summary>
      <param name="configuration">구성입니다.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriter">
      <summary>추적 기록기를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriter.Trace(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 지정된 범주와 수준에 추적이 허용되는 경우에만 지정된 traceAction을 호출하여 새 <see cref="T:System.Web.Http.Tracing.TraceRecord" />의 설정 값을 허용합니다. </summary>
      <param name="request">현재 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있지만, null일 경우 이후의 추적 분석에서 추적과 특정 요청의 상관 관계를 지정할 수 없습니다.</param>
      <param name="category">추적의 논리적 범주입니다.사용자가 자신만의 논리적 범주를 정의할 수 있습니다.</param>
      <param name="level">이 추적을 기록할 <see cref="T:System.Web.Http.Tracing.TraceLevel" />입니다.</param>
      <param name="traceAction">추적을 사용할 경우 호출할 작업입니다.호출자는 이 작업에 지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />의 필드를 채워야 합니다.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.ITraceWriterExtensions">
      <summary>
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />에 대한 확장 메서드를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>코드 디버깅에 유용한 지정된 기록기, 요청, 범주 및 예외가 포함된 메서드 및 속성 집합을 제공합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>코드 디버깅에 유용한 지정된 기록기, 요청, 범주, 예외, 메시지 형식 및 인수가 포함된 메서드 및 속성 집합을 제공합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Debug(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>코드 디버깅에 유용한 지정된 기록기, 요청, 범주, 예외, 메시지 형식 및 인수가 포함된 메서드 및 속성 집합을 제공합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>지정된 기록기, 요청, 범주 및 예외가 포함된, 목록의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>지정된 기록기, 요청, 범주, 예외, 메시지 형식 및 인수가 포함된, 목록의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">예외입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지의 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Error(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>지정된 기록기, 요청, 범주, 메시지 형식 및 인수가 포함된, 목록의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지의 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>지정된 기록기, 요청, 범주 및 예외가 포함된, <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> 클래스의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 표시되는 예외입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>지정된 기록기, 요청, 범주, 예외, 메시지 형식 및 인수가 포함된, <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> 클래스의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">예외입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Fatal(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>지정된 기록기, 요청, 범주, 메시지 형식 및 인수가 포함된, <see cref="T:System.Web.Http.Tracing.ITraceWriterExtensions" /> 클래스의 오류 메시지를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />의 세부 정보를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />의 세부 정보를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Info(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>
        <see cref="System.Web.Http.Tracing.ITraceWriterExtensions" />의 세부 정보를 표시합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception)">
      <summary>수신기 컬렉션의 추적 수신기를 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적 수준입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.Exception,System.String,System.Object[])">
      <summary>수신기 컬렉션의 추적 수신기를 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적 수준입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Trace(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.Object[])">
      <summary>수신기 컬렉션의 추적 수신기를 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적의 <see cref="T:System.Web.Http.Tracing.TraceLevel" />입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEnd(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action,System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary>지정된 작업을 중심으로 시작 추적과 끝 추적을 모두 추적합니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적의 <see cref="T:System.Web.Http.Tracing.TraceLevel" />입니다.</param>
      <param name="operatorName">작업을 수행 중인 개체의 이름입니다.null일 수 있습니다.</param>
      <param name="operationName">수행 중인 작업의 이름입니다.null일 수 있습니다.</param>
      <param name="beginTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하기 전에 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <param name="execute">작업을 수행할 <see cref="T:System.Threading.Tasks.Task" />를 반환하는 &lt;see cref="T:System.Func`1" /&gt;입니다.</param>
      <param name="endTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행한 후에 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <param name="errorTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하는 동안 오류가 발생하면 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync``1(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task{``0}},System.Action{System.Web.Http.Tracing.TraceRecord,``0},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 지정된 작업을 중심으로 시작 추적과 끝 추적을 모두 추적합니다. </summary>
      <returns>작업에서 반환된 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적의 <see cref="T:System.Web.Http.Tracing.TraceLevel" />입니다.</param>
      <param name="operatorName">작업을 수행 중인 개체의 이름입니다.null일 수 있습니다.</param>
      <param name="operationName">수행 중인 작업의 이름입니다.null일 수 있습니다.</param>
      <param name="beginTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하기 전에 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <param name="execute">작업을 수행할 <see cref="T:System.Threading.Tasks.Task" />를 반환하는 &lt;see cref="T:System.Func`1" /&gt;입니다.</param>
      <param name="endTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행한 후에 호출할 <see cref="T:System.Action" />입니다.완료된 태스크의 결과 또한 이 작업에 전달됩니다.이 작업은 null일 수 있습니다.</param>
      <param name="errorTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하는 동안 오류가 발생하면 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <typeparam name="TResult">
        <see cref="T:System.Threading.Tasks.Task" />에서 생성된 결과 형식입니다.</typeparam>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.TraceBeginEndAsync(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel,System.String,System.String,System.Action{System.Web.Http.Tracing.TraceRecord},System.Func{System.Threading.Tasks.Task},System.Action{System.Web.Http.Tracing.TraceRecord},System.Action{System.Web.Http.Tracing.TraceRecord})">
      <summary> 지정된 작업을 중심으로 시작 추적과 끝 추적을 모두 추적합니다. </summary>
      <returns>작업에서 반환된 <see cref="T:System.Threading.Tasks.Task" />입니다.</returns>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="level">추적의 <see cref="T:System.Web.Http.Tracing.TraceLevel" />입니다.</param>
      <param name="operatorName">작업을 수행 중인 개체의 이름입니다.null일 수 있습니다.</param>
      <param name="operationName">수행 중인 작업의 이름입니다.null일 수 있습니다.</param>
      <param name="beginTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하기 전에 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <param name="execute">작업을 수행할 <see cref="T:System.Threading.Tasks.Task" />를 반환하는 &lt;see cref="T:System.Func`1" /&gt;입니다.</param>
      <param name="endTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행한 후에 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
      <param name="errorTrace">지정된 <see cref="T:System.Web.Http.Tracing.TraceRecord" />를 채울 수 있도록 작업을 수행하는 동안 오류가 발생하면 호출할 <see cref="T:System.Action" />입니다.null일 수 있습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception)">
      <summary>실행의 경고 수준을 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.Exception,System.String,System.Object[])">
      <summary>실행의 경고 수준을 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="exception">실행하는 동안 오류가 발생했습니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="M:System.Web.Http.Tracing.ITraceWriterExtensions.Warn(System.Web.Http.Tracing.ITraceWriter,System.Net.Http.HttpRequestMessage,System.String,System.String,System.Object[])">
      <summary>실행의 경고 수준을 나타냅니다.</summary>
      <param name="traceWriter">
        <see cref="T:System.Web.Http.Tracing.ITraceWriter" />입니다.</param>
      <param name="request">추적과 연관시킬 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.null일 수 있습니다.</param>
      <param name="category">추적의 논리적 범주입니다.</param>
      <param name="messageFormat">메시지의 형식입니다.</param>
      <param name="messageArguments">메시지 인수입니다.</param>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceCategories">
      <summary>추적 범주의 열거형을 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ActionCategory">
      <summary>작업 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ControllersCategory">
      <summary>컨트롤러 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FiltersCategory">
      <summary>필터 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.FormattingCategory">
      <summary>포맷 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.MessageHandlersCategory">
      <summary>메시지 처리기 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.ModelBindingCategory">
      <summary>모델 바인딩 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RequestCategory">
      <summary>요청 범주입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceCategories.RoutingCategory">
      <summary>라우팅 범주입니다.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceKind">
      <summary>추적 작업의 종류를 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Begin">
      <summary>일부 작업의 시작 부분을 표시하는 추적입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.End">
      <summary>일부 작업의 끝 부분을 표시하는 추적입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceKind.Trace">
      <summary>시작/끝 추적 쌍의 일부가 아닌 단일 추적입니다.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceLevel">
      <summary>추적 수준의 열거형을 지정합니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Debug">
      <summary>디버깅 추적의 추적 수준입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Error">
      <summary>오류 추적의 추적 수준입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Fatal">
      <summary>심각한 추적의 추적 수준입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Info">
      <summary>정보 추적의 추적 수준입니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Off">
      <summary>추적을 사용하지 않습니다.</summary>
    </member>
    <member name="F:System.Web.Http.Tracing.TraceLevel.Warn">
      <summary>경고 추적의 추적 수준입니다.</summary>
    </member>
    <member name="T:System.Web.Http.Tracing.TraceRecord">
      <summary>추적 레코드를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Tracing.TraceRecord.#ctor(System.Net.Http.HttpRequestMessage,System.String,System.Web.Http.Tracing.TraceLevel)">
      <summary>
        <see cref="T:System.Web.Http.Tracing.TraceRecord" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="request">메시지 요청입니다.</param>
      <param name="category">추적 범주입니다.</param>
      <param name="level">추적 수준입니다.</param>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Category">
      <summary>추적 범주를 가져오거나 설정합니다.</summary>
      <returns>추적 범주입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Exception">
      <summary>예외를 가져오거나 설정합니다.</summary>
      <returns>예외입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Kind">
      <summary>추적 종류를 가져오거나 설정합니다.</summary>
      <returns>추적 종류입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Level">
      <summary>추적 수준을 가져오거나 설정합니다.</summary>
      <returns>추적 수준입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Message">
      <summary>메시지를 가져오거나 설정합니다.</summary>
      <returns>메시지입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operation">
      <summary>수행 중인 논리 작업 이름을 가져오거나 설정합니다.</summary>
      <returns>수행 중인 논리 작업 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Operator">
      <summary>작업을 수행 중인 개체의 논리 이름을 가져오거나 설정합니다.</summary>
      <returns>작업을 수행 중인 개체의 논리 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Properties">
      <summary>선택적 사용자 정의 속성을 가져옵니다.</summary>
      <returns>선택적 사용자 정의 속성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Request">
      <summary>레코드에서 <see cref="T:System.Net.Http.HttpRequestMessage" />를 가져옵니다.</summary>
      <returns>레코드의 <see cref="T:System.Net.Http.HttpRequestMessage" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.RequestId">
      <summary>
        <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />에서 상관 관계 ID를 가져옵니다.</summary>
      <returns>
        <see cref="P:System.Web.Http.Tracing.TraceRecord.Request" />의 상관 관계 ID입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Status">
      <summary>
        <see cref="T:System.Net.Http.HttpResponseMessage" />와 연관된 <see cref="T:System.Net.HttpStatusCode" />를 가져오거나 설정합니다.</summary>
      <returns>
        <see cref="T:System.Net.Http.HttpResponseMessage" />과 연관된 <see cref="T:System.Net.HttpStatusCode" />입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Tracing.TraceRecord.Timestamp">
      <summary>이 추적의 <see cref="T:System.DateTime" />을 가져옵니다(<see cref="P:System.DateTime.UtcNow" /> 사용).</summary>
      <returns>이 추적의 <see cref="T:System.DateTime" />을 가져옵니다(<see cref="P:System.DateTime.UtcNow" /> 사용).</returns>
    </member>
    <member name="T:System.Web.Http.Validation.DefaultBodyModelValidator">
      <summary>재귀적으로 개체 유효성을 검사하는 데 사용되는 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.DefaultBodyModelValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.ShouldValidateType(System.Type)">
      <summary>특정 인스턴스 유형의 유효성을 검사해야 하는지 확인합니다.</summary>
      <returns>유형의 유효성을 검사해야 하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="type">유효성을 검사할 유형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.DefaultBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>
        <paramref name="model" />이 유효한지 확인하고 유효성 검사 오류가 있으면 <paramref name="actionContext" />의 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />에 추가합니다.</summary>
      <returns>모델이 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="model">유효성을 검사할 모델입니다.</param>
      <param name="type">유효성 검사에 사용할 <see cref="T:System.Type" />입니다.</param>
      <param name="metadataProvider">모델 메타데이터를 제공하는 데 사용되는 <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />입니다.</param>
      <param name="actionContext">모델의 유효성을 검사할 <see cref="T:System.Web.Http.Controllers.HttpActionContext" />입니다.</param>
      <param name="keyPrefix">유효성 검사 오류에 대해 키에 추가할 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.IBodyModelValidator">
      <summary>모델의 유효성 검사용 인터페이스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.IBodyModelValidator.Validate(System.Object,System.Type,System.Web.Http.Metadata.ModelMetadataProvider,System.Web.Http.Controllers.HttpActionContext,System.String)">
      <summary>모델이 유효한지 확인하고 유효성 검사 오류가 있으면 actionContext의 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />에 추가합니다.</summary>
      <returns>모델이 유효하면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="model">유효성을 검사할 모델입니다.</param>
      <param name="type">유효성 검사에 사용할 <see cref="T:System.Type" />입니다.</param>
      <param name="metadataProvider">모델 메타데이터를 제공하는 데 사용되는 <see cref="T:System.Web.Http.Metadata.ModelMetadataProvider" />입니다.</param>
      <param name="actionContext">모델의 유효성을 검사할 <see cref="T:System.Web.Http.Controllers.HttpActionContext" />입니다.</param>
      <param name="keyPrefix">유효성 검사 오류에 대해 키에 추가할 <see cref="T:System.String" />입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelStateFormatterLogger">
      <summary>이 <see cref="T:System.Net.Http.Formatting.IFormatterLogger" />는 제공된 <see cref="T:System.Web.Http.ModelBinding.ModelStateDictionary" />에 포맷터 오류를 기록합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.#ctor(System.Web.Http.ModelBinding.ModelStateDictionary,System.String)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelStateFormatterLogger" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelState">모델 상태입니다.</param>
      <param name="prefix">접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.Exception)">
      <summary>지정된 모델 오류를 기록합니다.</summary>
      <param name="errorPath">오류 경로입니다.</param>
      <param name="exception">오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelStateFormatterLogger.LogError(System.String,System.String)">
      <summary>지정된 모델 오류를 기록합니다.</summary>
      <param name="errorPath">오류 경로입니다.</param>
      <param name="errorMessage">오류 메시지입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatedEventArgs">
      <summary>
        <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validated" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatedEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatedEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="parentNode">상위 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ActionContext">
      <summary>작업에 대한 컨텍스트를 가져오거나 설정합니다.</summary>
      <returns>작업에 대한 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatedEventArgs.ParentNode">
      <summary>이 노드의 상위 노드를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 상위 노드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatingEventArgs">
      <summary>
        <see cref="E:System.Web.Http.Validation.ModelValidationNode.Validating" /> 이벤트에 대한 데이터를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatingEventArgs.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatingEventArgs" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="parentNode">상위 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ActionContext">
      <summary>작업에 대한 컨텍스트를 가져오거나 설정합니다.</summary>
      <returns>작업에 대한 컨텍스트입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidatingEventArgs.ParentNode">
      <summary>이 노드의 상위 노드를 가져오거나 설정합니다.</summary>
      <returns>이 노드의 상위 노드입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationNode">
      <summary>모델 유효성 검사 정보에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String)">
      <summary>모델 메타데이터 및 상태 키를 사용하여 <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelMetadata">모델 메타데이터입니다.</param>
      <param name="modelStateKey">모델 상태 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.#ctor(System.Web.Http.Metadata.ModelMetadata,System.String,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidationNode})">
      <summary>모델 메타데이터, 모델 상태 키 및 하위 모델 유효성 검사 노드를 사용하여 <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="modelMetadata">모델 메타데이터입니다.</param>
      <param name="modelStateKey">모델 상태 키입니다.</param>
      <param name="childNodes">모델 하위 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ChildNodes">
      <summary>하위 노드를 가져오거나 설정합니다.</summary>
      <returns>하위 노드입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.CombineWith(System.Web.Http.Validation.ModelValidationNode)">
      <summary>현재 <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> 인스턴스를 지정된 <see cref="T:System.Web.Http.Validation.ModelValidationNode" /> 인스턴스와 결합합니다.</summary>
      <param name="otherNode">현재 인스턴스와 결합할 모델 유효성 검사 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelMetadata">
      <summary>모델 메타데이터를 가져오거나 설정합니다.</summary>
      <returns>모델 메타데이터입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ModelStateKey">
      <summary>모델 상태 키를 가져오거나 설정합니다.</summary>
      <returns>모델 상태 키입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.SuppressValidation">
      <summary>유효성 검사를 표시하지 않을지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>유효성 검사를 표시하지 않으려면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 실행 컨텍스트를 사용하여 모델 유효성을 검사합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationNode.Validate(System.Web.Http.Controllers.HttpActionContext,System.Web.Http.Validation.ModelValidationNode)">
      <summary>지정된 실행 컨텍스트 및 상위 노드를 사용하여 모델 유효성을 검사합니다.</summary>
      <param name="actionContext">작업 컨텍스트입니다.</param>
      <param name="parentNode">상위 노드입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationNode.ValidateAllProperties">
      <summary>모델의 모든 속성에 대해 유효성을 검사할지를 나타내는 값을 가져오거나 설정합니다.</summary>
      <returns>모델의 모든 속성에 대해 유효성을 검사하려면 true이고, 유효성 검사를 건너뛰려면 false입니다.</returns>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validated">
      <summary>모델 유효성을 검사하고 나면 발생합니다.</summary>
    </member>
    <member name="E:System.Web.Http.Validation.ModelValidationNode.Validating">
      <summary>모델 유효성을 검사하고 있을 때 발생합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector">
      <summary>구성원과 연관된 필수 ModelValidators를 확인하여 필수 구성원을 선택합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.#ctor(System.Web.Http.Metadata.ModelMetadataProvider,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidationRequiredMemberSelector" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="metadataProvider">메타데이터 공급자입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationRequiredMemberSelector.IsRequiredMember(System.Reflection.MemberInfo)">
      <summary>유효성 검사 시 구성원이 필요한지 여부를 나타냅니다.</summary>
      <returns>유효성 검사 시 구성원이 필요한 경우 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="member">구성원입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidationResult">
      <summary>유효성 검사 결과에 대한 컨테이너를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidationResult.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidationResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.MemberName">
      <summary>멤버의 이름을 가져오거나 설정합니다.</summary>
      <returns>멤버의 이름입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidationResult.Message">
      <summary>유효성 검사 결과 메시지를 가져오거나 설정합니다.</summary>
      <returns>유효성 검사 결과 메시지입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidator">
      <summary>유효성 검사 논리를 구현하기 위한 기본 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.GetModelValidator(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>모델에 대한 복합 모델 유효성 검사기를 반환합니다.</summary>
      <returns>모델에 대한 복합 모델 유효성 검사기입니다.</returns>
      <param name="validatorProviders">유효성 검사기 공급자의 열거형입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.IsRequired">
      <summary>모델 속성이 필요한지를 나타내는 값을 가져옵니다.</summary>
      <returns>모델 속성이 필요하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>지정된 개체의 유효성을 검사합니다.</summary>
      <returns>유효성 검사 결과의 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="container">컨테이너입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.ModelValidator.ValidatorProviders">
      <summary>유효성 검사기 공급자의 열거형을 가져오거나 설정합니다.</summary>
      <returns>유효성 검사기 공급자의 열거형입니다.</returns>
    </member>
    <member name="T:System.Web.Http.Validation.ModelValidatorProvider">
      <summary>모델 유효성 검사기 목록을 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.ModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>이 <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />와 관련된 유효성 검사기 목록을 가져옵니다.</summary>
      <returns>유효성 검사기 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider">
      <summary>유효성 검사 공급자를 구현하는 클래스의 추상 클래스를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.AssociatedValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetTypeDescriptor(System.Type)">
      <summary>지정된 형식의 형식 설명자를 가져옵니다.</summary>
      <returns>지정된 형식의 형식 설명자입니다.</returns>
      <param name="type">유효성 검사 공급자의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>메타데이터 및 유효성 검사기 공급자를 사용하여 모델의 유효성 검사기를 가져옵니다.</summary>
      <returns>모델의 유효성 검사기입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자의 열거형입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.AssociatedValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>메타데이터, 유효성 검사기 공급자 및 특성 목록을 사용하여 모델의 유효성 검사기를 가져옵니다.</summary>
      <returns>모델의 유효성 검사기입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자의 열거형입니다.</param>
      <param name="attributes">특성 목록입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" /> 인스턴스를 만드는 메서드를 나타냅니다.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.ValidationAttribute" />에서 파생되는 특성에 대해 유효성 검사기를 제공하는 <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" /> 구현을 나타냅니다. <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />를 구현하는 형식에 대한 유효성 검사기도 제공합니다. 클라이언트 쪽 유효성 검사를 지원하려면 이 클래스에 대해 정적 메서드를 통해 또는 유효성 검사 특성이 <see cref="T:System.Web.Http.Validation.IClientValidatable" />을 구현하도록 하여 어댑터를 등록하면 됩니다. IClientValidatable을 지원하기 위한 논리는 <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" />에서 구현됩니다. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>지정한 메타데이터, 유효성 검사기 공급자 및 특성을 사용하여 모델의 유효성 검사기를 가져옵니다.</summary>
      <returns>모델의 유효성 검사기입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
      <param name="attributes">특성입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapter(System.Type,System.Type)">
      <summary>클라이언트 쪽 유효성 검사를 제공할 수 있도록 어댑터를 등록합니다.</summary>
      <param name="attributeType">유효성 검사 특성의 형식입니다.</param>
      <param name="adapterType">어댑터 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>유효성 검사 공급자에 대한 어댑터 팩터리를 등록합니다.</summary>
      <param name="attributeType">특성의 형식입니다.</param>
      <param name="factory">지정된 특성에 대한 <see cref="T:System.Web.Http.Validation.ModelValidator" /> 개체를 만드는 데 사용할 팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapter(System.Type)">
      <summary>기본 어댑터를 등록합니다.</summary>
      <param name="adapterType">어댑터 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsModelValidationFactory)">
      <summary>기본 어댑터 팩터리를 등록합니다.</summary>
      <param name="factory">기본 어댑터에 대한 <see cref="T:System.Web.Http.Validation.ModelValidator" /> 개체를 만드는 데 사용할 팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapter(System.Type)">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />를 구현하는 개체에 대해 기본 어댑터 형식을 등록합니다. 어댑터 형식은 <see cref="T:System.Web.Http.Validation.ModelValidator" />에서 파생되어야 하며, <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> 및 <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> 형식의 두 매개 변수를 사용하는 Public 생성자를 포함해야 합니다. </summary>
      <param name="adapterType">어댑터 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterDefaultValidatableObjectAdapterFactory(System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />를 구현하는 개체에 대해 기본 어댑터 팩터리를 등록합니다. </summary>
      <param name="factory">팩터리입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapter(System.Type,System.Type)">
      <summary>지정된 modelType(<see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />를 구현해야 함)에 대해 어댑터 형식을 등록합니다. 어댑터 형식은 <see cref="T:System.Web.Http.Validation.ModelValidator" />에서 파생되어야 하며, <see cref="T:System.Web.Http.Metadata.ModelMetadata" /> 및 <see cref="T:System.Web.Http.Controllers.HttpActionContext" /> 형식의 두 매개 변수를 사용하는 Public 생성자를 포함해야 합니다. </summary>
      <param name="modelType">모델 형식입니다.</param>
      <param name="adapterType">어댑터 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataAnnotationsModelValidatorProvider.RegisterValidatableObjectAdapterFactory(System.Type,System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory)">
      <summary>지정된 modelType(<see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />를 구현해야 함)에 대해 어댑터 팩터리를 등록합니다. </summary>
      <param name="modelType">모델 형식입니다.</param>
      <param name="factory">팩터리입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataAnnotationsValidatableObjectAdapterFactory">
      <summary>
        <see cref="T:System.ComponentModel.DataAnnotations.IValidatableObject" />에 기반한 유효성 검사기의 팩터리를 제공합니다.</summary>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider">
      <summary>데이터 구성원 모델의 유효성 검사기 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.DataMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>모델 유효성 검사기를 가져옵니다.</summary>
      <returns>모델의 유효성 검사기입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자의 열거자입니다.</param>
      <param name="attributes">특성 목록입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider">
      <summary>모델이 잘못된 경우 예외를 throw하는 검사기를 제공하는 <see cref="T:System.Web.Http.Validation.ModelValidatorProvider" />의 구현입니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.Collections.Generic.IEnumerable{System.Attribute})">
      <summary>이 <see cref="T:System.Web.Http.Validation.Providers.InvalidModelValidatorProvider" />와 관련된 유효성 검사기 목록을 가져옵니다.</summary>
      <returns>유효성 검사기 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
      <param name="attributes">특성 목록입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider">
      <summary>필수 구성원 모델 유효성 검사기에 대한 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.#ctor(System.Net.Http.Formatting.IRequiredMemberSelector)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="requiredMemberSelector">필수 구성원 선택기입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Providers.RequiredMemberModelValidatorProvider.GetValidators(System.Web.Http.Metadata.ModelMetadata,System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>구성원 모델에 대한 유효성 검사기를 가져옵니다.</summary>
      <returns>구성원 모델의 유효성 검사기입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="validatorProviders">유효성 검사기 공급자</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator">
      <summary>모델 유효성 검사기를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.ComponentModel.DataAnnotations.ValidationAttribute)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
      <param name="attribute">모델의 유효성 검사 특성입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Attribute">
      <summary>모델 유효성 검사기의 유효성 검사 특성을 가져오거나 설정합니다.</summary>
      <returns>모델 유효성 검사기의 유효성 검사 특성입니다.</returns>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.IsRequired">
      <summary>모델 유효성 검사가 필요한지를 나타내는 값을 가져옵니다.</summary>
      <returns>모델 유효성 검사가 필요하면 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.DataAnnotationsModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>모델 유효성을 검사하고 유효성 검사 오류를 반환합니다(있는 경우).</summary>
      <returns>모델의 유효성 검사 오류 메시지 목록이거나 오류가 발생하지 않은 경우 빈 목록입니다.</returns>
      <param name="metadata">모델 메타데이터입니다.</param>
      <param name="container">모델의 컨테이너입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ErrorModelValidator">
      <summary>오류를 나타낼 <see cref="T:System.Web.Http.Validation.ModelValidator" />입니다.이 검사기는 실제 모델 값에 상관없이 항상 예외를 throw합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider},System.String)">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.ErrorModelValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="validatorProviders">모델 유효성 검사기 공급자의 목록입니다.</param>
      <param name="errorMessage">예외에 대한 오류 메시지입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ErrorModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>지정된 개체의 유효성을 검사합니다.</summary>
      <returns>유효성 검사 결과의 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="container">컨테이너입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator">
      <summary>필수 구성원의 <see cref="T:System.Web.Http.Validation.ModelValidator" />를 나타냅니다. </summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.RequiredMemberModelValidator" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="validatorProviders">유효성 검사기 공급자입니다.</param>
    </member>
    <member name="P:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.IsRequired">
      <summary>유효성 검사 시 구성원이 있어야 하는 직렬화 엔진을 지정하는 값을 가져오거나 설정합니다.</summary>
      <returns>구성원이 필요한 경우 true이고, 그렇지 않으면 false입니다.</returns>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.RequiredMemberModelValidator.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>개체의 유효성을 검사합니다.</summary>
      <returns>유효성 검사 결과의 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="container">컨테이너입니다.</param>
    </member>
    <member name="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter">
      <summary>유효성을 검사할 수 있는 개체 어댑터를 제공합니다.</summary>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.Validation.ModelValidatorProvider})">
      <summary>
        <see cref="T:System.Web.Http.Validation.Validators.ValidatableObjectAdapter" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="validatorProviders">유효성 검사 공급자입니다.</param>
    </member>
    <member name="M:System.Web.Http.Validation.Validators.ValidatableObjectAdapter.Validate(System.Web.Http.Metadata.ModelMetadata,System.Object)">
      <summary>지정된 개체의 유효성을 검사합니다.</summary>
      <returns>유효성 검사 결과의 목록입니다.</returns>
      <param name="metadata">메타데이터입니다.</param>
      <param name="container">컨테이너입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IEnumerableValueProvider">
      <summary>
        <see cref="T:System.Collections.IEnumerable" /> 인터페이스를 구현하는 컬렉션에서 값을 가져오는 값 공급자에 대한 기본 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IEnumerableValueProvider.GetKeysFromPrefix(System.String)">
      <summary>지정된 <paramref name="prefix" />에서 키를 검색합니다.</summary>
      <returns>지정된 <paramref name="prefix" />의 키입니다.</returns>
      <param name="prefix">접두사입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IUriValueProviderFactory">
      <summary>들어오는 <see cref="T:System.Net.Http.HttpRequestMessage" />의 <see cref="T:System.Uri" />에 액세스하기 위한 <see cref="T:System.Web.Http.ValueProviders.IValueProvider" />의 작성을 지원하는 <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />에서 구현한 인터페이스를 나타냅니다.</summary>
    </member>
    <member name="T:System.Web.Http.ValueProviders.IValueProvider">
      <summary>ASP.NET MVC의 값 공급자에 필요한 메서드를 정의합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.ContainsPrefix(System.String)">
      <summary>컬렉션이 지정된 접두사를 포함하는지 확인합니다.</summary>
      <returns>지정된 접두사가 컬렉션에 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="prefix">검색할 접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.IValueProvider.GetValue(System.String)">
      <summary>지정된 키를 사용하여 값 개체를 검색합니다.</summary>
      <returns>지정된 키의 값 개체이거나, 키가 없는 경우 null입니다.</returns>
      <param name="key">검색할 값 개체의 키입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderAttribute">
      <summary> 이 특성은 사용자 지정 <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" />를 지정하는 데 사용됩니다. </summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueProviderFactory">모델 바인더의 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.#ctor(System.Type[])">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderAttribute" />의 새 인스턴스를 초기화합니다.</summary>
      <param name="valueProviderFactories">모델 바인더 형식의 배열입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderAttribute.GetValueProviderFactories(System.Web.Http.HttpConfiguration)">
      <summary>값 공급자 팩터리를 가져옵니다.</summary>
      <returns>값 공급자 팩터리의 컬렉션입니다.</returns>
      <param name="configuration">구성 개체입니다.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderAttribute.ValueProviderFactoryTypes">
      <summary>값 공급자 팩터리에서 반환하는 개체의 형식을 가져옵니다.</summary>
      <returns>형식의 컬렉션입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderFactory">
      <summary>값 공급자 개체를 만들기 위한 팩터리를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 컨트롤러 컨텍스트에 대한 값 공급자 개체를 반환합니다.</summary>
      <returns>값 공급자 개체입니다.</returns>
      <param name="actionContext">현재 HTTP 요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.ValueProviderResult">
      <summary>동작 메서드 인수 속성 또는 인수 자체에 폼 게시, 쿼리 문자열 등의 값을 바인딩한 결과를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.#ctor(System.Object,System.String,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.ValueProviderResult" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="rawValue">원시 값입니다.</param>
      <param name="attemptedValue">시도된 값입니다.</param>
      <param name="culture">culture입니다.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.AttemptedValue">
      <summary>표시를 위해 문자열로 변환되는 원시 값을 가져오거나 설정합니다.</summary>
      <returns>표시를 위해 문자열로 변환되는 원시 값입니다.</returns>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type)">
      <summary>이 결과로 캡슐화된 값을 지정된 형식으로 변환합니다.</summary>
      <returns>변환된 값입니다.</returns>
      <param name="type">대상 형식입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.ValueProviderResult.ConvertTo(System.Type,System.Globalization.CultureInfo)">
      <summary>지정된 culture 정보를 사용하여 이 결과로 캡슐화된 값을 지정된 형식으로 변환합니다.</summary>
      <returns>변환된 값입니다.</returns>
      <param name="type">대상 형식입니다.</param>
      <param name="culture">변환에 사용할 culture입니다.</param>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.Culture">
      <summary>culture를 가져오거나 설정합니다.</summary>
      <returns>culture입니다.</returns>
    </member>
    <member name="P:System.Web.Http.ValueProviders.ValueProviderResult.RawValue">
      <summary>값 공급자가 제공하는 원시 값을 가져오거나 설정합니다.</summary>
      <returns>값 공급자가 제공하는 원시 값입니다.</returns>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider">
      <summary>값을 <see cref="T:System.Collections.IEnumerable" /> 인터페이스를 구현하는 값 공급자 목록에서 가져온 값 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.#ctor(System.Collections.Generic.IList{System.Web.Http.ValueProviders.IValueProvider})">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="list">값 공급자 목록입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.ContainsPrefix(System.String)">
      <summary>컬렉션에 지정된 <paramref name="prefix" />가 포함되어 있는지를 확인합니다.</summary>
      <returns>컬렉션에 지정된 <paramref name="prefix" />가 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="prefix">검색할 접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetKeysFromPrefix(System.String)">
      <summary>지정된 <paramref name="prefix" />에서 키를 검색합니다.</summary>
      <returns>지정된 <paramref name="prefix" />의 키입니다.</returns>
      <param name="prefix">키를 검색할 접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.GetValue(System.String)">
      <summary>지정된 <paramref name="key" />를 사용하여 값 개체를 검색합니다.</summary>
      <returns>지정된 <paramref name="key" />에 대한 값 개체입니다.</returns>
      <param name="key">검색할 값 개체의 키입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.InsertItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>컬렉션 내의 지정된 인덱스에 요소를 삽입합니다.</summary>
      <param name="index">0부터 시작하는 인덱스이며 <paramref name="item" />을 삽입해야 합니다.</param>
      <param name="item">삽입할 개체입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProvider.SetItem(System.Int32,System.Web.Http.ValueProviders.IValueProvider)">
      <summary>지정된 인덱스에 있는 요소를 바꿉니다.</summary>
      <param name="index">바꿀 요소의 인덱스(0부터 시작)입니다.</param>
      <param name="item">지정된 인덱스에 있는 요소의 새 값입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory">
      <summary>값 공급자 개체 목록을 만들기 위한 팩터리를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.#ctor(System.Collections.Generic.IEnumerable{System.Web.Http.ValueProviders.ValueProviderFactory})">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="factories">값 공급자 팩터리의 컬렉션입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.CompositeValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 컨트롤러 컨텍스트에 대한 값 공급자 개체 목록을 검색합니다.</summary>
      <returns>지정된 컨트롤러 컨텍스트에 대한 값 공급자 개체 목록입니다.</returns>
      <param name="actionContext">현재 HTTP 요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider">
      <summary>이름/값 쌍에 대한 값 공급자입니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IDictionary{System.String,System.Object},System.Globalization.CultureInfo)"></member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="values">공급자에 대한 이름/값 쌍입니다.</param>
      <param name="culture">이름/값 쌍에 사용된 culture입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.#ctor(System.Func{System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}}},System.Globalization.CultureInfo)">
      <summary>이름/값 쌍을 제공하기 위해 함수 대리자를 사용하여 <see cref="T:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="valuesFactory">이름/값 쌍의 컬렉션을 반환하는 함수 대리자입니다.</param>
      <param name="culture">이름/값 쌍에 사용된 culture입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.ContainsPrefix(System.String)">
      <summary>컬렉션이 지정된 접두사를 포함하는지 확인합니다.</summary>
      <returns>지정된 접두사가 컬렉션에 포함되어 있으면 true이고, 그렇지 않으면 false입니다.</returns>
      <param name="prefix">검색할 접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetKeysFromPrefix(System.String)">
      <summary>접두사에서 키를 가져옵니다.</summary>
      <returns>키입니다.</returns>
      <param name="prefix">접두사입니다.</param>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.NameValuePairsValueProvider.GetValue(System.String)">
      <summary>지정된 키를 사용하여 값 개체를 검색합니다.</summary>
      <returns>지정된 키에 대한 값 개체입니다.</returns>
      <param name="key">검색할 값 개체의 키입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider">
      <summary>
        <see cref="T:System.Collections.Specialized.NameValueCollection" /> 개체에 포함된 쿼리 문자열에 대한 값 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">현재 HTTP 요청에 대한 정보를 캡슐화하는 개체입니다.</param>
      <param name="culture">대상 문화권에 대한 정보를 포함하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory">
      <summary>쿼리 문자열 값 공급자 개체의 새 인스턴스를 만드는 작업을 담당하는 클래스를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.QueryStringValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 컨트롤러 컨텍스트에 대한 값 공급자 개체를 검색합니다.</summary>
      <returns>쿼리 문자열 값 공급자 개체입니다.</returns>
      <param name="actionContext">현재 HTTP 요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider">
      <summary>IDictionary(Of TKey, TValue) 인터페이스를 구현하는 개체에 포함된 경로 데이터에 대한 값 공급자를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider.#ctor(System.Web.Http.Controllers.HttpActionContext,System.Globalization.CultureInfo)">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProvider" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
      <param name="actionContext">HTTP 요청에 대한 정보를 포함하는 개체입니다.</param>
      <param name="culture">대상 문화권에 대한 정보를 포함하는 개체입니다.</param>
    </member>
    <member name="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory">
      <summary>경로 데이터 값 공급자 개체를 만들기 위한 팩터리를 나타냅니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.#ctor">
      <summary>
        <see cref="T:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory" /> 클래스의 새 인스턴스를 초기화합니다.</summary>
    </member>
    <member name="M:System.Web.Http.ValueProviders.Providers.RouteDataValueProviderFactory.GetValueProvider(System.Web.Http.Controllers.HttpActionContext)">
      <summary>지정된 컨트롤러 컨텍스트에 대한 값 공급자 개체를 검색합니다.</summary>
      <returns>값 공급자 개체입니다.</returns>
      <param name="actionContext">현재 HTTP 요청에 대한 정보를 캡슐화하는 개체입니다.</param>
    </member>
  </members>
</doc>